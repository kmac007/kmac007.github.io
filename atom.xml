<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kmac007</title>
  <subtitle>kmac007&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kmac007.com/"/>
  <updated>2017-09-13T09:11:56.804Z</updated>
  <id>https://www.kmac007.com/</id>
  
  <author>
    <name>kmac007</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Token进行身份认证</title>
    <link href="https://www.kmac007.com/2017/%E4%BD%BF%E7%94%A8Token%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.html"/>
    <id>https://www.kmac007.com/2017/使用Token进行身份认证.html</id>
    <published>2017-09-03T11:04:06.000Z</published>
    <updated>2017-09-13T09:11:56.804Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要做一个个人博客系统，写后台管理的时候需要考虑到身份认证。之前也算是接触过Cookie和Session的验证方式，但是在网上查看各种资料的时候发现Token这个名词，并且据说很多大型网站都在用。因此，我通过查阅各种资料写下了这个学习笔记。</p>
<h1 id="Cookie和Session的验证方法"><a href="#Cookie和Session的验证方法" class="headerlink" title="Cookie和Session的验证方法"></a>Cookie和Session的验证方法</h1><p>HTTP是一个无状态协议，客户端每次发出请求，下一次请求无法得知上一次请求所包含的状态数据。也就是说，客户端使用用户密码通过了身份验证，但是下次客户端再次发送请求的时候，还需要再次验证。</p>
<p>可以使用Cookie和Session解决这个问题：当用户请求登录时，如果没有问题，服务器就在服务端生成一条Session记录用户的状态，并将这条Session的Id号存储在Cookie的相应字段中并发送给客户端。客户端下次再发送请求会将Cookie发送到服务端，服务端验证Cookie中相应的Session的id字段，如果验证成功，则说明用户已登录，将数据返回给用户。</p>
<p>Session可能会存储在内存，磁盘或者数据库中。我们可能需要在服务端定期清理过期的Session。</p>
<a id="more"></a>
<h1 id="基于Token的身份验证方法"><a href="#基于Token的身份验证方法" class="headerlink" title="基于Token的身份验证方法"></a>基于Token的身份验证方法</h1><p>使用Token的身份验证方法，在服务端不需要存储用户的登录记录。大致的流程如下：</p>
<ol>
<li>客户端使用用户名密码请求登录</li>
<li>服务端收到请求，验证用户名密码</li>
<li>验证成功后，服务端会签发一个Token，再把这个Token发送给客户端</li>
<li>客户端收到Token以后可以把它存储起来，比如放在Cookie里或者Local Storage里</li>
<li>客户端每次向服务端请求资源时需要携带服务端签发的Token</li>
<li>服务端收到请求，验证请求中携带的Token，如果验证成功，就向客户端返回请求的数据。</li>
</ol>
<h1 id="相比Cookie与Session认证认证的优势"><a href="#相比Cookie与Session认证认证的优势" class="headerlink" title="相比Cookie与Session认证认证的优势"></a>相比Cookie与Session认证认证的优势</h1><blockquote>
<ol>
<li>支持跨域站点访问<br>Cookie是不支持跨域访问的，可以通过<code>document.domain</code>来设定顶级域名，支持相同顶级域名间的Cookie进行跨域访问。但是跨站点的访问仍然不支持，如果使用Token机制，就可以通过HTTP头传输用户认证信息，从而更好的实现跨域。</li>
<li>无状态<br>Token机制在服务端不需要存储session信息，Token自身包含了登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息</li>
<li>去耦<br>不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要你的API被调用的时候，你可以进行Token生成调用即可。</li>
<li>更适用于移动应用<br>当客户端是原生应用时，Cookie是不被支持的，虽然目前Webview的方式可以解决Cookie问题，但是采用Token认证机制会简单得多。</li>
<li>安全性更强<br>由于不再依赖于Cookie，所以不再需要考虑对CSRF（跨站请求伪造）的防范</li>
<li>标准化易扩展<br>可以采用标准化的JSON Web Token（JWT）,对以后系统介入Node等纯前端开发更便捷</li>
<li>相比Session一致性提高性能<br>相比服务端保存Session一致性信息，并查询用户登录状态，一般来说Token的验证过程（包含加密和解密），性能开销会更小。</li>
</ol>
</blockquote>
<h1 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h1><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。JWT标准的Token有三个部分：</p>
<ul>
<li>header</li>
<li>payload</li>
<li>signature</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">header.payload.signature</div></pre></td></tr></table></figure>
<p>三个部分使用点分隔开，前两者使用Base64编码，signature以前两者为基础，以特定的密钥经HmacSHA256算法生成，所以生成的Token类似这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ewogICJ0eXAiOiAiSldUIiwKICAiYWxnIjogIkhTMjU2Igp9.ewogImlzcyI6ICJrbWFjMDA3Lm1lIiwKICJleHAiOiAiMTQzODk1NTQ0NSIsCiAibmFtZSI6ICJyb2JiIiwKICJhZG1pbiI6IHRydWUKfQ==.41b22c6602d3907162f713a3fcdf7e61e7b10411798ff0ab4edb5647a7f47163</div></pre></td></tr></table></figure></p>
<h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>header部分主要是两部分，一个是Token的类型，另一个是使用的算法，比如下面类型就是JWT，使用的算法是HS256。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span>,</div><div class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的内容要用Base64编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ewogICJ0eXAiOiAiSldUIiwKICAiYWxnIjogIkhTMjU2Igp9</div></pre></td></tr></table></figure></p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>Payload里面是Token的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：</p>
<ul>
<li>iss: Issuer，发行者</li>
<li>sub: Subject，主题</li>
<li>aud: Audience, 观众</li>
<li>exp: Expiration time, 过期时间</li>
<li>nbf: Not before</li>
<li>iat: Issued at, 发行时间</li>
<li>jti: JWT ID</li>
</ul>
<p>比如下面这个Payload，用到了iss发行人，还有exp过期时间。另外还有两个自定义字段，一个是name，还有一个是admin。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"iss"</span>: <span class="string">"kmac007.me"</span>,</div><div class="line">  <span class="attr">"exp"</span>: <span class="string">"1438955445"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"dk"</span>,</div><div class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用Base64编码以后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ewogICJpc3MiOiAia21hYzAwNy5tZSIsCiAgImV4cCI6ICIxNDM4OTU1NDQ1IiwKICAibmFtZSI6ICJkayIsCiAgImFkbWluIjogdHJ1ZQp9</div></pre></td></tr></table></figure></p>
<h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>JWT的signaure分为三部分，第一部分为Base64编码以后的header，第二部分为Base64编码后的payload；第三部分为前两者经Base64编码后用<code>.</code>字符连接再经特定的加密算法获得的结果，三者使用<code>.</code>字符连接。</p>
<ul>
<li>header</li>
<li>payload</li>
<li>secret</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> encodedString = <span class="string">`<span class="subst">$&#123;base64UrlEncode(header)&#125;</span>.<span class="subst">$&#123;base64UrlEncode(payload)&#125;</span></span></div><div class="line"><span class="string">HMACSHA256(encodedString, 'secret')</span></div></pre></td></tr></table></figure>
<p>假设处理后的结果为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">handelByHSHA256</div></pre></td></tr></table></figure></p>
<p>那么最终服务端生成并且要发送给客户端的Token类似如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ewogICJ0eXAiOiAiSldUIiwKICAiYWxnIjogIkhTMjU2Igp9.ewogICJpc3MiOiAia21hYzAwNy5tZSIsCiAgImV4cCI6ICIxNDM4OTU1NDQ1IiwKICAibmFtZSI6ICJkayIsCiAgImFkbWluIjogdHJ1ZQp9.handelByHSHA256</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://ninghao.net/blog/2834" target="_blank" rel="external">基于 Token 的身份验证</a></li>
<li><a href="http://www.cnblogs.com/binyue/p/4812798.html" target="_blank" rel="external">使用Json Web Token设计Passport系统</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想要做一个个人博客系统，写后台管理的时候需要考虑到身份认证。之前也算是接触过Cookie和Session的验证方式，但是在网上查看各种资料的时候发现Token这个名词，并且据说很多大型网站都在用。因此，我通过查阅各种资料写下了这个学习笔记。&lt;/p&gt;
&lt;h1 id=&quot;Cookie和Session的验证方法&quot;&gt;&lt;a href=&quot;#Cookie和Session的验证方法&quot; class=&quot;headerlink&quot; title=&quot;Cookie和Session的验证方法&quot;&gt;&lt;/a&gt;Cookie和Session的验证方法&lt;/h1&gt;&lt;p&gt;HTTP是一个无状态协议，客户端每次发出请求，下一次请求无法得知上一次请求所包含的状态数据。也就是说，客户端使用用户密码通过了身份验证，但是下次客户端再次发送请求的时候，还需要再次验证。&lt;/p&gt;
&lt;p&gt;可以使用Cookie和Session解决这个问题：当用户请求登录时，如果没有问题，服务器就在服务端生成一条Session记录用户的状态，并将这条Session的Id号存储在Cookie的相应字段中并发送给客户端。客户端下次再发送请求会将Cookie发送到服务端，服务端验证Cookie中相应的Session的id字段，如果验证成功，则说明用户已登录，将数据返回给用户。&lt;/p&gt;
&lt;p&gt;Session可能会存储在内存，磁盘或者数据库中。我们可能需要在服务端定期清理过期的Session。&lt;/p&gt;
    
    </summary>
    
      <category term="Token" scheme="https://www.kmac007.com/categories/Token/"/>
    
    
      <category term="Token" scheme="https://www.kmac007.com/tags/Token/"/>
    
      <category term="Session" scheme="https://www.kmac007.com/tags/Session/"/>
    
      <category term="JWT" scheme="https://www.kmac007.com/tags/JWT/"/>
    
      <category term="Cookie" scheme="https://www.kmac007.com/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB与Mongoose学习总结</title>
    <link href="https://www.kmac007.com/2017/MongoDB%E4%B8%8EMongoose%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.kmac007.com/2017/MongoDB与Mongoose学习总结.html</id>
    <published>2017-08-25T15:02:31.000Z</published>
    <updated>2017-09-15T15:00:21.982Z</updated>
    
    <content type="html"><![CDATA[<p>为了能够使用Node.js实现前后端分离，MongoDB是必学的，Mongodb是基于文档的非关系型数据库，文档是按BSON（JSON的轻量化二进制格式）存储的，增删改查等管理数据库的命令和JavaScript语法很像。以下是我的学习笔记。</p>
<h1 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h1><blockquote>
<p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。</p>
</blockquote>
<p>优点:</p>
<ul>
<li>高可扩展性</li>
<li>分布式计算</li>
<li>低成本</li>
<li>架构的灵活性，半结构化数据</li>
<li>没有复杂的关系</li>
</ul>
<p>缺点:</p>
<ul>
<li>没有标准化</li>
<li>有限的查询功能（到目前为止）</li>
<li>最终一致是不直观的程序</li>
</ul>
<h1 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h1><blockquote>
<p>MongoDB是NoSQL数据库的一种<br>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
</blockquote>
<a id="more"></a>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li>
<li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li>
<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>
<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>
<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>
<li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>
<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>
<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>
<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>
<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>
<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>
<li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>
<li>MongoDB安装简单。</li>
</ul>
<h2 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h2><ol>
<li>设置dbpath参数值为自定义的目录路径，如:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath=C:/data/db</div></pre></td></tr></table></figure>
<ol>
<li>在test文件夹中新建一个mongod.conf文件，在这个文件中设置mongodb启动的配置参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mongod.conf</span></div><div class="line">dbpath = data</div><div class="line">logpath = log/mongod.log</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod -f conf/mongod.conf</div></pre></td></tr></table></figure>
<p>执行后命令行工具中没有任何提示，记录保存到日志文件中，mongodb服务已正常开启</p>
<ol>
<li>windows用户可以直接执行mongod.exe可执行文件来直接启动服务器</li>
</ol>
<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>启动好服务器时，保证命令行工具不关闭，重新开一个命令行工具，通过以下方式连接数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo 127.0.0.1/<span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<p>其中test为数据库名称</p>
<h2 id="关闭服务器"><a href="#关闭服务器" class="headerlink" title="关闭服务器"></a>关闭服务器</h2><p>切换到admin数据库，执行db.shutdownServer()命令来关闭，如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">db.shutdownServer()</div></pre></td></tr></table></figure></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>MongoDB中默认的数据库为test，如果没有创建新的数据库，集合将存放在test数据中</p>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>使用show dbs来查看数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show dbs</div></pre></td></tr></table></figure></p>
<h3 id="创建-切换"><a href="#创建-切换" class="headerlink" title="创建/切换"></a>创建/切换</h3><p>使用use命令来切换/创建数据库，use db_name，当使用show dbs时，会发现新创建的数据库不在列表中，要使其显示，则需要向数据库插入一些数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use db_name</div></pre></td></tr></table></figure></p>
<h3 id="显示当前数据库"><a href="#显示当前数据库" class="headerlink" title="显示当前数据库"></a>显示当前数据库</h3><p>使用db命令来显示当前数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db</div></pre></td></tr></table></figure></p>
<h3 id="将数据库写入集合中"><a href="#将数据库写入集合中" class="headerlink" title="将数据库写入集合中"></a>将数据库写入集合中</h3><p>使用db.集合名.insert(文档)来将文档的数据写入集合中，文档的格式为JSON。而所有存储在集合中的数据都是BSON格式。BSON是一种类JSON 的二进制形式的存储格式。简称Binary JSON。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection_name.insert(&#123;<span class="string">'name'</span>: <span class="string">'dk'</span>&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h3><p>使用show collections命令可以查看当前数据库中的所有集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show collections</div></pre></td></tr></table></figure></p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure>
<p>将删除当前所选的数据库</p>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>集合类似于SQL数据库中的数据表，标识为collection</p>
<h3 id="查看集合-1"><a href="#查看集合-1" class="headerlink" title="查看集合"></a>查看集合</h3><p>可以使用命令show collections检查所创建的集合<br><strong>注: 也可以使用show tables来查看集合</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show collections</div><div class="line">//or</div><div class="line">show tables</div></pre></td></tr></table></figure></p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>通过db.createCollection(‘collection_name’)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createCollection(name, &#123;capped: &lt;Boolean&gt;, autoIndexId: &lt;Boolean&gt;, size: &lt;number&gt;, max &lt;number&gt;&#125; )</div></pre></td></tr></table></figure></p>
<ul>
<li>name:集合的名字</li>
<li>capped:是否启用集合限制，如果开启需要制定一个限制条件，默认为不启用，这个参数没有实际意义</li>
<li>max:集合中最大条数限制，默认为没有限制</li>
<li>size:限制集合使用空间的大小，默认为没有限制，size的优先级比max要高</li>
<li>autoIndexId:是否使用_id作为索引，默认为使用(true或false)</li>
</ul>
<p><strong>注意： 向集合中插入文档时，若集合不存在，则会自动创建集合</strong></p>
<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p>通过db.collection_name.drop()用于数据库中删除集合。如果选定的集合成功删除，drop()方法将返回true，否则返回false<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.drop()</div></pre></td></tr></table></figure></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">类型        数字          备注</div><div class="line">Double        1         双精度浮点数 - 此类型用于存储浮点值</div><div class="line">String        2         字符串 - 这是用于存储数据的最常用的数据类型。MongoDB中的字符串必须为UTF-8</div><div class="line">Object        3         对象 - 此数据类型用于嵌入式文档</div><div class="line">Array         4         数组 - 此类型用于将数组或列表或多个值存储到一个键中</div><div class="line">Binary data   5         二进制数据 - 此数据类型用于存储二进制数据</div><div class="line">Undefined     6         已废弃</div><div class="line">Object id     7         对象ID - 此数据类型用于存储文档的ID</div><div class="line">Boolean       8         布尔类型 - 此类型用于存储布尔值(true / false)值</div><div class="line">Date          9         日期 - 此数据类型用于以UNIX时间格式存储当前日期或时间。可以通过创建日期对象并将日，月，年的日期进行指定自己需要的日期时间</div><div class="line">Null          10        Null - 此类型用于存储Null值</div><div class="line">Regular       11        正则表达式 - 此数据类型用于存储正则表达式</div><div class="line">JavaScript    13        代码 - 此数据类型用于将JavaScript代码存储到文档中</div><div class="line">Symbol        14        符号 - 该数据类型与字符串相同；但是，通常保留用于使用特定符号类型的语言</div><div class="line">JavaScript (with scope)  15     代码 - 此数据类型用于将带作用域的JavaScript代码存储到文档中</div><div class="line">32-bit integer           16     32位整型 - 此类型用于存储数值</div><div class="line">Timestamp                17     时间戳 - 当文档被修改或添加时，可以方便地进行录制</div><div class="line">64-bit integer           18     64位整型 - 此类型用于存储数值</div><div class="line">Min key                  255    最小键 - 此类型用于将值与最小BSON元素进行比较</div><div class="line">Max key                  127    最大键 - 此类型用于将值与最大BSON元素进行比较</div></pre></td></tr></table></figure>
<h3 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h3><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="查找值类型为数字的x，数字的-type为1"><a href="#查找值类型为数字的x，数字的-type为1" class="headerlink" title="查找值类型为数字的x，数字的$type为1"></a>查找值类型为数字的x，数字的$type为1</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="string">"x"</span>:&#123;<span class="variable">$type</span>:1&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div></pre></td></tr></table></figure>
<h4 id="查找值类型为字符串的x，字符串的-type为2"><a href="#查找值类型为字符串的x，字符串的-type为2" class="headerlink" title="查找值类型为字符串的x，字符串的$type为2"></a>查找值类型为字符串的x，字符串的$type为2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="string">"x"</span>:&#123;<span class="variable">$type</span>:2&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="查找值类型为布尔值的x，布尔值的-type为8"><a href="#查找值类型为布尔值的x，布尔值的-type为8" class="headerlink" title="查找值类型为布尔值的x，布尔值的$type为8"></a>查找值类型为布尔值的x，布尔值的$type为8</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="string">"x"</span>:&#123;<span class="variable">$type</span>:8&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><p>这部分将介绍MongoDB数据库文档的增删改查</p>
<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p>要将数据插入到MongoDB集合中，需要使用MongoDB的insert()或save()方法，还有insertOne()和insertMany()方法</p>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.insert(document)</div></pre></td></tr></table></figure>
<p>插入文档时若不指定_id参数，那么MongoDB会为此文档分配一个唯一的ObjectId。_id为集合中每个文档唯一的12个字节的十六进制数。</p>
<ul>
<li>_id，又称为ObjectId是一个12字节的BSON类型字符串。按照字节顺序依次代表：</li>
<li>4字节：UNIX时间戳</li>
<li>3字节：表示运行MongoDB的机器</li>
<li>2字节：表示生成此_id的进程</li>
<li>3字节：由一个随机数开始的计数器生成的值</li>
</ul>
<p>如果数据库中不存在集合，则MongoDB将创建此集合，然后将文档插入到该集合中</p>
<p>可以使用js语法，插入多个文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">for</span>(var i = 0; i &lt; 3; i++)db.p.insert(&#123;y: i&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h4><p>插入文档也可以使用<code>db.p.save(document)</code>。如果不再文档中指定_id，那么save()方法将同insert()方法一样，会自动分配id。</p>
<p>save()方法可以复写和修改，而insert()方法不可以</p>
<h4 id="insertOne"><a href="#insertOne" class="headerlink" title="insertOne()"></a>insertOne()</h4><p>单个文档插入</p>
<h4 id="insertMany"><a href="#insertMany" class="headerlink" title="insertMany()"></a>insertMany()</h4><p>多个文档插入，参数为数组</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>从MongoDB集合查询数据，使用find()方法，默认返回前20条文档，输入”it”显示接下来的20条文档。<br>find()命令基本语法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find(document)</div></pre></td></tr></table></figure></p>
<p>限定查询条件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find(&#123;x:1&#125;)</div></pre></td></tr></table></figure></p>
<p>可以通过find的第二个参数来指定返回的值，值为1或者true表示显示该键，值为0或false表示不显示该键。如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(null, &#123;x:1&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div><div class="line">&gt; db.p.find(null, &#123;x:0&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>) &#125;</div><div class="line">&gt; db.p.find(null, &#123;_id:0&#125;)</div><div class="line">&#123; <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>可以通过count()方法显示符合条件的文档数量:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;x:1&#125;).count()</div><div class="line">1</div></pre></td></tr></table></figure></p>
<h4 id="findOne"><a href="#findOne" class="headerlink" title="findOne()"></a>findOne()</h4><p>findOne()只返回最早添加的那个文档</p>
<h4 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">小于    　　  &#123;&lt;key&gt;:&#123;<span class="variable">$lt</span>:&lt;value&gt;&#125;&#125;</div><div class="line">小于或等于    &#123;&lt;key&gt;:&#123;<span class="variable">$lte</span>:&lt;value&gt;&#125;&#125;</div><div class="line">大于    　　  &#123;&lt;key&gt;:&#123;<span class="variable">$gt</span>:&lt;value&gt;&#125;&#125;</div><div class="line">大于或等于    &#123;&lt;key&gt;:&#123;<span class="variable">$gte</span>:&lt;value&gt;&#125;&#125;</div><div class="line">不等于    　　&#123;&lt;key&gt;:&#123;<span class="variable">$ne</span>:&lt;value&gt;&#125;&#125;</div><div class="line">等于     　　 &#123;&lt;key&gt;:&#123;<span class="variable">$eq</span>:&lt;value&gt;&#125;&#125;</div></pre></td></tr></table></figure>
<p>取x小于3的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find(&#123;x: &#123;<span class="variable">$lt</span>: 3&#125;&#125;)</div></pre></td></tr></table></figure></p>
<p>以此类推</p>
<h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><p>$and、$or 代表与或<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.p.find(&#123;<span class="variable">$and</span>:[&#123;x:1&#125;,&#123;y:2&#125;]&#125;)</div><div class="line">db.p.find(&#123;<span class="variable">$or</span>:[&#123;x:1&#125;,&#123;y:2&#125;]&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>文档查询可以使用正则表达式，但只支持字符串类型的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;x:/a/&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div><div class="line">&gt; db.p.find(&#123;x:/1/&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="where"><a href="#where" class="headerlink" title="$where"></a>$where</h4><p>可以使用任意的JavaScript作为查询条件<br>使用字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="variable">$where</span>: <span class="string">"this.x===1"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&gt; db.p.find(&#123;<span class="variable">$where</span>: <span class="string">"obj.x===1"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div></pre></td></tr></table></figure></p>
<p>使用函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="variable">$where</span>: <span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> this.x === 1&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div></pre></td></tr></table></figure></p>
<h4 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h4><p>如果需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的limit()方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。<br>默认返回前20条文档，输入”it”显示接下来的20条文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find().<span class="built_in">limit</span>(NUMBER)</div></pre></td></tr></table></figure></p>
<h4 id="skit"><a href="#skit" class="headerlink" title="skit()"></a>skit()</h4><p>跳过指定数量的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.skip(NUMBER)</div></pre></td></tr></table></figure></p>
<h4 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 sort()"></a>排序 sort()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find().sort(&#123;KEY: 1&#125;)</div></pre></td></tr></table></figure>
<p>其中1为升序排序，而-1是用于降序排列</p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>使用updata()或save()方法来更新集合中的文档</p>
<h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><p>update()方法用于更新已存在的文档。语法格式如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.update(&lt;query&gt;,&lt;update&gt;,&#123;upsert:&lt;boolean&gt;, multi: &lt;boolean&gt;,writeConcern:&lt;document&gt;&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>query : update的查询条件，类似sql update查询内where后面的</li>
<li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql - update查询内set后面的</li>
<li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入- objNew,true为插入，默认是false，不插入</li>
<li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新</li>
<li>writeConcern :可选，抛出异常的级别</li>
</ul>
<p>默认只更新找到第一条记录： 将x:1  改为x:10<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.update(&#123;x:1&#125;,&#123;<span class="variable">$set</span>:&#123;x:10&#125;&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</div><div class="line">&gt; db.p.find()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 10 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>如果不使用$set，则将文档的内容替换为x:10</p>
<p>更新全部记录，将x:10，更新为x:1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.update(&#123;x:10&#125;,&#123;<span class="variable">$set</span>:&#123;x:1&#125;,<span class="literal">false</span>,<span class="literal">true</span>&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="save-1"><a href="#save-1" class="headerlink" title="save()"></a>save()</h4><p>save()方法可以插入或更新文档，如果参数中的文档_id与集合中所存在的_id不同，则插入，如果相同，则更新</p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>使用remove()方法来移除集合中的数据</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>默认地，mongodb删除符合条件的所有文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.remove(&lt;query&gt;,&#123;justOne: &lt;boolean&gt;, writeConcern: &lt;document&gt;&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>query :删除的文档的条件。</li>
<li>justOne : （可选）如果设为 true 或 1，则只删除一个文档。</li>
<li>writeConcern :（可选）抛出异常的级别</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//删除符合条件的第一个文档</div><div class="line">db.p.remove(&#123;x:1&#125;,1)</div><div class="line">//删除符合的所有文档</div><div class="line">db.p.remove(&#123;x:1&#125;)</div></pre></td></tr></table></figure>
<h1 id="Mongoose基础"><a href="#Mongoose基础" class="headerlink" title="Mongoose基础"></a>Mongoose基础</h1><h2 id="什么是Mongoose"><a href="#什么是Mongoose" class="headerlink" title="什么是Mongoose"></a>什么是Mongoose</h2><p>Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具。下面将介绍如何使用Mongoose来操作MongoDB</p>
<h2 id="Node-js驱动"><a href="#Node-js驱动" class="headerlink" title="Node.js驱动"></a>Node.js驱动</h2><p>在介绍Mongoose之前，首先介绍使用Node.js操作MongoDB的方法。<br>如果使用程序操作数据库，就要使用MongoDB驱动。MongoDB驱动实际上就是为应用程序提供一个接口，不同语言对应不同的驱动，Node.js驱动不能应用在其他后端语言中。</p>
<h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mongodb</div></pre></td></tr></table></figure>
<p>然后使用require()方法引入mongodb数据库，通过MongoClient对象的connect()方法连接mongodb，最后通过node来对mongodb进行异步的增删改差操作。</p>
<p>在MongoDB数据库中建立db1数据库，然后通过如下代码，即可在集合’col’ 中插入{‘a’:1}文档,如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">'mongodb'</span>)</div><div class="line">mongodb.MongoClient.connect(<span class="string">"mongdb://localhost/db1"</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!err) &#123;</div><div class="line">    db.collection(<span class="string">"col"</span>).insert(&#123;</div><div class="line">      <span class="string">"a"</span>: <span class="number">1</span></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(result)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  result: &#123; ok: 1, n: 1 &#125;,</div><div class="line">  ops: [ &#123; a: 1, _id: 59ae5283ff6e2d21503d0bc3 &#125; ],</div><div class="line">  insertedCount: 1,</div><div class="line">  insertedIds: [ 59ae5283ff6e2d21503d0bc3 ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Mongoose是基于Node.js的MongoDB对象模型工具，有以下两个特点：</p>
<ol>
<li>通过关系型数据库思想来设计非关系型数据库</li>
<li>基于mongodb驱动，简化操作<center><img src="http://ovdfwd2hf.bkt.clouddn.com/Mongoose.jpg" alt="Mongoose"></center>

</li>
</ol>
<p>Mongoose中，有三个比较重要的概念，分别是Schema、Model、Entity。他们关系是： Schema生成Model，Model创造Document，Model和Document都可对数据库操作造成影响，但Model比Document更具操作性。</p>
<p>Schema用于定义数据库的结构。类似创建表时的数据定义（不仅仅可以定义文档的结构和属性，还可以定义文档的实例方法、静态模型方法、复合索引等），每个Schema会映射到mongodb中的一个collection，Schema不具备操作数据库的能力。</p>
<p>Model是由Schema编译而成的构造器，具有抽象属性和行为，可以对数据库进行增删改差。Model的每个实例(instance)就是一个文档document。</p>
<p>Document是由Model创建的实体，它的操作也会影响数据库。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装nodejs和mongodb之后，使用npm安装mongoose<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mongoose</div></pre></td></tr></table></figure></p>
<p>安装成功后通过require(‘mongoose’)来使用</p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>通过require引入mongoose后，通过connect()方法即可连接到数据库</p>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(url)</div></pre></td></tr></table></figure>
<p>如果还需要传递用户名、密码，则可以使用如下方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(<span class="string">'mongodb://username:password@host:port/database?options...'</span>)</div></pre></td></tr></table></figure></p>
<p>connect()方法还接受一个选项对象options，该对象将传递给底层驱动程序。这里所包含的所有选项优先于连接字符创中传递的选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(uri，options)</div></pre></td></tr></table></figure></p>
<p>options可用选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db            -数据库设置</div><div class="line">server        -服务器设置</div><div class="line">replset       -副本集设置</div><div class="line">user          -用户名</div><div class="line">pass          -密码</div><div class="line">auth          -鉴权选项</div><div class="line">mongos        -连接多个数据库</div><div class="line">promiseLibrary</div></pre></td></tr></table></figure></p>
<p>如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  db: &#123; <span class="attr">native_parser</span>: <span class="literal">true</span> &#125;,</div><div class="line">  server: &#123; <span class="attr">poolSize</span>: <span class="number">5</span> &#125;,</div><div class="line">  replset: &#123; <span class="attr">rs_name</span>: <span class="string">'myReplicaSetName'</span> &#125;,</div><div class="line">  user: <span class="string">'myUserName'</span>,</div><div class="line">  pass: <span class="string">'myPassword'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">mongoose.connect(uri, options)</div></pre></td></tr></table></figure></p>
<p>如果要连接多个数据库，只需要设置多个url以逗号隔开，同时设置mongos为true<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(<span class="string">'urlA, urlB'</span>,&#123;</div><div class="line">  mongos: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>connect()方法还接受一个回调函数作为参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(uri, options, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect()"></a>disconnect()</h3><p>通过mongoose.disconnect() 方法可以断开连接</p>
<h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>Schema主要用于定义MongoDB中集合Collection里文档document的结构<br>定义Schema非常简单,指定字段名和类型即可，支持的类型包括以下8种。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String      字符串</div><div class="line">Number      数字</div><div class="line">Date        日期</div><div class="line">Buffer      二进制</div><div class="line">Boolean     布尔值</div><div class="line">Mixed       混合类型</div><div class="line">ObjectId    对象ID</div><div class="line">Array       数组</div></pre></td></tr></table></figure></p>
<p>通过mongoose.Schema来调用Schema，然后用new方法创建schema对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">var</span> mySchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  title: <span class="built_in">String</span>,</div><div class="line">  author: <span class="built_in">String</span>,</div><div class="line">  body: <span class="built_in">String</span>,</div><div class="line">  comments: [&#123; <span class="attr">body</span>: <span class="built_in">String</span>, <span class="attr">date</span>: <span class="built_in">Date</span> &#125;],</div><div class="line">  date: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</div><div class="line">  hidden: <span class="built_in">Boolean</span>,</div><div class="line">  meta: &#123;</div><div class="line">    votes: <span class="built_in">Number</span>,</div><div class="line">    favs: <span class="built_in">Number</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>注意：创建Schema对象时，声明字段类型有两种方法，一种是首字母大写的字段类型，另一种是引号包含的小写字段类型</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mySchema = <span class="keyword">new</span> Schema(&#123; <span class="attr">title</span>: <span class="built_in">String</span>, <span class="attr">author</span>: <span class="built_in">String</span> &#125;)</div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="keyword">var</span> mySchema = <span class="keyword">new</span> Schema(&#123;<span class="attr">title</span>: <span class="string">'string'</span>, <span class="attr">author</span>: <span class="string">'string'</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>如需在Schema定义后添加其他字段，可以使用add()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var mySchema = new Schema</div><div class="line">mySchema.add(&#123; name: String, color: String &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>模型Model是根据Schema编译出的构造器，或者称之为类，通过Model可以实例化出文档对象document<br>文档document的创建和检索都需要通过模型Model来处理</p>
<h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.model()</div></pre></td></tr></table></figure>
<p>使用model()方法，将Schema编译为Model。model()方法的第一个参数是模型名称</p>
<p><strong>注意：一定要将model()方法的第一个参数和其要赋值的变量设置为相同的值，否则会出现不可预知的结果</strong></p>
<p>Mongoose会将集合名称设置为模版名称的小写版。如果名称的最后一个字符是字母，则会变成复数；如果名称的最后一个字符是数字，则不变；如果名称的最后一个字符为数字，则不变。例如： 如果Model名称为<code>MyModel</code>,则集合名称为<code>mymodels</code>；如果Model名称为<code>Model1</code>，则集合名称为<code>model1</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">num</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span>, <span class="attr">size</span>: <span class="built_in">String</span> &#125;)</div><div class="line"><span class="keyword">var</span> MyModel = mongoose.model(<span class="string">'MyModel'</span>, schema)</div></pre></td></tr></table></figure></p>
<h3 id="实例化文档document"><a href="#实例化文档document" class="headerlink" title="实例化文档document"></a>实例化文档document</h3><p>通过new方法，实例化Model1，获得实例化后的document对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.connect(<span class="string">'mongodb://user:123456@localhost/db1'</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, (err)=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'连接成功'</span>)</div><div class="line">     <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">num</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span>, <span class="attr">size</span>: <span class="built_in">String</span> &#125;)</div><div class="line">     <span class="keyword">var</span> MyModel = mongoose.model(<span class="string">'MyModel'</span>, schema)</div><div class="line">     <span class="keyword">var</span> doc1 = <span class="keyword">new</span> MyModel(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;)</div><div class="line">     <span class="built_in">console</span>.log(doc1.size) <span class="comment">//'small'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="文档保存"><a href="#文档保存" class="headerlink" title="文档保存"></a>文档保存</h3><p>通过<code>new Model1()</code>创建的文档doc1，必须通过save()方法，才能将创建的文档保存到数据库的集合中，集合名称为模型名称的小写复数</p>
<p>回调函数是可选的，第一个参数为err，第二个参数为保存的文档对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">doc1.save((err, doc)=&gt;&#123;</div><div class="line">	console.log(doc)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;)</div><div class="line">mongoose.connect(&quot;mongodb://user:123456@localhost/db1&quot;,&#123;useMongoClient: true&#125;, (err)=&gt;&#123;</div><div class="line">  if(!err)&#123;</div><div class="line">    var schema = new mongoose.Schema(&#123; num:Number, name: String, size: String &#125;)</div><div class="line">    var MyModel = mongoose.model(&apos;MyModel&apos;, schema)</div><div class="line">    var doc1 = new MyModel(&#123;size: &apos;small&apos;&#125;)</div><div class="line">    doc1.save((err, doc)=&gt;&#123;</div><div class="line">      console.log(doc)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="文档新增"><a href="#文档新增" class="headerlink" title="文档新增"></a>文档新增</h3><p>文档新增有三种方法，一种是save()方法，另一种是使用模型model的create()方法，最后一种是模型的model的insertMany()方法</p>
<h4 id="save-2"><a href="#save-2" class="headerlink" title="save()"></a>save()</h4><p>新增{age: 10, name: ‘save’}文档并保存<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://user:123456@localhost/db1"</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, (err)=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(!err)&#123;</div><div class="line">    <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;<span class="attr">age</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span>&#125;)</div><div class="line">    <span class="keyword">var</span> temp = mongoose.model(<span class="string">'temp'</span>, schema)</div><div class="line">    <span class="keyword">new</span> temp(&#123;<span class="attr">age</span>: <span class="number">10</span>, <span class="attr">name</span>: save&#125;).save(<span class="function">(<span class="params">err, doc</span>)=&gt;</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(doc)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="creat"><a href="#creat" class="headerlink" title="creat()"></a>creat()</h4><p>使用save()方法，需要将文档实例化，再使用save方法来保存文档。而create()方法，则直接在模型Model上操作，并且可以同时新增多个文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.create(doc(s), callback)</div></pre></td></tr></table></figure></p>
<p>新增{name: ‘dk’}，{name: ‘kmac007’}这两个文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;)</div><div class="line">mongoose.connect(&quot;mongodb://user:123456@localhost/db1&quot;, &#123;useMongoClient: true&#125;, (err)=&gt;&#123;</div><div class="line">  if(!err)&#123;</div><div class="line">    var schema = new mongoose.Schema(&#123;age:Number, name:String&#125;)</div><div class="line">    var temp = mongoose.model(&apos;temp&apos;, schema)</div><div class="line">    temp.create(&#123;name: &apos;dk&apos;&#125;,&#123;name: &apos;kmac007&apos;&#125;,(err, doc1, doc2)=&gt;&#123;</div><div class="line">	  console.log(doc1)</div><div class="line">	  console.log(doc2)</div><div class="line">	&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="insertMany-1"><a href="#insertMany-1" class="headerlink" title="insertMany()"></a>insertMany()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.insertMany(doc(s), [options], [callback])</div></pre></td></tr></table></figure>
<p>新增{name: ‘dk’}，{name: ‘kmac007’}这两个文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://user:123456@localhost/db1"</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, (err)=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(!err)&#123;</div><div class="line">    <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;<span class="attr">age</span>:<span class="built_in">Number</span>, <span class="attr">name</span>:<span class="built_in">String</span>&#125;)</div><div class="line">    <span class="keyword">var</span> temp = mongoose.model(<span class="string">'temp'</span>, schema)</div><div class="line">    temp.insertMany([&#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'kmac007'</span>&#125;],(err, doc1, doc2)=&gt;&#123;</div><div class="line">	  <span class="built_in">console</span>.log(doc1)</div><div class="line">	  <span class="built_in">console</span>.log(doc2)</div><div class="line">	&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h3><p>使用mongoose查询有以下三种方法</p>
<ol>
<li>find()</li>
<li>findById()</li>
<li>findOne()</li>
</ol>
<h4 id="find-1"><a href="#find-1" class="headerlink" title="find()"></a>find()</h4><p>第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数，形如function(err, docs){}<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.find(conditions, [projection], [options], [callback])</div></pre></td></tr></table></figure></p>
<p>数据库demo下有如下数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//数据库demo</div><div class="line">&gt; db.users.find()</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9882f91085939b189a63"</span>), <span class="attr">"name"</span> : <span class="string">"dk"</span>, <span class="attr">"age</span></div><div class="line"><span class="attr">"</span> : <span class="number">18</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae988cf91085939b189a64"</span>), <span class="attr">"name"</span> : <span class="string">"kmac008"</span>,</div><div class="line"> <span class="attr">"age"</span> : <span class="number">28</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9892f91085939b189a65"</span>), <span class="attr">"name"</span> : <span class="string">"robb"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">20</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae989bf91085939b189a66"</span>), <span class="attr">"name"</span> : <span class="string">"robin"</span>, <span class="attr">"</span></div><div class="line"><span class="attr">age"</span> : <span class="number">38</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae98a5f91085939b189a67"</span>), <span class="attr">"name"</span> : <span class="string">"dark"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">45</span> &#125;</div></pre></td></tr></table></figure></p>
<p>现在用find()方法找出所有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">mongoose.connect(&apos;mongodb://localhost/demo&apos;, &#123;useMongoClient: true&#125;,(err)=&gt; &#123;</div><div class="line">  if (!err) &#123;</div><div class="line">    var schema = new mongoose.Schema(&#123; age: Number, name: String &#125;);</div><div class="line">    var users = mongoose.model(&apos;users&apos;, schema);</div><div class="line">    users.find(function(err, docs) &#123;</div><div class="line">      console.log(docs);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>注意，Mongoose4.11.0以上的版本中，连接数据库的逻辑变动，需要在connect参数options中加上{useMongoClient: true}option</strong></p>
<p>找出年龄大于20的数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">users.find(&#123;<span class="attr">age</span>: $gt:<span class="number">20</span>&#125;, (err, docs)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(docs)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>找出年龄大于20且名字里存在’dk’的数据:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">users.find(&#123;<span class="attr">name</span>: <span class="regexp">/dk/</span>, <span class="attr">age</span>: &#123;<span class="attr">$gt</span>:<span class="number">20</span>&#125;, (err, docs)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(docs)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>找出名字里带有’d’的数据，且只输出’name’字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">users.find(&#123;<span class="attr">name</span>: <span class="regexp">/d/</span>&#125;, name, (err, docs)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(docs)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="findById"><a href="#findById" class="headerlink" title="findById()"></a>findById()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.findById(id, [projection], [options], [callback])</div></pre></td></tr></table></figure>
<p> 显示第0个元素的所有字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> idArr = []</div><div class="line">users.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">  docs.forEach(<span class="function">(<span class="params">item, index, arr</span>)=&gt;</span>&#123;</div><div class="line">    idArr.push(item._id)</div><div class="line">  &#125;)</div><div class="line">  users.findById(idArr[<span class="number">0</span>],(err, doc)=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(doc)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="findOne-1"><a href="#findOne-1" class="headerlink" title="findOne()"></a>findOne()</h4><p>返回查找到所有实例的第一个</p>
<h4 id="常用的查询条件"><a href="#常用的查询条件" class="headerlink" title="常用的查询条件"></a>常用的查询条件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$or　　　　或关系</div><div class="line">$nor　　　 或关系取反</div><div class="line">$gt　　　　大于</div><div class="line">$gte　　　 大于等于</div><div class="line">$lt　　　　小于</div><div class="line">$lte　　　 小于等于</div><div class="line">$ne　　　　不等于</div><div class="line">$in　　　　在多个值范围内</div><div class="line">$nin　　　 不在多个值范围内</div><div class="line">$all　　　 匹配数组中多个值</div><div class="line">$regex　　 正则，用于模糊查询</div><div class="line">$size　　　匹配数组大小</div><div class="line">$maxDistance　范围查询，距离（基于LBS）</div><div class="line">$mod　　　　取模运算</div><div class="line">$near　　　 邻域查询，查询附近的位置（基于LBS）</div><div class="line">$exists　　 字段是否存在</div><div class="line">$elemMatch　匹配内数组内的元素</div><div class="line">$within　　　范围查询（基于LBS）</div><div class="line">$box　　　　 范围查询，矩形范围（基于LBS）</div><div class="line">$center　　　范围醒询，圆形范围（基于LBS）</div><div class="line">$centerSphere　范围查询，球形范围（基于LBS）</div><div class="line">$slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素</div></pre></td></tr></table></figure>
<h4 id="where-1"><a href="#where-1" class="headerlink" title="$where"></a>$where</h4><p>如MongoDB中的使用方法相同，可以使用字符串和函数为条件</p>
<h3 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h3><p>文档更新可以使用以下几种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">update()</div><div class="line">updateMany()</div><div class="line">find() + save()</div><div class="line">updateOne()</div><div class="line">findOne() + save()</div><div class="line">findByIdAndUpdate()</div><div class="line">fingOneAndUpdate()</div></pre></td></tr></table></figure></p>
<h4 id="update-1"><a href="#update-1" class="headerlink" title="update()"></a>update()</h4><p>第一个参数conditions为查询条件，第二个参数doc为所需要的修改的数据，第三个参数options为控制选项，第四个参数是回调函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.update(conditions, doc, [options], [callback])</div></pre></td></tr></table></figure></p>
<p>options有如下选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">safe (boolean)： 默认为true。安全模式。</div><div class="line">upsert (boolean)： 默认为false。如果不存在则创建新记录。</div><div class="line">multi (boolean)： 默认为false。是否更新多个查询记录。</div><div class="line">runValidators： 如果值为true，执行Validation验证。</div><div class="line">setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。</div><div class="line">strict (boolean)： 以strict模式进行更新。</div><div class="line">overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。</div></pre></td></tr></table></figure></p>
<p>数据库demo下有如下数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//数据库demo</div><div class="line">&gt; db.users.find()</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9882f91085939b189a63"</span>), <span class="attr">"name"</span> : <span class="string">"dk"</span>, <span class="attr">"age</span></div><div class="line"><span class="attr">"</span> : <span class="number">18</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae988cf91085939b189a64"</span>), <span class="attr">"name"</span> : <span class="string">"kmac008"</span>,</div><div class="line"> <span class="attr">"age"</span> : <span class="number">28</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9892f91085939b189a65"</span>), <span class="attr">"name"</span> : <span class="string">"robb"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">20</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae989bf91085939b189a66"</span>), <span class="attr">"name"</span> : <span class="string">"robin"</span>, <span class="attr">"</span></div><div class="line"><span class="attr">age"</span> : <span class="number">38</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae98a5f91085939b189a67"</span>), <span class="attr">"name"</span> : <span class="string">"dark"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">45</span> &#125;</div></pre></td></tr></table></figure></p>
<p>现在用update()方法查询age大于20的数据，将其年龄更改为100<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/demo'</span>, &#123; <span class="attr">useMongoClient</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  err</span></span></div><div class="line"><span class="function"><span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!err) &#123;</div><div class="line">    <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">age</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span> &#125;);</div><div class="line">    <span class="keyword">var</span> users = mongoose.model(<span class="string">'users'</span>, schema);</div><div class="line">    users.update(&#123; <span class="attr">age</span>: &#123; <span class="attr">$gt</span>: <span class="number">20</span> &#125; &#125;, &#123; <span class="attr">age</span>: <span class="number">100</span> &#125;, (err, doc) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(doc);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样只会改变找到的第一个数据</p>
<p>要同时更新多个记录，需要设置options里的multi为true。</p>
<p>如果设置的查找条件，数据库里的数据并不满足，默认什么都不会发生。当设置options里的upsert参数为true，若没有符合查询条件的文档，mongo将会综合第一第二个参数，向集合中插入一个新的文档。</p>
<p><strong>注意：update()方法中的回调函数不能省略，否则数据不会被更新。如果回调函数没有什么有用的信息，可用exec()简化代码</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">users.update(&#123;<span class="attr">name</span>: <span class="regexp">/d/</span>&#125;, &#123;<span class="attr">upsert</span>: <span class="literal">true</span>&#125;).exec()</div></pre></td></tr></table></figure>
<h4 id="updateMany"><a href="#updateMany" class="headerlink" title="updateMany()"></a>updateMany()</h4><p>updateMany()与update()方法唯一的区别就是默认更新多个文档，即使设置{multi: false}也无法只更新第一个文档</p>
<h4 id="find-save"><a href="#find-save" class="headerlink" title="find() + save()"></a>find() + save()</h4><p>如果需要更新的操作比较复杂，可以使用find() + save()方法来处理，先找到与条件匹配的文档，再通过forEach遍历，然后通过save()方法更新数据</p>
<h4 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne()"></a>updateOne()</h4><p>默认更新一个文档，即使设置{multi: true}也无法更新多个</p>
<h4 id="findOne-save"><a href="#findOne-save" class="headerlink" title="findOne()+save()"></a>findOne()+save()</h4><h4 id="findOneAndUpdate"><a href="#findOneAndUpdate" class="headerlink" title="findOneAndUpdate()"></a>findOneAndUpdate()</h4><h4 id="findByIdAndUpdate"><a href="#findByIdAndUpdate" class="headerlink" title="findByIdAndUpdate"></a>findByIdAndUpdate</h4><h3 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h3><p>有三种方法用于文档删除</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">remove()</div><div class="line">findOneAndRemove()</div><div class="line">findByIdAndRemove()</div></pre></td></tr></table></figure>
<h4 id="remove-1"><a href="#remove-1" class="headerlink" title="remove()"></a>remove()</h4><p>remove()有两种形式，一种是文档的remove()方法，一种是Model的remove()方法</p>
<ol>
<li>Model的remove()方法<br>该方法的第一个参数conditions为查询条件，第二个参数回调函数的形式如下function(err){}</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.remove(conditions, [callback])</div></pre></td></tr></table></figure>
<p><strong>注意：remove()方法中的回调函数不能省略，否则数据不会被删除。当然，可以使用exec()方法来简写代码</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.remove(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;).exec()</div></pre></td></tr></table></figure>
<ol>
<li>文档的remove()方法<br>该方法的参数回调函数的形式如下function(err, doc){}</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.remove([callback])</div><div class="line"><span class="comment">//这里的callback可以省略</span></div></pre></td></tr></table></figure>
<h4 id="findOneAndRemove"><a href="#findOneAndRemove" class="headerlink" title="findOneAndRemove()"></a>findOneAndRemove()</h4><h4 id="findByIdAndRemove"><a href="#findByIdAndRemove" class="headerlink" title="findByIdAndRemove()"></a>findByIdAndRemove()</h4><h1 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h1><ol>
<li><a href="http://mongoosejs.com/index.html" target="_blank" rel="external">mongoose docs</a></li>
<li><a href="http://www.cnblogs.com/xiaohuochai/p/7215067.html" target="_blank" rel="external">Mongoose入门基础</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了能够使用Node.js实现前后端分离，MongoDB是必学的，Mongodb是基于文档的非关系型数据库，文档是按BSON（JSON的轻量化二进制格式）存储的，增删改查等管理数据库的命令和JavaScript语法很像。以下是我的学习笔记。&lt;/p&gt;
&lt;h1 id=&quot;NoSQL简介&quot;&gt;&lt;a href=&quot;#NoSQL简介&quot; class=&quot;headerlink&quot; title=&quot;NoSQL简介&quot;&gt;&lt;/a&gt;NoSQL简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高可扩展性&lt;/li&gt;
&lt;li&gt;分布式计算&lt;/li&gt;
&lt;li&gt;低成本&lt;/li&gt;
&lt;li&gt;架构的灵活性，半结构化数据&lt;/li&gt;
&lt;li&gt;没有复杂的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有标准化&lt;/li&gt;
&lt;li&gt;有限的查询功能（到目前为止）&lt;/li&gt;
&lt;li&gt;最终一致是不直观的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MongoDB-简介&quot;&gt;&lt;a href=&quot;#MongoDB-简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 简介&quot;&gt;&lt;/a&gt;MongoDB 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MongoDB是NoSQL数据库的一种&lt;br&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。&lt;br&gt;在高负载的情况下，添加更多的节点，可以保证服务器性能。&lt;br&gt;MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;br&gt;MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.kmac007.com/categories/MongoDB/"/>
    
    
      <category term="数据库" scheme="https://www.kmac007.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="https://www.kmac007.com/tags/MongoDB/"/>
    
      <category term="Mongoose" scheme="https://www.kmac007.com/tags/Mongoose/"/>
    
  </entry>
  
  <entry>
    <title>Express学习笔记</title>
    <link href="https://www.kmac007.com/2017/Express%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://www.kmac007.com/2017/Express学习笔记.html</id>
    <published>2017-08-20T05:02:31.000Z</published>
    <updated>2017-09-06T13:34:51.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h1><p>Express是一个简洁、灵活的Node.js Web应用开发框架，它提供一系列强大的特性，帮助开发者创建Web和移动设备应用。<br>它是一个基于Node.js平台，快速、开放、极简的web开发框架。优点是易上手、高性能、扩展性强。</p>
<ol>
<li>易上手：Express对web开发相关的模块进行了适度的封装，屏蔽了大量复杂繁琐的技术细节，让开发者专注于业务逻辑的开发，极大的降低了入门和学习成本。</li>
<li>高性能:：Express仅在web应用相关的nodejs模块上进行了适度的封装和扩展，较大程度避免了过度封装导致的性能损耗。</li>
<li>扩展性强：基于中间件的开发模式，使express应用的扩展、模块拆分非常简单，既灵活，扩展性又强。</li>
</ol>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>先安装nodejs，为应用创建一个目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir app</div><div class="line"><span class="built_in">cd</span> app</div></pre></td></tr></table></figure></p>
<p>通过<code>npm init -y</code>命令创建默认的package.json文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure></p>
<p>将express写入到生产环境依赖中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express --save</div></pre></td></tr></table></figure></p>
<h1 id="入门实例"><a href="#入门实例" class="headerlink" title="入门实例"></a>入门实例</h1><p>在根目录下，新建一个启动文件index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'Hello express!'</span>)</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<p>运行<code>node index.js</code>访问4000端口即可看到网页上”Hello express!”</p>
<p>上面实例中app.get()方法，用于指定不同访问路径所对应的回调函数，这叫做”路由”，上面代码中只有一个根目录的路由。实际项目中，可能有多个路由。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'Hello express!'</span>)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/kmac007'</span>,(req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'I am kmac007'</span>)</div><div class="line">&#125;)</div><div class="line">app.get(<span class="string">'/dk'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'I am DK'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<p>当项目庞大起来，路由应该单独放到一个单独的文件中，以便维护，新建一个routes子目录：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// routes/index.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app</span>)=&gt;</span>&#123;</div><div class="line">  app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.send(<span class="string">'Hello express!'</span>)</div><div class="line">  &#125;)</div><div class="line">  app.get(<span class="string">'/kmac007'</span>,(req, res)=&gt;&#123;</div><div class="line">    res.send(<span class="string">'I am kmac007'</span>)</div><div class="line">  &#125;)</div><div class="line">  app.get(<span class="string">'/dk'</span>, (req, res)=&gt;&#123;</div><div class="line">    res.send(<span class="string">'I am DK'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时，入口index.js变为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>)(app)</div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<h1 id="express-generator"><a href="#express-generator" class="headerlink" title="express-generator"></a>express-generator</h1><p>可以通过<code>express-generator</code>快速生成一个应用骨架。</p>
<p>全局安装<code>express-generator</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express-generator -g</div></pre></td></tr></table></figure>
<p>生成应用骨架<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">express app</div><div class="line"><span class="built_in">cd</span> app</div></pre></td></tr></table></figure></p>
<p>安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure></p>
<p>项目的目录结构为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├─bin</div><div class="line">├─public</div><div class="line">│  ├─images</div><div class="line">│  ├─javascripts</div><div class="line">│  └─stylesheets</div><div class="line">├─routes</div><div class="line">└─views</div></pre></td></tr></table></figure></p>
<h1 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h1><p>Express是对Node.js HTTP模块的一种封装，Node.js中创建服务器的代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;)</div><div class="line">  res.end(<span class="string">"Hello world"</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>, <span class="string">"localhost"</span>)</div></pre></td></tr></table></figure></p>
<p>上述HTTP模块中，通过createServer()方法创建一个服务器，该方法接收一个回调函数，回调函数的两个参数分别为HTTP的请求与响应。</p>
<p>Express对HTTP模块进行了封装，上述代码可以改写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app express()</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'Hello world'</span>)</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<p>两者是非常相似的，其中Express通过Express构造方法，生成一个Express实例，两者的回调函数都是相同的。Express框架相当于在HTTP模块之上，加入了一个中间层。</p>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Express是一个自身功能极简，完全是由路由和中间件构成的一个web开发框架：从本质上讲，一个Express应用就是在调用各种中间件。</p>
<p>简单说，中间件(middleware)就是处理HTTP请求的函数。它最大的特点是，一个中间件请求完，再传递给下一个中间件。app实例在运行过程中，会调用一系列的中间件。</p>
<p>每个中间件可以从app实例，接收三个参数，依次为request对象（代码HTTP请求）、response对象（代表HTTP响应）、next回调函数（代表下一个中间件）。每个中间件都可以对HTTP请求进行加工，并决定是否调用next()方法，将request对象再传递给下一个中间件。</p>
<p>中间件的功能包括：</p>
<ol>
<li>执行任意代码</li>
<li>修改请求和响应对象</li>
<li>终结请求-响应循环</li>
<li>调用堆栈中的下一个中间件</li>
</ol>
<p>如果当前中间件没有终结请求-响应循环，则必须调用next()方法将控制权交给下一个中间件，否则请求就会挂起。</p>
<p>一个不进行任何操作、只传递request对象的中间件，就是下面这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">  next()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码的next是下一个中间件。如果它带有参数，则代表抛出一个错误，参数为错误文本:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">  next(<span class="string">'error'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抛出错误后，后续中间件将不再执行，直至发现一个错误处理函数位置。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>Express 应用可使用如下几种中间件:</p>
<ol>
<li><code>应用级中间件：</code> 应用级中间件绑定到app对象，使用app.use()和app.METHOD()，其中，METHOD是需要处理的HTTP请求的方法，例如get、post、put等</li>
<li><code>路由级中间件:</code>路由级中间件绑定的对象为express.Router()</li>
<li><code>错误处理中间件：</code>错误处理中间件与其他中间定义类似，需要传递4个参数, (err, req, res, next)，例如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>)=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err.stack)</div><div class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Wrong'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li><code>内置中间件：</code>express.static是Express 唯一的内置中间件。它基于serve-static，负责在Express应用中托管静态资源。</li>
<li><code>第三方中间件：</code>通过使用第三方中间件从而为Express应用增加更多功能。安装所需功能的node模块，并在应用中加载，可以在应用级加载，也可以在路由级加载。下面的例子安装并加载了一个解析cookie的中间：<code>cookie-parser</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install cookie-parser</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</div><div class="line"></div><div class="line"><span class="comment">//加载用于解析cookie的中间件</span></div><div class="line">app.use(cookieParser())</div></pre></td></tr></table></figure>
<h2 id="use方法"><a href="#use方法" class="headerlink" title="use方法"></a>use方法</h2><p>use()是express注册中间件的方法，它返回一个函数。下面是一个连续调用两个中间件的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="function">(<span class="params">request, response, next</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'In comes a '</span> + request.method + <span class="string">' to '</span> + request.url);</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ddd'</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">  response.end(<span class="string">'Hello world!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>);</div></pre></td></tr></table></figure></p>
<p>上面代码使用app.use方法，注册了两个中间件，收到请求后，先调用第一个中间件，在控制台输出一行信息，然后通过next()方法，交由第二个中间件处理。由于第二个中间件没有调用next方法，所以request对象就不再向后传递了。</p>
<p>use方法内部可以对路径进行判断，据此实现简单的路由，根据不同 的请求网址，返回不同的网页内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="function">(<span class="params">request, response, next</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (request.url == <span class="string">'/'</span>) &#123;</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">    response.end(<span class="string">'Welcome to the homepage!\n'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    next();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function">(<span class="params">request, response, next</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (request.url == <span class="string">'/kmac'</span>) &#123;</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">    response.end(<span class="string">'Welcome to kmac!\n'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    next();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</div><div class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">  response.end(<span class="string">'404 error!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>);</div></pre></td></tr></table></figure>
<p>上面代码通过request.url属性，判断请求的URL ，根据不同的URL返回不同的内容。app.use()方法注册了三个中间件，只要请求路径匹配，就不会进入到下一个中间件。</p>
<p>除了在回调函数内部判断请求的网址，use方法也允许将请求网址写在第一个参数。这代表，只有请求路径匹配这个参数，后面的中间件才会生效。这样写更加清晰和方便。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/path'</span>, someMiddleware)</div></pre></td></tr></table></figure></p>
<p>上述例子可以改写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="string">'/home'</span>, (request, response, next) =&gt; &#123;</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">  response.end(<span class="string">'Welcome to the homepage!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="string">'/kmac'</span>, (request, response, next) =&gt; &#123;</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">  response.end(<span class="string">'Welcome to kmac!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</div><div class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">  response.end(<span class="string">'404 error!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>);</div></pre></td></tr></table></figure></p>
<h2 id="静态资源托管"><a href="#静态资源托管" class="headerlink" title="静态资源托管"></a>静态资源托管</h2><p><code>express.static</code>是Express唯一内置的中间件，负责在Express应用中托管静态资源，例如图片、CSS、JavaScript文件等。</p>
<h3 id="express-static-root-options"><a href="#express-static-root-options" class="headerlink" title="express.static(root, [options])"></a>express.static(root, [options])</h3><p>参数root指提供静态资源的目录，可选的options参数拥有如下属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">属性        　　类型    　 缺省值 　　　　描述</div><div class="line">dotfiles    　　String   “ignore” 　　是否对外输出文件名以点开头的文件。可选值为allow、deny和ignore</div><div class="line">etag        　　Boolean   true 　　　　是否启用 etag 生成</div><div class="line">extensions  　　Array    [] 　　　　　　设置文件扩展名备份选项</div><div class="line">index        　 Mixed    “index.html” 发送目录索引文件，设置为 false 禁用目录索引。</div><div class="line">lastModified    Boolean  true 　设置Last-Modified头为文件在操作系统上的最后修改日期。可选值为true或false</div><div class="line">maxAge          Number   0 　　　　　　以毫秒或者其字符串格式设置 Cache-Control 头的 max-age 属性。</div><div class="line">redirect        Boolean  true 　　　　当路径为目录时，重定向至 “/”。</div><div class="line">setHeaders      Function      　　　　设置 HTTP 头以提供文件的函数。</div></pre></td></tr></table></figure>
<p>一般的，如果不需要特殊的设置，将静态资源文件所在目录作为餐胡传递给express.static中间件就可以提供静态资源的访问了。假如，假设在public目录放置了css, js, images三个文件夹:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>))</div></pre></td></tr></table></figure></p>
<p>现在public目录下面的文件就可以直接访问了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://localhost:3000/images/kmac.jpg</div><div class="line">http://localhost:3000/css/style.css</div><div class="line">http://localhost:3000/js/app.js</div></pre></td></tr></table></figure></p>
<p>如果静态资源存放在多个目录下面，可以多次调用express.static中间件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>))</div><div class="line">app.use(express.static(<span class="string">'files'</span>))</div></pre></td></tr></table></figure></p>
<p>访问静态资源时，express.static中间件会根据目录添加的顺序查找所需的文件。<br>如果希望所有通过express.static访问的文件都存在一个虚拟（virtual）的目录（即目录不存在）下，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>))</div></pre></td></tr></table></figure></p>
<p>现在可以通过访问static获取public目录下的资源了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://localhost:3000/static/images/kmac.jpg</div><div class="line">http://localhost:3000/static/css/style.css</div><div class="line">http://localhost:3000/static/js/app.js</div></pre></td></tr></table></figure></p>
<h2 id="常用中间件"><a href="#常用中间件" class="headerlink" title="常用中间件"></a>常用中间件</h2><h3 id="cookie-parser"><a href="#cookie-parser" class="headerlink" title="cookie-parser()"></a>cookie-parser()</h3><p>用于解析cookie的中间件，添加中间件后，req具备cookies属性。通过req.cookies.xxx可访问cookie的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install cookie-parser</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var cookieParser = require(&apos;cookie-parser&apos;)</div><div class="line">app.use(cookieParser(secret, options))</div></pre></td></tr></table></figure>
<p>secret是可选参数，用于对cookie进行签名，通过它可以判断出用户是否修改了cookie，出于安全考虑，这个参数可以是任意字符串。</p>
<p>options可选参数是一个JSON对象，可选项包括path、expires、maxAge、domain、secure、httpOnly</p>
<ul>
<li><code>path</code>: 表示cookie影响到的路径，匹配该路径才发送这个cookie</li>
<li><code>expires</code>和<code>maxAge</code>：告诉浏览器这个cookie什么时候到期，expires是UTC格式事件，maxAge是cookie多久后勾起的相对时间。当不设置这两个选项时，会产生session cookie，session cookie是transient 的，当用户关闭浏览器时，就被清除。一般用来保存session的session_id。</li>
<li><code>secure</code>: 当secure值为true时，若使用HTTP协议cookie是无效的，使用HTTPS协议才有效。</li>
<li><code>httpOnly</code>: 浏览器不允许脚本操作document.cookie去更改cookie。一般情况下都应该设置这个为true，这样可以避免被XSS攻击拿到cookie。</li>
</ul>
<h3 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a>express-session</h3><p>session中的数据是保留在服务器端的。</p>
<p>session的运作是通过一个<code>session_id</code>来进行。<code>session_id</code>通常是存放在客户端的cookie中，比如在express中，默认是<code>connect.sid</code>字段中，当请求到来时，服务器检查cookie中保存的<code>session_id</code>并通过这个<code>session_id</code>与服务器端的session data关联起来，进行数据的保存和修改。</p>
<p>也就是说，当你浏览一个网页时，服务器端随机产生一个1024比特长的字符串，然后存在你cookie的<code>connect.sid</code>字段中，下次访问时，cookie会带有这个字段，服务器端就能根据这个字段来验证你的身份。由于字符串是随机产生的，并且位数足够长，难以伪造。</p>
<p>session可以存放在: 1. 内存  2. cookie本身  3. redis或memcached等缓存中 4. 数据库中,缓存的方案比较常见。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express-session</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line">app.use(session(options))</div></pre></td></tr></table></figure>
<p><code>options</code>的常用选项如下:</p>
<ul>
<li><p><code>name：</code>默认’connect.sid’，可自定义</p>
</li>
<li><p><code>store：</code>session 储存器实例</p>
</li>
<li><p><code>secret：</code>用于对cookie进行签名 ，通过它可以判断出客户是否修改了cookie，这是处于安全考虑，这个参数是任意字符串</p>
</li>
<li><p><code>cookie：</code>对session cookie的设置 。默认值 { path: ‘/‘, httpOnly: true, secure: false, maxAge: null }</p>
</li>
<li><p><code>genid：</code>是个函数，调用它来生成一个新的会话ID。 （默认：使用UID2库）</p>
</li>
<li><p><code>rolling：</code>强制对每个响应的Cookie，重置到期日期。 （默认：false）</p>
</li>
<li><p><code>resave：</code>每一次都重新保存，即使没修改过（默认：true）</p>
</li>
<li><p><code>proxy：</code>ture／false，是否支持trust proxy,，需要设置 app.enable(‘trust proxy’);一般来说，无需设置</p>
</li>
</ul>
<p>常用方法如下：</p>
<ul>
<li><p>Session.destroy() :删除session，当检测到客户端关闭时调用</p>
</li>
<li><p>Session.reload() :当session有修改时，刷新session</p>
</li>
<li><p>Session.regenerate() ：将已有session初始化</p>
</li>
<li><p>Session.save() ：保存session</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> cookieParse = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</div><div class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</div><div class="line"></div><div class="line">app.use(<span class="string">'cookieParser'</span>)(<span class="string">'sessiontest'</span>)</div><div class="line">app.use(session(&#123;</div><div class="line">  secret: <span class="string">'sessiontest'</span>, <span class="comment">//与cookieParser中保持一致</span></div><div class="line">  resave: <span class="literal">true</span>,</div><div class="line">  saveUninitialized: <span class="literal">true</span></div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<h3 id="serve-favicon"><a href="#serve-favicon" class="headerlink" title="serve-favicon"></a>serve-favicon</h3><p>设置网站的favicon图标<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install serve-favicon</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;)</div><div class="line">var favicon = require(&apos;serve-favicon&apos;)</div><div class="line">var path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">var app = express()</div><div class="line">app.use(favicon(path.join(__dirname, &apos;public&apos;, favicon.ico)))</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h3><p>body-parser用于解析客户端请求的body中的内容，内部使用JSON编码处理，url编码处理以及对于文件的上传处理。</p>
<h3 id="mogran"><a href="#mogran" class="headerlink" title="mogran"></a>mogran</h3><p>mogran是一个node.js关于http请求的express默认的日志中间件</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="路由方法"><a href="#路由方法" class="headerlink" title="路由方法"></a>路由方法</h2><p>针对不同的请求，Express提供了use方法的一些别名，这些别名是和HTTP请求对应的路由方法：get、post、head、delete等</p>
<p>app.all()是一个特殊的路由方法，没有任何HTTP方法与其对应，它的作用是对于一个路径上的所有请求加载中间件</p>
<p>有些路由方法名不是合规的JavaScript变量名，此时使用括号记法，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app[&apos;m-search&apos;](&apos;/&apos;, callback)</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"></div><div class="line">app.all(<span class="string">'*'</span>, (req, res, next)=&gt;&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;)</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">"/"</span>, (req, res)=&gt;&#123;</div><div class="line">  res.end(<span class="string">"Welcome to homepage"</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">"/kmac"</span>, (req, res)=&gt;&#123;</div><div class="line">  res.end(<span class="string">"Welcome to kmac"</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'*'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.end(<span class="string">"404"</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure>
<p>上面代码的all方法表示，所有请求都必须通过该中间件，参数中的”*”表示对所有路径有效。get方法则是只有get请求通过才会通过该中间件，它的第一个参数是请求的路径。由于get方法的回调函数没有调用next方法，所以只要有一个中间件被调用了，后面的中间件就不会再被调用。</p>
<h2 id="路由路径"><a href="#路由路径" class="headerlink" title="路由路径"></a>路由路径</h2><p>路由的方法的第一个参数，都是请求的路径，称为路由路径，它可以是字符串、字符串模式或者正则表达式。</p>
<ol>
<li>字符串匹配</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//匹配 /about 路径的请求</span></div><div class="line">app.get(<span class="string">'/about'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'about'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>字符串模式匹配</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//匹配acd和abcd</div><div class="line">app.get(&apos;/ab?cd&apos;, (req, res)=&gt;&#123;</div><div class="line">  res.send(&apos;ab?cd&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>正则表达式匹配</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//匹配任何路径中含有a的路径</span></div><div class="line">app.get(<span class="regexp">/a/</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'a'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="路由句柄"><a href="#路由句柄" class="headerlink" title="路由句柄"></a>路由句柄</h2><p>可以为请求处理提供多个回调函数，行为类似中间件。唯一的区别是这些回调函数可能用next(‘route’)方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。</p>
<p>路由句柄有多种形式，可以是一个函数、一个函数数组，或者是两者混合</p>
<ol>
<li>使用一个回调函数处理路由</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/demo/a'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'Hello from A!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>使用多个回调函数处理路由</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/example/b'</span>, (req, res, next)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'respnse will be sent by the next function ...'</span>)</div><div class="line">  next()</div><div class="line">&#125;, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'Hello from B!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>使用回调函数数组处理路由</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cb0 = <span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'CBO'</span>)</div><div class="line">  next()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cb1 = <span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'CB1'</span>)</div><div class="line">  next()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cb2 = <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">  res.send(<span class="string">'Hello from C!'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.get(<span class="string">'/example/c'</span>, [cb0, cb1, cb2])</div></pre></td></tr></table></figure>
<ol>
<li>以上三种可以混合在一起处理路由</li>
</ol>
<h2 id="链式路由句柄"><a href="#链式路由句柄" class="headerlink" title="链式路由句柄"></a>链式路由句柄</h2><p>可以使用app.route()创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化路由，而且减少了代码冗余和拼写错误。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app.route(<span class="string">'/book'</span>)</div><div class="line">  .get(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</div><div class="line">    res.send(<span class="string">'Get a random book'</span>);</div><div class="line">  &#125;)</div><div class="line">  .post(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</div><div class="line">    res.send(<span class="string">'Add a book'</span>);</div><div class="line">  &#125;)</div><div class="line">  .put(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</div><div class="line">    res.send(<span class="string">'Update the book'</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Router-实例"><a href="#Router-实例" class="headerlink" title="Router 实例"></a>Router 实例</h2><p>使用express.Router类创建模块化、可挂载的路由句柄。Router实例是一个完整的中间件和路由系统，因此常被称为”mini-app”</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>express.Router是一个构造函数，调用后返回一个实例。使用该实例的相应的请求方法，为不同的访问路径，指定回调函数；最后挂载到某个路径，如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"><span class="keyword">var</span> router = express.Router()</div><div class="line"></div><div class="line">router.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'首页'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.get(<span class="string">'/details'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">'详情页'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(<span class="string">'/'</span>, router)</div><div class="line"></div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<p>上面代码先定义了两个访问路径，然后将它们挂载到根目录中。如果<code>app.use(&#39;/&#39;, router)</code>更改为<code>app.use(&#39;/app&#39;, router)</code>，则相当于为<code>/app</code>与<code>/app/details</code>指定回调函数。</p>
<h3 id="router-route方法"><a href="#router-route方法" class="headerlink" title="router.route方法"></a>router.route方法</h3><p>router实例对象的route方法，可以接受访问路径作为参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line">router</div><div class="line">  .route(<span class="string">'/api'</span>)</div><div class="line">  .post(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.send(<span class="string">'post'</span>);</div><div class="line">  &#125;)</div><div class="line">  .get(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.send(<span class="string">'get'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">app.use(<span class="string">'/'</span>, router);</div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<h3 id="router中间件"><a href="#router中间件" class="headerlink" title="router中间件"></a>router中间件</h3><p>use方法为router对象指定中间件，在数据正式发送给用户之前，对数据进行进一步处理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">router.use(<span class="function">(<span class="params">req, res, next</span>)=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(req.method, req.url)</div><div class="line">  next()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上述代码中，回调函数的next方法，表示将数据传递个下一个中间件。<br><strong>注意：中间件的放置顺序很重要，等同于执行顺序。而且，中间件必须放在HTTP方法之前，否则不会执行。</strong></p>
<h3 id="对路径参数处理"><a href="#对路径参数处理" class="headerlink" title="对路径参数处理"></a>对路径参数处理</h3><p>router对象的param方法用于路径参数的处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">router.param(<span class="string">'name'</span>, (req, res, next, name)=&gt;&#123;</div><div class="line">  <span class="comment">//对参数name进行验证或者其他处理</span></div><div class="line">  <span class="built_in">console</span>.log(name)</div><div class="line">  req.name = name</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.get(<span class="string">'/hello/:name'</span>, (req, res)=&gt;&#123;</div><div class="line">  res.send(<span class="string">`Hello <span class="subst">$&#123;req.name&#125;</span> !`</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上面代码中，get方法为访问路径指定了name参数，param方法则是对name参数进行处理<br><strong>[注意]：param方法必须放在HTTP动词方法之前</strong></p>
<h1 id="响应方法"><a href="#响应方法" class="headerlink" title="响应方法"></a>响应方法</h1><p>response对象包含以下9个方法，response对象的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，那么来自客户端的请求会一直挂起。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">方法    　　　　　　　描述</div><div class="line">res.download()    提示下载文件。</div><div class="line">res.end()     　　 终结响应处理流程。</div><div class="line">res.json()    　　 发送一个 <span class="built_in">JSON</span> 格式的响应。</div><div class="line">res.jsonp()    　　发送一个支持 JSONP 的 <span class="built_in">JSON</span> 格式的响应。</div><div class="line">res.redirect()    重定向请求。</div><div class="line">res.render()    　渲染视图模板。</div><div class="line">res.send()    　　 发送各种类型的响应。</div><div class="line">res.sendFile()    以八位字节流的形式发送文件。</div><div class="line">res.sendStatus()  设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。</div></pre></td></tr></table></figure></p>
<h2 id="res-download"><a href="#res-download" class="headerlink" title="res.download"></a>res.download</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下载路径为'resume.pdf'</span></div><div class="line">res.download(<span class="string">'/resume.pdf'</span>)</div><div class="line"></div><div class="line"><span class="comment">//下载路径为'resume.pdf',并将文件命名为'abc.pdf'</span></div><div class="line">res.download(<span class="string">'/resume.pdf'</span>, <span class="string">'abc.pdf'</span>)</div><div class="line"></div><div class="line"><span class="comment">//下载路径为'resume.pdf',并将文件命名为'abc.pdf',并且执行回调函数</span></div><div class="line">res.download(<span class="string">'/resume.pdf'</span>, <span class="string">'abc.pdf'</span>, (err)=&gt;&#123;&#125;)</div></pre></td></tr></table></figure>
<h2 id="res-end"><a href="#res-end" class="headerlink" title="res.end"></a>res.end</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//终结响应处理流程</span></div><div class="line">res.end()</div><div class="line"><span class="comment">//设置响应码为404，并终结响应数据处理流程</span></div><div class="line">res.status(<span class="number">404</span>).end()</div></pre></td></tr></table></figure>
<h2 id="res-json"><a href="#res-json" class="headerlink" title="res.json"></a>res.json</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">res.json(<span class="literal">null</span>)</div><div class="line">res.json(&#123; <span class="attr">name</span>: <span class="string">'dk'</span> &#125;)</div><div class="line">res.status(<span class="number">500</span>).json(&#123; <span class="attr">error</span>: <span class="string">'message'</span> &#125;)</div></pre></td></tr></table></figure>
<h2 id="res-jsonp"><a href="#res-jsonp" class="headerlink" title="res.jsonp"></a>res.jsonp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//?callback=foo</span></div><div class="line">res.jsonp(<span class="literal">null</span>)</div><div class="line"><span class="comment">//=&gt; null</span></div><div class="line">res.jsonp(&#123; <span class="attr">name</span>: <span class="string">'dk'</span> &#125;)</div><div class="line"><span class="comment">//=&gt; foo(&#123;name: 'dk'&#125;)</span></div><div class="line"></div><div class="line"><span class="comment">//设置JSONP的回调函数名称</span></div><div class="line">app.set(<span class="string">'json callback name'</span>, <span class="string">'cb'</span>)</div><div class="line"></div><div class="line"><span class="comment">//?cb=foo</span></div><div class="line">res.status(<span class="number">500</span>).jsonp(&#123; <span class="attr">error</span>: <span class="string">'message'</span> &#125;)</div><div class="line"><span class="comment">//=&gt; foo(&#123;"error": "message"&#125;)</span></div></pre></td></tr></table></figure>
<h2 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect"></a>res.redirect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//重定向</div><div class="line">res.redirect(&apos;/foo/bar&apos;);</div></pre></td></tr></table></figure>
<h2 id="res-render"><a href="#res-render" class="headerlink" title="res.render"></a>res.render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">res.render(<span class="string">'index'</span>)</div><div class="line">res.render(<span class="string">'index'</span>, (err, html)=&gt;&#123;</div><div class="line">  res.send(html)</div><div class="line">&#125;)</div><div class="line">res.render(<span class="string">'user'</span>, &#123; <span class="attr">name</span>: <span class="string">'DK'</span> &#125;, (err, html)=&gt;&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="res-send"><a href="#res-send" class="headerlink" title="res.send"></a>res.send</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">res.send(<span class="keyword">new</span> Buffer(<span class="string">'whoop'</span>));</div><div class="line">res.send(&#123; <span class="attr">some</span>: <span class="string">'json'</span> &#125;);</div><div class="line">res.send(<span class="string">'&lt;p&gt;some html&lt;/p&gt;'</span>);</div><div class="line">res.status(<span class="number">404</span>).send(<span class="string">'Sorry, we cannot find that!'</span>);</div><div class="line">res.status(<span class="number">500</span>).send(&#123; <span class="attr">error</span>: <span class="string">'something blew up'</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="res-send-1"><a href="#res-send-1" class="headerlink" title="res.send"></a>res.send</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res.sendFile(<span class="string">'/resume.pdf'</span>)</div></pre></td></tr></table></figure>
<h2 id="res-sendStatus"><a href="#res-sendStatus" class="headerlink" title="res.sendStatus"></a>res.sendStatus</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">res.sendStatus(<span class="number">200</span>); <span class="comment">// equivalent to res.status(200).send('OK')</span></div><div class="line">res.sendStatus(<span class="number">403</span>); <span class="comment">// equivalent to res.status(403).send('Forbidden')</span></div><div class="line">res.sendStatus(<span class="number">404</span>); <span class="comment">// equivalent to res.status(404).send('Not Found')</span></div><div class="line">res.sendStatus(<span class="number">500</span>); <span class="comment">// equivalent to res.status(500).send('Internal Server Error')</span></div></pre></td></tr></table></figure>
<h1 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h1><h2 id="req-param"><a href="#req-param" class="headerlink" title="req.param"></a>req.param</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ?name=tobi</span></div><div class="line">req.param(<span class="string">'name'</span>)</div><div class="line"><span class="comment">// =&gt; "tobi"</span></div><div class="line"></div><div class="line"><span class="comment">// POST name=tobi</span></div><div class="line">req.param(<span class="string">'name'</span>)</div><div class="line"><span class="comment">// =&gt; "tobi"</span></div><div class="line"></div><div class="line"><span class="comment">// /user/tobi for /user/:name</span></div><div class="line">req.param(<span class="string">'name'</span>)</div><div class="line"><span class="comment">// =&gt; "tobi"</span></div></pre></td></tr></table></figure>
<h2 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// GET /search?q=tobi+ferret</span></div><div class="line">req.query.q</div><div class="line"><span class="comment">// =&gt; "tobi ferret"</span></div><div class="line"></div><div class="line"><span class="comment">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></div><div class="line">req.query.order</div><div class="line"><span class="comment">// =&gt; "desc"</span></div><div class="line"></div><div class="line">req.query.shoe.color</div><div class="line"><span class="comment">// =&gt; "blue"</span></div><div class="line"></div><div class="line">req.query.shoe.type</div><div class="line"><span class="comment">// =&gt; "converse"</span></div></pre></td></tr></table></figure>
<h2 id="req-cookies"><a href="#req-cookies" class="headerlink" title="req.cookies"></a>req.cookies</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Cookie: name=tj</span></div><div class="line">req.cookies.name</div><div class="line"><span class="comment">// =&gt; "tj"</span></div></pre></td></tr></table></figure>
<h2 id="req-ip"><a href="#req-ip" class="headerlink" title="req.ip"></a>req.ip</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">req.ip</div><div class="line"><span class="comment">//=&gt;127.0.0.1</span></div></pre></td></tr></table></figure>
<h2 id="req-path"><a href="#req-path" class="headerlink" title="req.path"></a>req.path</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// example.com/users?sort=desc</span></div><div class="line">req.path</div><div class="line"><span class="comment">// =&gt; "/users"</span></div></pre></td></tr></table></figure>
<h2 id="req-hostname"><a href="#req-hostname" class="headerlink" title="req.hostname"></a>req.hostname</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Host: "example.com:3000"</span></div><div class="line">req.hostname</div><div class="line"><span class="comment">// =&gt; "example.com"</span></div></pre></td></tr></table></figure>
<h1 id="app方法"><a href="#app方法" class="headerlink" title="app方法"></a>app方法</h1><h2 id="app-set"><a href="#app-set" class="headerlink" title="app.set"></a>app.set</h2><p>set方法用于指定变量的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.set(<span class="string">"views"</span>, __dirname + <span class="string">"/views"</span>);</div><div class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"jade"</span>);</div></pre></td></tr></table></figure></p>
<p>上面代码使用set方法，为系统变量”views”和”view engine”指定值</p>
<h2 id="app-get"><a href="#app-get" class="headerlink" title="app.get"></a>app.get</h2><p>除了作为use的别名用法外，get方法还用于获取变量的值，与set方法相对应<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'title'</span>);</div><div class="line"><span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Site'</span>);</div><div class="line">app.get(<span class="string">'title'</span>);</div><div class="line"><span class="comment">// =&gt; "My Site"</span></div></pre></td></tr></table></figure></p>
<h2 id="app-enable"><a href="#app-enable" class="headerlink" title="app.enable"></a>app.enable</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.enable(<span class="string">'trust proxy'</span>);</div><div class="line">app.get(<span class="string">'trust proxy'</span>);</div><div class="line"><span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure>
<h2 id="app-disable"><a href="#app-disable" class="headerlink" title="app.disable"></a>app.disable</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.disable(<span class="string">'trust proxy'</span>);</div><div class="line">app.get(<span class="string">'trust proxy'</span>);</div><div class="line"><span class="comment">// =&gt; false</span></div></pre></td></tr></table></figure>
<h2 id="app-listen"><a href="#app-listen" class="headerlink" title="app.listen"></a>app.listen</h2><p>在给定的主机和端口上监听请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line">app.listen(<span class="number">4000</span>)</div></pre></td></tr></table></figure></p>
<p>express()返回的app实际是一个JavaScript Function，它被设计为传给node的http servers作为处理请求的回调函数。因为app不是从HTTP或者HTTPS继承来的，它只是一个简单的回调函数，可以用同一份代码同时处理HTTP和HTTPS版本的服务。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"></div><div class="line">http.createServer(app).listen(<span class="number">80</span>)</div><div class="line">https.createServer(options, app).listen(<span class="number">443</span>)</div></pre></td></tr></table></figure></p>
<p>app.listen() 方法只是一个快捷方法，如果想使用 HTTPS ，或者同时提供 HTTP 和 HTTPS ，可以使用上面的代码。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.expressjs.com.cn/4x/api.html#app.enabled" target="_blank" rel="external">express中文文档</a></li>
<li><a href="http://www.cnblogs.com/xiaohuochai/p/7189074.html#anchor6" target="_blank" rel="external">express框架</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Express简介&quot;&gt;&lt;a href=&quot;#Express简介&quot; class=&quot;headerlink&quot; title=&quot;Express简介&quot;&gt;&lt;/a&gt;Express简介&lt;/h1&gt;&lt;p&gt;Express是一个简洁、灵活的Node.js Web应用开发框架，它提供一系列强大的特性，帮助开发者创建Web和移动设备应用。&lt;br&gt;它是一个基于Node.js平台，快速、开放、极简的web开发框架。优点是易上手、高性能、扩展性强。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;易上手：Express对web开发相关的模块进行了适度的封装，屏蔽了大量复杂繁琐的技术细节，让开发者专注于业务逻辑的开发，极大的降低了入门和学习成本。&lt;/li&gt;
&lt;li&gt;高性能:：Express仅在web应用相关的nodejs模块上进行了适度的封装和扩展，较大程度避免了过度封装导致的性能损耗。&lt;/li&gt;
&lt;li&gt;扩展性强：基于中间件的开发模式，使express应用的扩展、模块拆分非常简单，既灵活，扩展性又强。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Express" scheme="https://www.kmac007.com/categories/Express/"/>
    
    
      <category term="Express" scheme="https://www.kmac007.com/tags/Express/"/>
    
      <category term="Node.js" scheme="https://www.kmac007.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Class浅析</title>
    <link href="https://www.kmac007.com/2017/ES6%20Class%E6%B5%85%E6%9E%90.html"/>
    <id>https://www.kmac007.com/2017/ES6 Class浅析.html</id>
    <published>2017-07-30T13:23:42.000Z</published>
    <updated>2017-09-15T01:19:15.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习React.js，发现React.js中模块可以直接定义类的方式生成模块。用子类来继承<code>React.Component</code>生成模块的方式，简洁明了。<br>如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// react.js组件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">   <span class="comment">//something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面，将详细介绍ES6的Class。</p>
<a id="more"></a>
<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript语言中，生成实例的传统方法是通过构造函数。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayHi = <span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> dk = <span class="keyword">new</span> Person(<span class="string">'dk'</span>, <span class="number">23</span>)</div></pre></td></tr></table></figure></p>
<p>ES6提供了更接近传统语言的写法，引入了<code>Class</code>（类）这个概念，作为对象的模版。通过<code>class</code>关键字，可以定义类。</p>
<p>ES6的<code>class</code>只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的<code>class</code>写法知识让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p>上述代码用ES6的<code>class</code>可以改写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name, age)&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">    <span class="keyword">this</span>.age = age</div><div class="line">  &#125;</div><div class="line">  sayHi()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dk = <span class="keyword">new</span> Person(<span class="string">'dk'</span>, <span class="number">23</span>)</div></pre></td></tr></table></figure></p>
<p>如上，<code>constructor</code>方法，就是构造方法，而<code>this</code>关键字则代表实例对象。ES5的构造函数<code>Person</code>对应ES6的<code>Person</code>类的<code>constructor</code>方法，而类中的<code>sayHi</code>则对应的是构造函数<code>prototype</code>属性上的方法。</p>
<p>ES6的类，完全可以看作构造函数的另一种写法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">typeof</span> Person <span class="comment">// function</span></div><div class="line">Person === Person.prototype.constructor <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>上面代码表明，类的数据类型是函数，类的本身就指向构造函数。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用的时候，直接对类使用<code>new</code>字符，与构造函数的用法一致。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name, age)&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">    <span class="keyword">this</span>.age = age</div><div class="line">  &#125;</div><div class="line">  sayHi()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dk = <span class="keyword">new</span> Person(<span class="string">'dk'</span>, <span class="number">23</span>)</div><div class="line">dk.sayHi() <span class="comment">// Hi</span></div></pre></td></tr></table></figure></p>
<h3 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h3><p>构造函数的<code>prototype</code>属性，在ES6的”类”上面继续存在。事实上，类的所遇方法都定义在类的<code>prototype</code>属性上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toValue() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"></div><div class="line">Point.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;,</div><div class="line">  toString() &#123;&#125;,</div><div class="line">  toValue() &#123;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在类的实例上调用方法，其实就是调用原型上的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B()</div><div class="line"></div><div class="line">b.constructor === B.prototype.constructor <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><code>b</code>是<code>B</code>的实例，它的<code>constructor</code>方法就是<code>B</code>类原型的<code>constructor</code>方法。</p>
<p>由于类的方法都定义在<code>prototype</code>对象上面，所以类的新方法可以添加在<code>prototype</code>。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.assign(Person.prototype, &#123;</div><div class="line">  toString()&#123;&#125;,</div><div class="line">  toValue()&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>prototype</code>对象<code>constructor</code>属性，直接指向<code>类</code>的本身，这与ES5的行为是一致的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.prototype.constructor === Person <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>另外，类的内部所有定义的方法都是<code>不可枚举</code>的。</p>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>类和模块的内部，默认就是严格模式，所以不需要使用<code>use strict</code>指定运行模式。只要你的代码写在类或者模块中，就只有严格模式可用。</p>
<h2 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h2><p><code>constructor</code>方法是类的默认方法，默认返回实例对象（即<code>this</code>）。通过<code>new</code>命令生成对象实例时，自动调用该方法，一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo()</div><div class="line"><span class="comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></div></pre></td></tr></table></figure></p>
<h2 id="class表达式"><a href="#class表达式" class="headerlink" title="class表达式"></a>class表达式</h2><p>与函数一样，类也可以使用表达式的形式定义。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</div><div class="line">  getClassName()&#123;</div><div class="line">    <span class="keyword">return</span> Me.name</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是，这个类的名字是<code>MyClass</code>而不是<code>Me</code>，<code>Me</code>只在Class的内部代码可用，指代当前类。如果类的内部没有使用到，可以省略<code>Me</code>，可以写成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div></pre></td></tr></table></figure></p>
<p>采用class表达式，可以写出立即执行的class。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name)&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">  sayName()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="string">'dk'</span>)</div><div class="line"></div><div class="line">person.sayName() <span class="comment">// dk</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>person</code>是一个立即执行的类的实例。</p>
<h1 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Class可以通过<code>extends</code>关键字实现继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Person()&#123;</div><div class="line">  //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">class dk extends Person &#123;</div><div class="line">  //...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p>
<p>ES5 的继承，实质是先创造子类的实例对象<code>this</code>，然后再将父类的方法添加到this上面（<code>Parent.apply(this)</code>）。ES6 的继承机制完全不同，实质是先创造父类的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>
<p>如果子类没有定义<code>constructor</code>方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有<code>constructor</code>方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(...args) &#123;</div><div class="line">    <span class="keyword">super</span>(...args);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一个需要注意的地方是，在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有<code>super</code>方法才能返回父类实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// ReferenceError</span></div><div class="line">    <span class="keyword">super</span>(x, y);</div><div class="line">    <span class="keyword">this</span>.color = color; <span class="comment">// 正确</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h2><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Objcet.getPrototypeOf(ColorPoint) === Point <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p>
<h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p><code>super</code>这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>
<p><code>第一种情况</code>，<code>super</code>作为函数调用时，代表父类的构造函数。ES6要求，子类构造函数必须执行一次<code>super</code>函数。</p>
<p><code>super</code>虽然代表了父类<code>A</code>的构造函数，但是返回的是子类<code>B</code>的实例，即<code>super</code>内部的<code>this</code>指的是<code>B</code>，一次<code>super()</code>在这里相当于：<br><code>A.prototype.constructor.call(this)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">super</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> A() <span class="comment">//A</span></div><div class="line"><span class="keyword">new</span> B() <span class="comment">//B</span></div></pre></td></tr></table></figure></p>
<p><code>第二种情况</code>,<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  p() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">super</span>()</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.p())</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B()</div></pre></td></tr></table></figure></p>
<h2 id="类的prototype属性和proto属性"><a href="#类的prototype属性和proto属性" class="headerlink" title="类的prototype属性和proto属性"></a>类的prototype属性和<strong>proto</strong>属性</h2><p>每个对象都有<code>__proto__</code>属性，指向构造函数的<code>prototype</code>属性。Class作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p>
<ol>
<li>子类的<code>__protot__</code>属性，表示构造函数的继承，总是指向父类。</li>
<li>子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.__proto__ === A <span class="comment">//true</span></div><div class="line">B.prototype.__ptoto__ === A.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="extends的继承目标"><a href="#extends的继承目标" class="headerlink" title="extends的继承目标"></a>extends的继承目标</h2><p><code>extends</code>关键字后面可以跟多种类型的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码的<code>A</code>，只要是一个有<code>prototype</code>属性的函数，就能被<code>B</code>继承。由于函数都有<code>prototype</code>属性(除了<code>Function.prototype</code>函数)，因此<code>A</code>可以是任意函数。</p>
<p>下面讨论三种特殊情况。</p>
<ol>
<li>子类继承<code>Object</code>类。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">//true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>这种情况下，<code>A</code>其实就是构造函数<code>Object</code>的复制，<code>A</code>的实例就是<code>Object</code>的实例。</p>
<ol>
<li>不存在任何继承</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">//true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>这种情况下，<code>A</code>作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，<code>A</code>调用后返回一个空对象（即<code>Object</code>实例），所以<code>A.prototype.__proto__</code>指向构造函数（<code>Object</code>）的<code>prototype</code>属性。</p>
<ol>
<li>子类继承<code>null</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">null</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">//true</span></div><div class="line">A.prototype.__proto__ === <span class="literal">undefined</span> <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这种情况与第二种情况非常像。<code>A</code>也是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，<code>A</code>调用后返回的对象不继承任何方法，所以它的<code>__proto__</code>指向<code>Function.prototype</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习React.js，发现React.js中模块可以直接定义类的方式生成模块。用子类来继承&lt;code&gt;React.Component&lt;/code&gt;生成模块的方式，简洁明了。&lt;br&gt;如：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// react.js组件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//something...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面，将详细介绍ES6的Class。&lt;/p&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/categories/ECMAScript/"/>
    
    
      <category term="ES2015" scheme="https://www.kmac007.com/tags/ES2015/"/>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/tags/ECMAScript/"/>
    
      <category term="ES6" scheme="https://www.kmac007.com/tags/ES6/"/>
    
      <category term="Class" scheme="https://www.kmac007.com/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Modules浅析</title>
    <link href="https://www.kmac007.com/2017/ES6%20Modules%E6%B5%85%E6%9E%90.html"/>
    <id>https://www.kmac007.com/2017/ES6 Modules浅析.html</id>
    <published>2017-07-26T11:33:22.000Z</published>
    <updated>2017-09-15T03:56:13.888Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了一个Vue.js小项目<a href="https://github.com/kmac007/vue-resume" target="_blank" rel="external">vue-resume</a>，在写这个项目的过程中发现ES6的语法非常好用。印象最深的就是ES6的模块化，模块的导入直接用<code>import</code>，而导出使用<code>export</code>，非常的简单易读，对比之前AMD规范，ES6 Modules写法相当的简单。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言标准的层面上，实现了模块加载功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。比如，CommonJS模块就是对象，输入时必须查找对象的属性。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CommonJS模块</span></div><div class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">let</span> stat = _fs.stat;</div><div class="line"><span class="keyword">let</span> exists = _fs.exists;</div><div class="line"><span class="keyword">let</span> readfile = _fs.readfile;</div></pre></td></tr></table></figure>
<p>上面代码的实质是整体加载<code>fs</code>模块（即加载<code>fs</code>的所有方法），生成一个对象（<code>_fs</code>），然后再从这个对象上面读取3个方法。这种加载称为“<code>运行时加载</code>”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“<code>静态优化</code>”。</p>
<p>ES6模块不是对象，而是通过<code>export</code>命令显示指定输出的代码，再通过<code>import</code>命令输入。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6模块</span></div><div class="line"><span class="keyword">import</span> &#123; stat, exists, readfile &#125; <span class="keyword">from</span> <span class="string">'fs'</span></div></pre></td></tr></table></figure></p>
<p>上面代码的实质是从<code>fs</code>模块加载3个方法，其他方法不加载。这种加载称为“<code>编译时加载</code>”或者静态加载，即ES6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象。</p>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>ES6的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”</p>
<p>严格模式主要有以下限制：</p>
<ul>
<li>变量必须声明后使用</li>
<li>函数的参数不能有同名，否则报错</li>
<li>不能使用<code>with</code>语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀0表示八进制数，否则报错</li>
<li>不能删除不可删除的属性，否则报错</li>
<li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li>
<li><code>eval</code>不会在它的外层作用域引入变量</li>
<li><code>eval</code>和<code>arguments</code>不能被重新赋值</li>
<li><code>arguments</code>不会自动反映函数参数的变化</li>
<li>不能使用<code>arguments.callee</code></li>
<li>不能使用<code>arguments.caller</code></li>
<li>禁止<code>this</code>指向全局对象</li>
<li>不能使用<code>fn.caller</code>和<code>fn.argumens</code>获取函数调用的堆栈</li>
<li>增加了保留字（如<code>protected</code>、<code>static</code>、<code>interface</code>）</li>
</ul>
<p><strong>注意：ES6模块之中，顶层的<code>this</code> 指向<code>undefined</code>，即不应该在顶层代码使用<code>this</code></strong></p>
<h1 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h1><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块对外的接口，<code>import</code>用于输入其他模块提供的功能。</p>
<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。要使外部能读取模块内部的某个变量，必须用<code>export</code>关键字输出该变量。</p>
<h2 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'dk'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'robb'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1847</span></div></pre></td></tr></table></figure>
<p>上面通过<code>export</code>输出了三个变量，上面也可以写为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.js</span></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'dk'</span></div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'robb'</span></div><div class="line"><span class="keyword">var</span> year = <span class="number">1847</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;</div></pre></td></tr></table></figure></p>
<h2 id="输出函数或类并可以重命名"><a href="#输出函数或类并可以重命名" class="headerlink" title="输出函数或类并可以重命名"></a>输出函数或类并可以重命名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a2</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;a1 <span class="keyword">as</span> add1, a2 <span class="keyword">as</span> add2&#125;</div></pre></td></tr></table></figure>
<p>通过使用<code>as</code>关键字，重命名了函数<code>a1</code>、<code>a2</code>的对外接口。</p>
<h2 id="对外的接口"><a href="#对外的接口" class="headerlink" title="对外的接口"></a>对外的接口</h2><p><code>export</code>命令规定的是对外的接口，必须与模块内部变量建立一一对应关系。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//报错</span></div><div class="line"><span class="keyword">export</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">//报错</span></div><div class="line"><span class="keyword">var</span> m = <span class="number">1</span></div><div class="line"><span class="keyword">export</span> m</div></pre></td></tr></table></figure></p>
<p>上述两种写法都只是输出了一个值。正确的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写法一</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">//写法二</span></div><div class="line"><span class="keyword">var</span> m = <span class="number">1</span></div><div class="line"><span class="keyword">export</span> &#123;m&#125;</div><div class="line"></div><div class="line"><span class="comment">//写法三</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">1</span></div><div class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;</div></pre></td></tr></table></figure></p>
<p>上述三种写法都是正确的，规定了对外的接口<code>m</code>。其他脚本可以通过这个接口，取到值<code>1</code>。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。</p>
<h1 id="Module动态加载"><a href="#Module动态加载" class="headerlink" title="Module动态加载"></a>Module动态加载</h1><p><code>export</code>语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span></div><div class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>foo = <span class="string">'baz'</span>, <span class="number">500</span>)</div></pre></td></tr></table></figure></p>
<p>上面代码输出变量<code>foo</code>，值为<code>bar</code>，500毫秒后变为<code>baz</code></p>
<h1 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h1><p>使用<code>export</code>命令定义了模块的对外接口以后，其他JS文件就可以通过<code>import</code>命令加载这个模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//main.js</div><div class="line">import &#123;firstName, lastName, year&#125; from &apos;./a.js&apos;;</div><div class="line"></div><div class="line">function setName(element) &#123;</div><div class="line">  element.textContent = firstName + &apos; &apos; + lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果向为输入的变量重新取一个名字，<code>import</code>命令可以使用<code>as</code>关键字，将输入的变量重命名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> name &#125; <span class="keyword">from</span> <span class="string">'./a.js'</span></div></pre></td></tr></table></figure></p>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>注意，<code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo()</div><div class="line"></div><div class="line">import &#123; foo &#125; from &apos;my_module&apos;</div></pre></td></tr></table></figure></p>
<p>不会报错，原因是<code>import</code>的执行早于<code>foo</code>的调用。这种行为的本质是<code>import</code>命令是编译阶段执行的，在代码运行之前。</p>
<h2 id="整体加载"><a href="#整体加载" class="headerlink" title="整体加载 *"></a>整体加载 <code>*</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./my_module'</span></div></pre></td></tr></table></figure>
<h1 id="export-default命令"><a href="#export-default命令" class="headerlink" title="export default命令"></a>export default命令</h1><p>从上面的例子可以看出，使用<code>import</code>命令时，用户需要知道所要加载的变量名或者函数名，否则无法加载。</p>
<p>对于这个问题，我们可以使用<code>export default</code>命令，为模块指定默认输出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//b.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 默认输出的是一个函数，当其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">import</span> dk <span class="keyword">from</span> <span class="string">'./b.js'</span></div><div class="line">dk() <span class="comment">//foo</span></div></pre></td></tr></table></figure></p>
<p>上面代码的<code>import</code>命令，可以用任意名称指向b.js输出的方法，这时候就不需要知道原模块的函数名。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写了一个Vue.js小项目&lt;a href=&quot;https://github.com/kmac007/vue-resume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-resume&lt;/a&gt;，在写这个项目的过程中发现ES6的语法非常好用。印象最深的就是ES6的模块化，模块的导入直接用&lt;code&gt;import&lt;/code&gt;，而导出使用&lt;code&gt;export&lt;/code&gt;，非常的简单易读，对比之前AMD规范，ES6 Modules写法相当的简单。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言标准的层面上，实现了模块加载功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。&lt;/p&gt;
&lt;p&gt;ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。比如，CommonJS模块就是对象，输入时必须查找对象的属性。&lt;/p&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/categories/ECMAScript/"/>
    
    
      <category term="ES2015" scheme="https://www.kmac007.com/tags/ES2015/"/>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/tags/ECMAScript/"/>
    
      <category term="ES6" scheme="https://www.kmac007.com/tags/ES6/"/>
    
      <category term="Modules" scheme="https://www.kmac007.com/tags/Modules/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://www.kmac007.com/2017/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"/>
    <id>https://www.kmac007.com/2017/前端性能优化.html</id>
    <published>2017-05-13T06:22:34.000Z</published>
    <updated>2017-09-16T03:21:27.035Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://ovdfwd2hf.bkt.clouddn.com/performance%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.png" alt="性能优化"></center>

<h1 id="资源压缩合并，减少HTTP请求"><a href="#资源压缩合并，减少HTTP请求" class="headerlink" title="资源压缩合并，减少HTTP请求"></a>资源压缩合并，减少HTTP请求</h1><p>由于HTTP是无状态协议，意味着每次HTTP请求都需要建立通信链路、进行数据传输，而在服务器端，每个HTTP请求都需要启动独立的线程处理。这些通信和服务的开销是很昂贵的，减少HTTP请求的数目可有效提高访问性能。以下方法可以对资源进行压缩合并，减少HTTP请求：</p>
<ol>
<li>合并CSS，并压缩</li>
<li>合并JavaScript，并压缩</li>
<li>图片压缩合并，通过CSS的操作偏移量显示不同的图片。（CSS Sprite，即俗称：雪碧图）<h1 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h1><h2 id="异步加载的方式"><a href="#异步加载的方式" class="headerlink" title="异步加载的方式"></a>异步加载的方式</h2></li>
<li>动态脚本加载<br>通过JS动态的创建<code>&lt;script&gt;</code>标签来动态加载js文件。</li>
<li><code>defer</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"./a.js"</span> defer&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ol>
<li><code>async</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"./a.js"</span> <span class="keyword">async</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="异步加载的区别"><a href="#异步加载的区别" class="headerlink" title="异步加载的区别"></a>异步加载的区别</h2><p>如果不设置<code>defer</code>或者<code>async</code>，那么浏览器在遇到<code>&lt;script&gt;</code>标签时，文档的解析会停止，不再构建DOM，会导致页面阻塞直到脚本加载完毕。这是非常不好的用户体验，因此我们一般把<code>&lt;script&gt;</code>标签放置在<code>&lt;body&gt;</code>标签的最尾部。而<code>defer</code>和<code>async</code>两者同样可以解决这个问题。下面是二者的区别：</p>
<ol>
<li><code>defer</code>是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行。</li>
<li><code>async</code>是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关。</li>
</ol>
<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="缓存的分类"><a href="#缓存的分类" class="headerlink" title="缓存的分类"></a>缓存的分类</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Expires Expires:Sat, <span class="number">13</span> May <span class="number">2017</span>  <span class="number">14</span>:<span class="number">22</span>:<span class="number">34</span> GMT</div><div class="line">Cache-Control Cache-Control: max-age=<span class="number">3600</span></div></pre></td></tr></table></figure>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Last-Modified If-Modified-Since Last-Modified: Sat, <span class="number">13</span> May <span class="number">2017</span>  <span class="number">14</span>:<span class="number">22</span>:<span class="number">34</span> GMT</div><div class="line">Etag If-None-Match</div></pre></td></tr></table></figure>
<p>对于缓存这个部分，打算再写一篇文章来描述。</p>
<h1 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h1><blockquote>
<p>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p>
</blockquote>
<p>简单来说，CDN将内容缓存到分布各地的CDN的节点上，根据用户的访问IP，使用户可就近取得所需要的内容，提高网络响应速度。</p>
<h1 id="预解析DNS"><a href="#预解析DNS" class="headerlink" title="预解析DNS"></a>预解析DNS</h1><p><code>DNS Prefetch</code>，即DNS的预获取，是前端优化的一部分。一般来说，在前端优化中与DNS有关的有两点；</p>
<ol>
<li>减少DNS的解析次数</li>
<li>DNS的预解析，即<code>DNS Prefetch</code></li>
</ol>
<p>一次DNS解析一般要耗费20-120毫秒，减少DNS解析事件和次数是个很好的优化方式。默认情况下浏览器会对页面中和当前域名不在同一域的域名进行预解析，并且缓存结果，这就是隐式的<code>DNS Prefetch</code>。如果向对页面中没有出现的域进行预解析，那么就要使用显式的<code>DNS Prefetch</code>。</p>
<p>淘宝首页中的<code>DNS Prefetch</code></p>
<center><img src="http://ovdfwd2hf.bkt.clouddn.com/dns-prefetchtaobao-dns-prefetch.png" alt="enter image description here"></center>

<p>使用方法：<br><code>DNS Prefetch</code>应该尽量放在网页的前面，推荐放在<code>&lt;meta&gt;</code>后面，具体用法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"x-dns-prefetch-control"</span> content=<span class="string">"on"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"//kmac007.me"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"//kmac007.com"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"//www.kmac007.com"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>需要注意的是，虽然<code>DNS Prefetch</code>能够加快页面的解析速度，但是不能滥用。</p>
<p>如果需要禁止隐式的<code>DNS Prefetch</code>，可以使用以下的标签：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"x-dns-prefetch-control"</span> content=<span class="string">"off"</span>&gt;</div></pre></td></tr></table></figure></p>
<h1 id="事件节流"><a href="#事件节流" class="headerlink" title="事件节流"></a>事件节流</h1><p>比如，写一个滚动加载组件，监听<code>scroll</code>事件，这时每次滚动都会执行多次回调函数，这是相当消耗性能的。因此，我们可以通过事件节流的方式，减少滚动回调函数的触发，从而提升性能。<br>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadMore = <span class="built_in">document</span>.getElementById(<span class="string">'#loadMore'</span>)</div><div class="line"><span class="keyword">var</span> timer</div><div class="line"></div><div class="line"><span class="comment">//计时器的回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//距离顶部的距离</span></div><div class="line">  <span class="keyword">const</span> top = loadMore.getBoundingClientRect().top</div><div class="line">  <span class="comment">//视口高度</span></div><div class="line">  <span class="keyword">const</span> windowHeight = <span class="built_in">document</span>.documentElement.clientHeight</div><div class="line">  <span class="keyword">if</span>(top &amp;&amp; top &lt; windowHeight)&#123;</div><div class="line">    <span class="comment">//loading...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听滚动事件并对函数节流</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, ()=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(timer) &#123;</div><div class="line">    clearTimeout(timer)</div><div class="line">  &#125;</div><div class="line">  timer = setTimeout(callback, <span class="number">100</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>如上代码，我们通过定时器的方式进行函数节流，有效减少了回调函数的执行。</p>
<h1 id="减少DOM操作"><a href="#减少DOM操作" class="headerlink" title="减少DOM操作"></a>减少DOM操作</h1><p>对DOM操作的代价是高昂的，这在web应用中通常是一个性能瓶颈。</p>
<p>在《高性能JavaScript》中这么比喻：“把DOM看成一个岛屿，把JavaScript(ECMAScript)看成另一个岛屿，两者之间以一座收费桥连接”。所以每次访问DOM都会教一个过桥费，而访问的次数越多，交的费用也就越多。所以一般建议尽量减少过桥次数。</p>
<p>查询和修改DOM元素会造成页面的<code>Repaint</code>和<code>Reflow</code>。那么我们先了解下什么是<code>Repaint</code>和<code>Reflow</code>。</p>
<h2 id="Repaint和Reflow"><a href="#Repaint和Reflow" class="headerlink" title="Repaint和Reflow"></a><code>Repaint</code>和<code>Reflow</code></h2><p><code>Repaint</code>（重绘）就是在一个元素的外观被改变，但没有改变布局（宽高）的情况下发生，如改变visibility、outline、背景色等等。</p>
<p><code>Reflow</code>（重排） 的成本比 <code>Repaint</code> 的成本高得多的多。<code>DOM Tree</code> 里的每个结点都会有 <code>Reflow</code> 方法，一个结点的 <code>Reflow</code> 很有可能导致子结点，甚至父点以及同级结点的 <code>Reflow</code>。在一些高性能的电脑上也许还没什么，但是如果 <code>Reflow</code> 发生在手机上，那么这个过程是非常痛苦和耗电的。</p>
<p>每次设置style属性改变节点样式，每设置一次都会导致一次reflow，所以最好通过设置class的方式； 有动画效果的元素，它的position属性应当设为fixed或absolute，这样不会影响其它元素的布局；如果功能需求上不能设置position为fixed或absolute，那么就权衡速度的平滑性。</p>
<p>总之，因为 Reflow 有时确实不可避免，所以只能尽可能限制Reflow的影响范围。</p>
<h2 id="缓存DOM查询"><a href="#缓存DOM查询" class="headerlink" title="缓存DOM查询"></a>缓存DOM查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 未缓存 DOM 查询</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>).length; i++) &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这种情况下，每次循环都要进行DOM查询，非常影响性能。<br>我们通过如下的方式缓存DOM，这样，就不需要每次都进行DOM查询，达到了减少DOM查询的目的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 缓存了 DOM 查询</span></div><div class="line"><span class="keyword">var</span> pList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pList.length; i++) &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="合并DOM插入"><a href="#合并DOM插入" class="headerlink" title="合并DOM插入"></a>合并DOM插入</h2><p>在循环插入DOM时，我们可以将部分生成的DOM节点插入到一个片段中，最后统一将片段插入到HTML中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> listNode = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 要插入10个li</span></div><div class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment()</div><div class="line"><span class="keyword">var</span> li</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</div><div class="line">  li.innderHTML = <span class="string">"List item"</span> + i</div><div class="line">  frag.appendChild(li)</div><div class="line">&#125;</div><div class="line"></div><div class="line">listNode.appendChild(frag)</div></pre></td></tr></table></figure></p>
<h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>懒加载的原理是通过自定义属性标签存放图片原有的src属性，当img标签出现在浏览器窗口范围内再依次将原src属性填充以达到懒加载的效果。这种方法减少了开始加载网页时的请求，减少浏览器卡死的几率，减少了流量的消耗，同时提高了用户体验。</p>
<p>主要步骤：</p>
<ol>
<li>判断图片是否可见（滚动高度 + 窗口高度 &gt; 图片到页面顶部高度 &amp;&amp; 图片到页面顶部高度 + 图片高度 &gt; 滚动高度）</li>
<li>如果图片可见，将存放在<code>data-src</code>中原本的src属性填充src属性中。</li>
</ol>
<p>以下为一个图片懒加载的示例：</p>
<script async src="//jsfiddle.net/enpk4e92/embed/result,js,html,css/dark/"></script>

<h1 id="SSR服务端渲染"><a href="#SSR服务端渲染" class="headerlink" title="SSR服务端渲染"></a>SSR服务端渲染</h1><p>服务端渲染可以提高性能。React.js和Vue.js目前都支持服务端渲染。在此不做深究。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.qdfuns.com/notes/24473/a07414736488cad15de29da1708c872d.html" target="_blank" rel="external">Web前端性能优化</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://ovdfwd2hf.bkt.clouddn.com/performance%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.png&quot; alt=&quot;性能优化&quot;&gt;&lt;/center&gt;

&lt;h1 id=&quot;资源压缩合并，减少HTTP请求&quot;&gt;&lt;a href=&quot;#资源压缩合并，减少HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;资源压缩合并，减少HTTP请求&quot;&gt;&lt;/a&gt;资源压缩合并，减少HTTP请求&lt;/h1&gt;&lt;p&gt;由于HTTP是无状态协议，意味着每次HTTP请求都需要建立通信链路、进行数据传输，而在服务器端，每个HTTP请求都需要启动独立的线程处理。这些通信和服务的开销是很昂贵的，减少HTTP请求的数目可有效提高访问性能。以下方法可以对资源进行压缩合并，减少HTTP请求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;合并CSS，并压缩&lt;/li&gt;
&lt;li&gt;合并JavaScript，并压缩&lt;/li&gt;
&lt;li&gt;图片压缩合并，通过CSS的操作偏移量显示不同的图片。（CSS Sprite，即俗称：雪碧图）&lt;h1 id=&quot;异步加载&quot;&gt;&lt;a href=&quot;#异步加载&quot; class=&quot;headerlink&quot; title=&quot;异步加载&quot;&gt;&lt;/a&gt;异步加载&lt;/h1&gt;&lt;h2 id=&quot;异步加载的方式&quot;&gt;&lt;a href=&quot;#异步加载的方式&quot; class=&quot;headerlink&quot; title=&quot;异步加载的方式&quot;&gt;&lt;/a&gt;异步加载的方式&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;动态脚本加载&lt;br&gt;通过JS动态的创建&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签来动态加载js文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;./a.js&quot;&lt;/span&gt; defer&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;./a.js&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="性能优化" scheme="https://www.kmac007.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="https://www.kmac007.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>什么是Promise</title>
    <link href="https://www.kmac007.com/2017/%E4%BB%80%E4%B9%88%E6%98%AFPromise.html"/>
    <id>https://www.kmac007.com/2017/什么是Promise.html</id>
    <published>2017-05-12T11:21:52.000Z</published>
    <updated>2017-09-14T09:12:41.042Z</updated>
    
    <content type="html"><![CDATA[<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol>
<li>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态:  <code>Pending</code>(进行中)、<code>Fulfilled</code>(已成功)、<code>Rejected</code>(已失败)。只有异步操作的结果，可以决定那个当前是哪一种状态，任何其他操作都无法改变这个状态。</li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。有了<code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使异步操作更加容易。</li>
</ol>
<a id="more"></a>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol>
<li>无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。</li>
<li>如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反映到外部。</li>
<li>当处于<code>Pending</code>状态时，无法得知目前进展到哪一个阶段(刚刚开始还是即将完成)</li>
</ol>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>ES6规定，<code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例。<br>实例化<code>Promise</code>对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">  <span class="comment">//... do something</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span>(<span class="comment">/*异步操作成功*/</span>)&#123;</div><div class="line">	resolve(value)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">	reject(error)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><code>resolve</code>函数的作用： 将<code>Promise</code>对象的状态从“未完成”变为“成功”（Pending 变为 Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递进去</p>
<p><code>reject</code>函数的作用： 将<code>Promise</code>对象的状态从“未完成”变为“失败”（Pending 变为 Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递进去。</p>
<p><code>Promise</code>实例生成后，可以用<code>then</code>方法分别指定<code>Resolved</code>状态和<code>Rejected</code>状态的回调函数。<code>then</code>方法的第二个参数，即状态由<code>Pending</code>变为<code>Rejected</code>的回调函数，这是可选的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="comment">//success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="comment">//failure</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="下面是一个Promise对象的简单例子"><a href="#下面是一个Promise对象的简单例子" class="headerlink" title="下面是一个Promise对象的简单例子"></a>下面是一个<code>Promise</code>对象的简单例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</div><div class="line">    setTimeout(resolve, ms, <span class="string">'done'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="异步加载图片的例子"><a href="#异步加载图片的例子" class="headerlink" title="异步加载图片的例子"></a>异步加载图片的例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image()</div><div class="line"></div><div class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	  resolve(image)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not load image at '</span> + url))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	image.src = url</div><div class="line"> &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="下面是用Promise对象实现Ajax操作的例子"><a href="#下面是用Promise对象实现Ajax操作的例子" class="headerlink" title="下面是用Promise对象实现Ajax操作的例子"></a>下面是用<code>Promise</code>对象实现Ajax操作的例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">      xhr.open(<span class="string">'GET'</span>, url)</div><div class="line">      xhr.onreadystatechange = handler</div><div class="line">      xhr.responseType = <span class="string">"json"</span></div><div class="line">      xhr.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>)</div><div class="line">      xhr.send()</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span> || <span class="keyword">this</span>.status === <span class="number">304</span>) &#123;</div><div class="line">          resolve(<span class="keyword">this</span>.response)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText))</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="keyword">return</span> promise</div><div class="line">&#125;</div><div class="line"></div><div class="line">getJSON(<span class="string">'/'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(json))</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>简单来说，正确的返回结果，就resolve一下，错误的返回结果就reject一下。通过参数传递，将正确的结果或者错误信息放映出来。</p>
<p>调用<code>resolve</code>或<code>reject</code>并不会终结Promise的参数的函数的执行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  resolve(<span class="number">1</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(r)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>其中，<code>resolve(1)</code>执行后，后续的<code>console.log(2)</code>仍会执行，并且早于<code>resolve</code>，这是因为立即resolved的Promise是本轮事件循环的末尾执行。</p>
<h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h1><p><code>Promise</code>实例上具有<code>then</code>方法，也就是说，then方法是定义在原型对象<code>Promise.prototype</code>上的。它的作用是为Promise实例添加状态改变时的回调函数，<code>then</code>方法的第一个参数是<code>Resolved</code>扎给他的回调函数，第二个参数可选，是<code>Rejected</code>状态的回调函数。</p>
<p><code>then</code>方法返回的是一个新的<code>Promise</code>实例，因此可以采用链式写法，<code>then</code>后面再<code>then</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getJSON(<span class="string">"/post/1.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> getJSON(post.commentURL);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params">comments</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Resolved: "</span>, comments);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">funcB</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Rejected: "</span>, err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中第一个<code>then</code>方法指定的回调函数，返回一个新的<code>Promise</code>对象，此时再执行<code>then</code>方法，当状态变为<code>Resolved</code>调用<code>funcA</code>，状态变为<code>Rejectd</code>，调用<code>funcB</code>。</p>
<h1 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h1><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p>
<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getJSON(<span class="string">'/post/1.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> getJSON(post.commentURL);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">comments</span>) </span>&#123;</div><div class="line">  <span class="comment">// some code</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="comment">// 处理前面三个Promise产生的错误</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h1><p><code>Promise.all</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3])</div></pre></td></tr></table></figure></p>
<p><code>p</code>的状态有<code>p1</code>、<code>p2</code>、<code>p3</code>决定，两种情况:</p>
<ol>
<li>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</li>
<li>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以上面封装的ajax为例</span></div><div class="line"></div><div class="line"><span class="comment">// 生成一个Promise对象的数组</span></div><div class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> getJSON(<span class="string">'/post/'</span> + id + <span class="string">".json"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span> (<span class="params">posts</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>promises</code>是包含6个 Promise 实例的数组，只有这6个实例的状态都变成<code>fulfilled</code>，或者其中有一个变为<code>rejected</code>，才会调用<code>Promise.all</code>方法后面的回调函数。</p>
<h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p><code>Promise.race</code>方法同样是将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</div></pre></td></tr></table></figure></p>
<p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 <code>Promise</code> 实例的返回值，就传递给<code>p</code>的回调函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;/p&gt;
&lt;h1 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态:  &lt;code&gt;Pending&lt;/code&gt;(进行中)、&lt;code&gt;Fulfilled&lt;/code&gt;(已成功)、&lt;code&gt;Rejected&lt;/code&gt;(已失败)。只有异步操作的结果，可以决定那个当前是哪一种状态，任何其他操作都无法改变这个状态。&lt;/li&gt;
&lt;li&gt;一旦状态改变，就不会再变，任何时候都可以得到这个结果。有了&lt;code&gt;Promise&lt;/code&gt;对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，&lt;code&gt;Promise&lt;/code&gt;对象提供统一的接口，使异步操作更加容易。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/categories/ECMAScript/"/>
    
    
      <category term="ES2015" scheme="https://www.kmac007.com/tags/ES2015/"/>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/tags/ECMAScript/"/>
    
      <category term="ES6" scheme="https://www.kmac007.com/tags/ES6/"/>
    
      <category term="Promise" scheme="https://www.kmac007.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习总结</title>
    <link href="https://www.kmac007.com/2017/ES6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.kmac007.com/2017/ES6学习总结.html</id>
    <published>2017-05-10T09:43:36.000Z</published>
    <updated>2017-09-14T08:45:54.181Z</updated>
    
    <content type="html"><![CDATA[<p>一图汇总ES6新特性列表:<br><img src="http://ovdfwd2hf.bkt.clouddn.com/ES6.png" alt="enter image description here"></p>
<blockquote>
<p>图片来源： <a href="https://zhuanlan.zhihu.com/p/24570791?refer=study-fe" target="_blank" rel="external">ES 6 新特性汇总（一图全览）</a></p>
</blockquote>
<p>新时代的前端工程师怎么能不会ES6，下面记录学习与使用过程中常用的ES6语法总结。</p>
<a id="more"></a>
<h1 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a>let与const</h1><p>ES6对声明方式进行了扩展，新增了let与const</p>
<ul>
<li>let与const声明的变量仅在块级作用域中有效，即<code>{}</code>包含的区域中。const与let的差别在于let声明的是变量，而const声明的是常量。</li>
<li>let与const均不存在变量声明提升</li>
</ul>
<h2 id="不存在变量声明提升"><a href="#不存在变量声明提升" class="headerlink" title="不存在变量声明提升"></a>不存在变量声明提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(foo)</div><div class="line"><span class="keyword">let</span> foo = <span class="string">'dk'</span> <span class="comment">// foo is not defined</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(bar)</div><div class="line"><span class="keyword">const</span> bar = <span class="number">1</span> <span class="comment">// bar is not defined</span></div></pre></td></tr></table></figure>
<h2 id="let与const在代码块中定义的变量无法在外部访问，即块级作用域"><a href="#let与const在代码块中定义的变量无法在外部访问，即块级作用域" class="headerlink" title="let与const在代码块中定义的变量无法在外部访问，即块级作用域"></a>let与const在代码块中定义的变量无法在外部访问，即块级作用域</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  var a = 1</div><div class="line">  let b = 2</div><div class="line">  const c = 3</div><div class="line">&#125;</div><div class="line">console.log(a) // 1</div><div class="line">console.log(b) // b is not defined</div><div class="line">console.log(c) // c is not defined</div></pre></td></tr></table></figure>
<h2 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h2><p>只要块级作用域内存在<code>let</code>、<code>const</code>命令，它所声明的变量就”绑定”(binding)这个区域，不再受外部的影响。<br>如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用<code>let</code>和<code>const</code>命令声明变量之前，该变量是不可用的。这在语法上，称为<code>暂时性死区</code>。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 暂时性死区</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">1</span></div><div class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">  <span class="keyword">let</span> num = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">add() <span class="comment">// num is not defined</span></div></pre></td></tr></table></figure></p>
<h2 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h2><p><code>let</code>与<code>const</code>均不允许在相同作用域内重复声明同一个变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dk</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span></div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span></div><div class="line">&#125;</div><div class="line">dk() <span class="comment">// Identifier 'a' has already been declared</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">robb</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">const</span> a = <span class="number">10</span></div><div class="line">  <span class="keyword">const</span> a = <span class="number">1</span></div><div class="line">&#125;</div><div class="line">robb() <span class="comment">// Identifier 'a' has already been declared</span></div></pre></td></tr></table></figure></p>
<h2 id="const本质"><a href="#const本质" class="headerlink" title="const本质"></a>const本质</h2><p><code>const</code>实际上保证的，并不是变量的值不得变动，而是变量指向的内存地址不得改动。这种情况，对于基本类型（Number、String、Boolean），值就保存在变量指向的内存地址中，因此可以保证为常量。但用<code>const</code>声明对象时，我们只能保证变量指向的内存地址是不变的，无法保证对象是否改变。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> b = &#123;<span class="attr">age</span>: <span class="number">1</span>&#125;</div><div class="line">b.age = <span class="number">2</span> <span class="comment">// 成功，b指向的内存地址没有改变</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;age: 2&#125;</span></div><div class="line">b = &#123;&#125; <span class="comment">//报错，改变了b的指向</span></div></pre></td></tr></table></figure></p>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><blockquote>
<p>结构赋值本质上属于”模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>
</blockquote>
<h2 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="comment">// 将右侧对应的值赋予左侧相应的变量，等价于声明了三个变量</span></div><div class="line"><span class="comment">// 如: let a = 1, b = 2, c = 3</span></div></pre></td></tr></table></figure>
<p><strong>只要某种数据具有Iterator接口，就可以采用数组形式的解构赋值（其中包括字符串）</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set是ES6新增的一种数据类型，拥有Iterator接口</span></div><div class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// x = 1, y = 2, z = 3</span></div></pre></td></tr></table></figure></p>
<p>解构允许指定默认值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = []</div><div class="line">foo <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>] <span class="comment">// x = 'a', y = 'b'</span></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>] <span class="comment">// x = 'a', y = 'b'</span></div></pre></td></tr></table></figure></p>
<p><strong>ES6内部使用严格相等运算符(<code>===</code>)，判断一个位置是否有值。所以，如果一个数组成员不严格等于<code>undefined</code>，默认值不会生效</strong></p>
<h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><p>解构赋值还可以用于对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; foo, bar&#125; = &#123; <span class="attr">foo</span>: <span class="string">'dk'</span>, <span class="attr">bar</span>: <span class="string">'kmac007'</span> &#125;</div><div class="line"><span class="built_in">console</span>.log(foo+bar) <span class="comment">// dkkmac007</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong>对象的解构与数组又一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
<ul>
<li>圆括号的使用<br>如果在结构之前就定义了变量，这时候再解构会出现错误。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="keyword">let</span> foo</div><div class="line">&#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(foo)</div><div class="line"></div><div class="line"><span class="comment">// 使用圆括号来解决</span></div><div class="line"><span class="keyword">let</span> foo</div><div class="line">(&#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="string">'dk'</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// dk</span></div></pre></td></tr></table></figure>
<h2 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h2><p>字符串也可以解构，这是因为，此时字符串被转换成一个类数组对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a, b, c, d] = <span class="string">'robb'</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// r</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// o</span></div><div class="line"><span class="built_in">console</span>.log(c) <span class="comment">// b</span></div><div class="line"><span class="built_in">console</span>.log(d) <span class="comment">// b</span></div></pre></td></tr></table></figure>
<h1 id="扩展运算符与rest运算符"><a href="#扩展运算符与rest运算符" class="headerlink" title="扩展运算符与rest运算符"></a>扩展运算符与rest运算符</h1><p>扩展运算符和rest运算符，都是<code>…</code>（三个点）。它们可以很好的为我们解决参数和对象数组未知情况下的编程，让我们的代码更健壮和简洁。</p>
<h2 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h2><p>当编写一个方法时，我们允许它传入的参数是不确定的。这时候可以使用对象扩展运算符来作运算。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dk</span>(<span class="params">...arg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(arg[<span class="number">0</span>])</div><div class="line">  <span class="built_in">console</span>.log(arg[<span class="number">1</span>])</div><div class="line">  <span class="built_in">console</span>.log(arg[<span class="number">2</span>])</div><div class="line">  <span class="built_in">console</span>.log(arg[<span class="number">3</span>])</div><div class="line">&#125;</div><div class="line">dk(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">// 结果为 1, 2, 3, undefined</span></div></pre></td></tr></table></figure></p>
<p>说明函数参数可以传入多个值，并且方法中引用多了也不会报错。</p>
<h2 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组的拷贝</span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">var</span> arr2 = [...arr1]</div><div class="line"></div><div class="line">arr1 === arr2 <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h2 id="rest运算符"><a href="#rest运算符" class="headerlink" title="rest运算符"></a>rest运算符</h2><p>rest参数（形式为”…变量名”），用于获取<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dk</span>(<span class="params">first, ...arg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(arg.length)</div><div class="line">&#125;</div><div class="line">dk(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>说明arg数组有6个元素</p>
<p><strong>注意：</strong>rest参数后不能有其他参数，只能是最后一个参数</p>
<h1 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h1><h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><p>在ES6模版字符串出来以前，我们需要这样拼接字符串：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dk = <span class="string">'robb'</span></div><div class="line"><span class="keyword">let</span> blog = <span class="string">'kmac007.me 欢迎您: '</span>+dk+<span class="string">' 您现在看到的是模版字符串小节。'</span></div><div class="line"><span class="built_in">console</span>.log(blog)</div></pre></td></tr></table></figure></p>
<p>而在ES6中，我们可以用<code>`` </code>包裹来表示字符串，其中引用dk变量时可以在内部写为${dk}这种形式。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dk = <span class="string">'robb'</span></div><div class="line"><span class="keyword">let</span> blog = <span class="string">`kmac007.me 欢迎您: <span class="subst">$&#123;dk&#125;</span> 您现在看到的是模版字符串小节。`</span></div><div class="line"><span class="built_in">console</span>.log(blog) <span class="comment">// 所得结果与上述一致</span></div></pre></td></tr></table></figure></p>
<h3 id="多行html"><a href="#多行html" class="headerlink" title="多行html"></a>多行html</h3><p>使用模版字符串可以轻松书写多行html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = <span class="string">`</span></div><div class="line"><span class="string">  &lt;div&gt;</span></div><div class="line"><span class="string">    &lt;p&gt;你好&lt;/p&gt;</span></div><div class="line"><span class="string">    &lt;span&gt;kmac007&lt;/span&gt;</span></div><div class="line"><span class="string">  &lt;/div&gt;</span></div><div class="line"><span class="string">`</span></div><div class="line"><span class="built_in">console</span>.log(html)</div></pre></td></tr></table></figure></p>
<h3 id="对运算的支持"><a href="#对运算的支持" class="headerlink" title="对运算的支持"></a>对运算的支持</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span></div><div class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;a + b&#125;</span>`</span></div><div class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>##字符串查找<br>ES6增加了字符串查找功能，并且支持中文。</p>
<h3 id="查找是否存在"><a href="#查找是否存在" class="headerlink" title="查找是否存在"></a>查找是否存在</h3><p>ES6可以直接使用<code>includes</code>判断，返回一个布尔值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dk = <span class="string">'robb'</span></div><div class="line"><span class="keyword">let</span> blog = <span class="string">`kmac007.me 欢迎您: <span class="subst">$&#123;dk&#125;</span> 您现在看到的是字符串模版小节。`</span></div><div class="line"><span class="built_in">console</span>.log(blog.includes(dk)) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="判断是否以XX开头"><a href="#判断是否以XX开头" class="headerlink" title="判断是否以XX开头"></a>判断是否以XX开头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blog.startsWith(dk)</div></pre></td></tr></table></figure>
<h3 id="判断是否以XX结尾"><a href="#判断是否以XX结尾" class="headerlink" title="判断是否以XX结尾"></a>判断是否以XX结尾</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blog.endsWith(dk)</div></pre></td></tr></table></figure>
<h2 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'dk'</span>.repeat(<span class="number">3</span>)) <span class="comment">// dkdkdk</span></div></pre></td></tr></table></figure>
<h1 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h1><p>ES6新增了一些数值操作方法。</p>
<h2 id="数字的判断和验证"><a href="#数字的判断和验证" class="headerlink" title="数字的判断和验证"></a>数字的判断和验证</h2><h3 id="数字验证Number-isFinite"><a href="#数字验证Number-isFinite" class="headerlink" title="数字验证Number.isFinite()"></a>数字验证Number.isFinite()</h3><p>可以使用Number.isFinite()来进行数字验证，只要是数字，不论是浮点型还是整型都会返回true，其他时候会返回false。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>/<span class="number">11</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(a)) <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="string">'dk'</span>)) <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>)) <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">undefined</span>)) <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h3 id="NaN验证"><a href="#NaN验证" class="headerlink" title="NaN验证"></a>NaN验证</h3><p>NaN是特殊的非数字，可以使用Number.isNaN()来验证。下边的代码控制台返回了true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)) <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h3 id="判断是否为整数Number-isInteger"><a href="#判断是否为整数Number-isInteger" class="headerlink" title="判断是否为整数Number.isInteger()"></a>判断是否为整数Number.isInteger()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1.314</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(a)) <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h3 id="整数转换Number-parseInt-xxx-和浮点型转换Number-parseFloat-xxx"><a href="#整数转换Number-parseInt-xxx-和浮点型转换Number-parseFloat-xxx" class="headerlink" title="整数转换Number.parseInt(xxx)和浮点型转换Number.parseFloat(xxx)"></a>整数转换Number.parseInt(xxx)和浮点型转换Number.parseFloat(xxx)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1.314</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(a))</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(a))</div></pre></td></tr></table></figure>
<h2 id="整数取值范围操作"><a href="#整数取值范围操作" class="headerlink" title="整数取值范围操作"></a>整数取值范围操作</h2><p>整数的操作是有一个取值范围的，它的取值范围就是2的53次方。在我们计算时会经常超出这个值所以我们要进行判断，ES6提供了一个常数，叫做最大安全整数。</p>
<h3 id="最大安全整数"><a href="#最大安全整数" class="headerlink" title="最大安全整数"></a>最大安全整数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER) <span class="comment">//9007199254740991</span></div></pre></td></tr></table></figure>
<h3 id="最小安全整数"><a href="#最小安全整数" class="headerlink" title="最小安全整数"></a>最小安全整数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER); <span class="comment">//-9007199254740991</span></div></pre></td></tr></table></figure>
<h1 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p><code>Array.from</code>方法用于将类数组对象与可遍历的对象（包括ES6新增的数据结构Sethe Map）转换成为真正的数组。<br>下面是一个类数组对象，<code>Array.from</code>将它转为真正的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arrayLike = &#123;</div><div class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</div><div class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</div><div class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</div><div class="line">  length: <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(arrayLike)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// ['a', 'b', 'c']</span></div></pre></td></tr></table></figure></p>
<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>把多个字符串或者变量转换成数组。如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数字转换成数组</span></div><div class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></div><div class="line"></div><div class="line"><span class="comment">// 字符串转换成数组</span></div><div class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// ["dk", "kmac007", "robb"]</span></div></pre></td></tr></table></figure></p>
<h2 id="find-实例方法"><a href="#find-实例方法" class="headerlink" title="find()实例方法"></a>find()实例方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="built_in">console</span>.log(arr.find(<span class="function">(<span class="params">value, index, arr</span>)=&gt;</span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt; <span class="number">5</span></div><div class="line">&#125;)) <span class="comment">//6, 找到符合条件的数组元素就return，如果找不到会显示undefined</span></div></pre></td></tr></table></figure>
<h2 id="fill-实例方法"><a href="#fill-实例方法" class="headerlink" title="fill()实例方法"></a>fill()实例方法</h2><p>fill()方法的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">arr.fill(<span class="string">'dk'</span>, <span class="number">2</span>, <span class="number">4</span>) <span class="comment">// [0, 1, "dk", "dk", 4, 5, 6, 7, 8]</span></div></pre></td></tr></table></figure></p>
<p>如上2到4位前填充了’dk’</p>
<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h3><p>这种形式比for循环要简单而且高效。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出索引"><a href="#输出索引" class="headerlink" title="输出索引"></a>输出索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> arr.keys() &#123;</div><div class="line">  <span class="built_in">console</span>.log(index)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="同时输出数组内容和索引"><a href="#同时输出数组内容和索引" class="headerlink" title="同时输出数组内容和索引"></a>同时输出数组内容和索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [index, val] <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index + <span class="string">':'</span> + val)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="entries-实例方法"><a href="#entries-实例方法" class="headerlink" title="entries()实例方法"></a>entries()实例方法</h2><p>entries()实例方法生成的是Iteraor形式的数组，这种形式的好处就是可以让我们在需要时，使用next()手动跳转到下一个值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr=[<span class="string">'dk'</span>,<span class="string">'kmac007'</span>,<span class="string">'robb'</span>]</div><div class="line"><span class="keyword">let</span> list=arr.entries();</div><div class="line"><span class="built_in">console</span>.log(list.next().value);</div><div class="line"><span class="built_in">console</span>.log(list.next().value);</div><div class="line"><span class="built_in">console</span>.log(list.next().value);</div></pre></td></tr></table></figure></p>
<h1 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h1><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b=<span class="number">2</span></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a + b)</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>) <span class="comment">//3</span></div></pre></td></tr></table></figure>
<h2 id="主动抛出错误"><a href="#主动抛出错误" class="headerlink" title="主动抛出错误"></a>主动抛出错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b=<span class="number">2</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line">add(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h2 id="可以针对函数内部使用严格模式"><a href="#可以针对函数内部使用严格模式" class="headerlink" title="可以针对函数内部使用严格模式"></a>可以针对函数内部使用严格模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span></div><div class="line">  <span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line">add(<span class="number">0</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="获得需要传递的参数个数"><a href="#获得需要传递的参数个数" class="headerlink" title="获得需要传递的参数个数"></a>获得需要传递的参数个数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b=<span class="number">2</span></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a + b)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(add.length) <span class="comment">// 1,注意，这里需要传递参数的个数代表必须传递参数的个数</span></div></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">a, b=<span class="number">2</span></span>)=&gt;</span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line">add(<span class="number">1</span>) <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>箭头函数不可加new，也就是说箭头函数不能当构造函数进行使用。</p>
<h1 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h1><p>ES6中对象有了很多新的特性。</p>
<h2 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h2><p>ES6允许把声明的变量直接赋值给对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">'dk'</span></div><div class="line"><span class="keyword">let</span> skill = <span class="string">'web'</span></div><div class="line"><span class="keyword">var</span> obj = &#123;name, skill&#125;</div><div class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;name: "dk", skill: "web"&#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="对象的Key值构建"><a href="#对象的Key值构建" class="headerlink" title="对象的Key值构建"></a>对象的Key值构建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> key = <span class="string">'name'</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  [key]: <span class="string">'dk'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;name: "dk"&#125;</span></div></pre></td></tr></table></figure>
<h2 id="自定义对象方法"><a href="#自定义对象方法" class="headerlink" title="自定义对象方法"></a>自定义对象方法</h2><p>以往我们需要以属性匿名函数的方式书写对象的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj.add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<p>而在ES6中我们可以直接简写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这种方式在Vue中大量的应用</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  add(a, b)&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj.add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<h2 id="Object-is-对象比较"><a href="#Object-is-对象比较" class="headerlink" title="Object.is()对象比较"></a>Object.is()对象比较</h2><p>我们会经常使用<code>===</code>来判断值是否相等：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(obj1.name === obj2.name) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>ES6提供了Object.is()方法进行比较：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(obj1.name === obj2.name) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(obj1.name, obj2.name)) <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>区分<code>is</code>与<code>===</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">-0</span> === <span class="number">0</span>) <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>) <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">-0</span>, <span class="number">0</span>)) <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)) <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><code>===</code>为同值相等，is()为严格相等</p>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p>Object.assign()方法为对象的合并。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = &#123;<span class="attr">b</span>: <span class="string">'robb'</span>&#125;</div><div class="line"><span class="keyword">var</span> c = &#123;<span class="attr">c</span>: <span class="string">'kmac007'</span>&#125;</div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.assign(a, b, c)</div><div class="line"><span class="built_in">console</span>.log(d) <span class="comment">// &#123;a: "dk", b: "robb", c: "kmac007"&#125;</span></div></pre></td></tr></table></figure></p>
<p>Object.assign()也可以用于浅拷贝<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">"robert"</span>,</div><div class="line">  age: <span class="number">3</span>,</div><div class="line">  child: &#123;</div><div class="line">    name: <span class="string">"bob"</span>,</div><div class="line">    age: <span class="number">3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj)</div><div class="line"></div><div class="line">obj.age = <span class="number">4</span></div><div class="line"><span class="built_in">console</span>.log(obj2.age) <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(obj.child === obj2.child) <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(obj === obj2) <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>由于ES5的对象属性名都是字符串，很容易造成属性名冲突。为了保证每个属性名的独一无二，ES6引入了<code>Symbol</code>来解决这个问题。<br>ES6引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Boolean</span></div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Array</span></div><div class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Object</span></div><div class="line"><span class="keyword">var</span> f = <span class="built_in">Symbol</span>()</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(f)) <span class="comment">// symbol</span></div></pre></td></tr></table></figure>
<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>声明一个Symbol，然后在控制台输出：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> g = <span class="built_in">Symbol</span>(<span class="string">'dk'</span>)</div><div class="line"><span class="built_in">console</span>.log(g) <span class="comment">//红色文字，表示symbol</span></div><div class="line"><span class="built_in">console</span>.log(g.toString()) <span class="comment">//黑字，表示输出的是字符串</span></div></pre></td></tr></table></figure></p>
<h2 id="Symbol在对象中的应用"><a href="#Symbol在对象中的应用" class="headerlink" title="Symbol在对象中的应用"></a>Symbol在对象中的应用</h2><p>用Symbol构建对象Key，并调用和赋值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dk = <span class="built_in">Symbol</span>(<span class="string">'robb'</span>)</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  [dk]: <span class="string">'kmac007'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;Symbol(robb): "kmac007"&#125;</span></div><div class="line">obj[dk] = <span class="string">'chan'</span></div><div class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;Symbol(robb): "chan"&#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="Symbol对象元素的保护"><a href="#Symbol对象元素的保护" class="headerlink" title="Symbol对象元素的保护"></a>Symbol对象元素的保护</h2><p>对象中有很多值，但是循环输出时，并不希望全部输出，我们可以用Symbol进行保护。<br>没有进行保护的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">'dk'</span>,<span class="attr">skill</span>:<span class="string">'football'</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> obj)&#123;</div><div class="line">    <span class="built_in">console</span>.log(obj[item]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用Symbol保护age<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">skill</span>: <span class="string">'football'</span>&#125;</div><div class="line"><span class="keyword">var</span> age = <span class="built_in">Symbol</span>()</div><div class="line">obj[age] = <span class="number">18</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj)&#123;</div><div class="line">  <span class="built_in">console</span>.log(obj[item])</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj)</div></pre></td></tr></table></figure></p>
<h1 id="Set和WeakSet数据结构"><a href="#Set和WeakSet数据结构" class="headerlink" title="Set和WeakSet数据结构"></a>Set和WeakSet数据结构</h1><h2 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<h3 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>, <span class="string">'robb'</span>])</div><div class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">// Set(3) &#123;"dk", "kmac007", "robb"&#125;</span></div></pre></td></tr></table></figure>
<p>Set和Array的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但他不是数组。</p>
<h3 id="Set值的增删查"><a href="#Set值的增删查" class="headerlink" title="Set值的增删查"></a>Set值的增删查</h3><h4 id="追加add"><a href="#追加add" class="headerlink" title="追加add"></a>追加add</h4><p>在使用<code>Array</code>的时候，可以用<code>push</code>进行追加值，<code>Set</code>则使用<code>add</code>来进行追加：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line">setArr.add(<span class="string">'t77377'</span>)</div><div class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">//Set(4) &#123;"dk", "kmac007", "robb", "t77377"&#125;</span></div></pre></td></tr></table></figure></p>
<h4 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除delete</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line">setArr.delete(<span class="string">'robb'</span>)</div><div class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">//Set(2) &#123;"dk", "kmac007"&#125;</span></div></pre></td></tr></table></figure>
<h4 id="查找has"><a href="#查找has" class="headerlink" title="查找has"></a>查找has</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line">setArr.add(<span class="string">'t77377'</span>)</div><div class="line"><span class="built_in">console</span>.log(setArr.has(<span class="string">'t77377'</span>)) <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h4 id="清空clear"><a href="#清空clear" class="headerlink" title="清空clear"></a>清空clear</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line">setArr.clear()</div><div class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">//Set(0) &#123;&#125;</span></div></pre></td></tr></table></figure>
<h3 id="Set的循环"><a href="#Set的循环" class="headerlink" title="Set的循环"></a>Set的循环</h3><h4 id="for…of循环-1"><a href="#for…of循环-1" class="headerlink" title="for…of循环"></a>for…of循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> setArr)&#123;</div><div class="line">  <span class="built_in">console</span>.log(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="size属性"><a href="#size属性" class="headerlink" title="size属性"></a>size属性</h4><p>size属性可获得Set值的数量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line"><span class="built_in">console</span>.log(setArr.size) <span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<h4 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'dk'</span>, <span class="string">'kmac007'</span>, <span class="string">'robb'</span>])</div><div class="line">setArr.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span><span class="built_in">console</span>.log(value))</div></pre></td></tr></table></figure>
<h2 id="WeakSet数据结构"><a href="#WeakSet数据结构" class="headerlink" title="WeakSet数据结构"></a>WeakSet数据结构</h2><h3 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> weak = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</div><div class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'dk'</span>, <span class="attr">b</span>: <span class="string">'js'</span>&#125;</div><div class="line">weak.add(obj)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(weak)</div></pre></td></tr></table></figure>
<p><strong>直接在new的时候放入值，将报错。同时WeakSet里面的值是不允许重复的，并且WeakSet的成员只能是对象，不能是其他类型</strong></p>
<h1 id="Map数据结构"><a href="#Map数据结构" class="headerlink" title="Map数据结构"></a>Map数据结构</h1><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。<br>ES6提供了Map数据结构，类似于对象，也是键值对的集合，但是’键’的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br>Map结构可以用对象作为键<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> json = &#123;</div><div class="line">  name: <span class="string">'dk'</span>,</div><div class="line">  age: <span class="number">23</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(json)</div><div class="line"></div><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">map.set(json, <span class="string">'kmac007'</span>)</div><div class="line"><span class="built_in">console</span>.log(map)</div></pre></td></tr></table></figure></p>
<h2 id="Map的增删查"><a href="#Map的增删查" class="headerlink" title="Map的增删查"></a>Map的增删查</h2><h3 id="增加set"><a href="#增加set" class="headerlink" title="增加set"></a>增加set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.set(key, <span class="string">'kmac007'</span>)</div></pre></td></tr></table></figure>
<h3 id="取值get"><a href="#取值get" class="headerlink" title="取值get"></a>取值get</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.get(key)</div></pre></td></tr></table></figure>
<h3 id="删除delete-1"><a href="#删除delete-1" class="headerlink" title="删除delete"></a>删除delete</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.delete(key)</div></pre></td></tr></table></figure>
<h3 id="size属性-1"><a href="#size属性-1" class="headerlink" title="size属性"></a>size属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.size</div></pre></td></tr></table></figure>
<h3 id="查找是否存在has"><a href="#查找是否存在has" class="headerlink" title="查找是否存在has"></a>查找是否存在has</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.has(<span class="string">'dk'</span>)</div></pre></td></tr></table></figure>
<h3 id="清除clear"><a href="#清除clear" class="headerlink" title="清除clear"></a>清除clear</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.clear()</div></pre></td></tr></table></figure>
<h1 id="Proxy预处理"><a href="#Proxy预处理" class="headerlink" title="Proxy预处理"></a>Proxy预处理</h1><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”</p>
<h2 id="声明Proxy"><a href="#声明Proxy" class="headerlink" title="声明Proxy"></a>声明Proxy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;&#125;)</div></pre></td></tr></table></figure>
<p>需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pro = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;</div><div class="line">  add(val)&#123;</div><div class="line">    <span class="keyword">return</span> val + <span class="number">10</span></div><div class="line">  &#125;,</div><div class="line">  name: <span class="string">'I am DK'</span></div><div class="line">&#125;, &#123;</div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, property</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'GET'</span>)</div><div class="line">    <span class="keyword">return</span> target[key]</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(pro.name)</div></pre></td></tr></table></figure></p>
<p>可以看到在控制台看到，先输出<code>GET</code>再输出<code>I am DK</code>。相当于在方法调用前的钩子函数。</p>
<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p><code>get</code>方法是在你得到某对象属性值时预处理的方法，接受三个参数：</p>
<ul>
<li>target：目标值</li>
<li>propKey：目标的key值，相当于对象的属性</li>
<li>receiver:  原始对象，可选。</li>
</ul>
<h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><p><code>set</code>方法是你要改变某对象属性值时进行预处理的方法。接受四个参数：</p>
<ul>
<li>target：目标值</li>
<li>propKey：目标的key值，相当于对象的属性。</li>
<li>value：要改变的值</li>
<li>receiver：改变前的原始对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pro = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;</div><div class="line">  add(val)&#123;</div><div class="line">    <span class="keyword">return</span> val + <span class="number">10</span></div><div class="line">  &#125;,</div><div class="line">  name: <span class="string">'dk'</span></div><div class="line">&#125;, &#123;</div><div class="line">  get(target, key)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'GET'</span>)</div><div class="line">    <span class="keyword">return</span> target[key]</div><div class="line">  &#125;,</div><div class="line">  set(target, key, value)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span> = <span class="subst">$&#123;value&#125;</span>`</span>)</div><div class="line">    <span class="keyword">return</span> target[key] = value</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(pro.name)</div><div class="line">pro.name = <span class="string">'kmac'</span></div></pre></td></tr></table></figure>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p><code>apply</code>方法拦截函数的调用、<code>call</code>和<code>apply</code>操作。</p>
<p><code>apply</code>方法可以接受三个参数，分别是目标对象、目标对象的上下文对象(<code>this</code>)和目标对象的参数数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handler = &#123;</div><div class="line">  apply (target, ctx, args)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">'I am the target'</span>&#125;</div><div class="line"><span class="keyword">var</span> handler = &#123;</div><div class="line">  apply()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</div><div class="line">p() <span class="comment">// 'I am the proxy'</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，变量<code>p</code>是Proxy的实例，当它作为函数调用时(<code>p()</code>)，就会被<code>apply</code>方法拦截，返回一个字符串。</p>
<p>另一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> twice = &#123;</div><div class="line">  apply(target, ctx, args)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments) * <span class="number">2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">left, right</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> left + right</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(sum, twice)</div><div class="line">p(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//6</span></div><div class="line">p.call(<span class="literal">null</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">//22</span></div><div class="line">p.apply(<span class="literal">null</span>, [<span class="number">7</span>, <span class="number">8</span>]) <span class="comment">//30</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Reflect.apply其实就是ES5中的Function.prototype.apply()替身， 执行Reflect.apply需要三个参数</p>
<ol>
<li>需要执行的函数</li>
<li>需要执行函数的上下文this</li>
<li>一个数组或者伪数组，作为执行函数的参数</li>
</ol>
</blockquote>
<p>另外直接调用<code>Reflect.apply</code>方法，也会被拦截<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Reflect</span>.apply(p，<span class="literal">null</span>, [<span class="number">9</span>, <span class="number">10</span>]) <span class="comment">//38</span></div></pre></td></tr></table></figure></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>关于Promise、ES6 Module以及class等，会在其他文章中展开。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24570791?refer=study-fe" target="_blank" rel="external">ES 6 新特性汇总（一图全览）</a></li>
<li><a href="http://jspang.com/2017/06/03/es6/" target="_blank" rel="external">玩转ES6</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一图汇总ES6新特性列表:&lt;br&gt;&lt;img src=&quot;http://ovdfwd2hf.bkt.clouddn.com/ES6.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片来源： &lt;a href=&quot;https://zhuanlan.zhihu.com/p/24570791?refer=study-fe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES 6 新特性汇总（一图全览）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新时代的前端工程师怎么能不会ES6，下面记录学习与使用过程中常用的ES6语法总结。&lt;/p&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/categories/ECMAScript/"/>
    
    
      <category term="ES2015" scheme="https://www.kmac007.com/tags/ES2015/"/>
    
      <category term="ECMAScript" scheme="https://www.kmac007.com/tags/ECMAScript/"/>
    
      <category term="ES6" scheme="https://www.kmac007.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式</title>
    <link href="https://www.kmac007.com/2017/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://www.kmac007.com/2017/常见设计模式.html</id>
    <published>2017-05-04T11:28:55.000Z</published>
    <updated>2017-09-13T09:04:37.187Z</updated>
    
    <content type="html"><![CDATA[<p>简单的记录下遇到的设计模式，后续会补充。</p>
<h1 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Person(<span class="string">'dk'</span>, <span class="number">23</span>)</div></pre></td></tr></table></figure>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> person = &#123;</div><div class="line">    name: name,</div><div class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> person</div><div class="line">&#125;</div><div class="line"></div><div class="line">createPerson(<span class="string">'dk'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> People = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> instance</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      name: name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    createPeople: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>(!instance)&#123;</div><div class="line">        instance = init(name)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> instance</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)()</div><div class="line"></div><div class="line">People.createPeople(<span class="string">'dk'</span>) <span class="comment">// &#123;name: 'dk'&#125;</span></div><div class="line">People.createPeople(<span class="string">'kmac'</span>) <span class="comment">// &#123;name: 'dk'&#125;</span></div></pre></td></tr></table></figure>
<h1 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, score</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">  <span class="keyword">this</span>.score = score</div><div class="line">&#125;</div><div class="line"><span class="comment">//Student.prototype = Object.create(Person.prototype)</span></div><div class="line">Student.prototype = create(Person.prototype)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">parentObj</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  F.prototype = parentObj</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</div><div class="line">&#125;</div><div class="line">Student.prototype.sayScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.score)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>, <span class="number">20</span>, <span class="number">99</span>)</div></pre></td></tr></table></figure>
<h1 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过闭包来实现一个模块</span></div><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'dk'</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    name: name,</div><div class="line">    sayName: sayName</div><div class="line">  &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<h1 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventCenter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> events = &#123;&#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">evt, handler</span>) </span>&#123;</div><div class="line">    events[evt] = events[evt] || []</div><div class="line">    events[evt].push(&#123;</div><div class="line">      handler: handler</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">evt, args</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!events[evt]) &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; events[evt].length; i++) &#123;</div><div class="line">      events[evt][i].handler(args)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">delete</span> events[name]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    on: on,</div><div class="line">    fire: fire,</div><div class="line">    off: off <span class="comment">//取消订阅</span></div><div class="line">  &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的记录下遇到的设计模式，后续会补充。&lt;/p&gt;
&lt;h1 id=&quot;构造函数模式&quot;&gt;&lt;a href=&quot;#构造函数模式&quot; class=&quot;headerlink&quot; title=&quot;构造函数模式&quot;&gt;&lt;/a&gt;构造函数模式&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; student = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;dk&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createPerson&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name: name,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; person&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createPerson(&lt;span class=&quot;string&quot;&gt;&#39;dk&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="设计模式" scheme="https://www.kmac007.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化规范CommonJS,AMD,CMD浅析</title>
    <link href="https://www.kmac007.com/2017/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%B5%85%E6%9E%90.html"/>
    <id>https://www.kmac007.com/2017/前端模块化规范浅析.html</id>
    <published>2017-04-30T07:24:31.000Z</published>
    <updated>2017-08-29T08:30:26.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用模块化"><a href="#为什么使用模块化" class="headerlink" title="为什么使用模块化"></a>为什么使用模块化</h1><p>在多人合作的项目中，如果每个人都定义全局变量，难免会出现命名冲突的问题，这是难以维护的。同时分工合作的过程中，如果一人写一个js文件，我的js又需要依赖于另一个js文件，当文件多了，依赖关系变得十分混乱。而模块化编程正好可以解决这些问题。</p>
<h2 id="模块化的目的"><a href="#模块化的目的" class="headerlink" title="模块化的目的"></a>模块化的目的</h2><ul>
<li>解决命名冲突</li>
<li>依赖管理</li>
<li>提高代码的可读性</li>
<li>代码解耦，提高复用性</li>
</ul>
<h1 id="立即执行函数写一个模块"><a href="#立即执行函数写一个模块" class="headerlink" title="立即执行函数写一个模块"></a>立即执行函数写一个模块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> _count = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    m1: m1,</div><div class="line">    m2: m2</div><div class="line">  &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>这种方法达到了不暴露私有成员的目的</p>
<a id="more"></a>
<h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。Node.js首先采用了js模块化的概念。</p>
<p>在CommonJS中，有一个全局方法require(),用于加载模块。假如有一个math.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num++</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num--</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  add: add,</div><div class="line">  reduce: reduce</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>引入math.js模块并调用模块的方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>)</div><div class="line"><span class="built_in">console</span>.log(math.add(<span class="number">1</span>)) <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(math.reduce(<span class="number">1</span>)) <span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>CommonJS定义的模块分为:{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p>
<p>require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。</p>
<p>CommonJS加载模块是同步的，所以加载完成后才能执行后面的操作。而Node.js用于服务端，加载模块已经存在本地磁盘，不用考虑异步加载方式，所以CommonJS比较适用。而在浏览器中，如果同步加载js会阻塞整个页面，这对用户是相当不友好的。而AMD、CMD规范则是解决这个问题的。</p>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>AMD(Asynchronous Module Definition，异步模块定义)指定一种机制，它采用异步方式加载模块，模块的加载不会影响后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成后，这个回调函数才会运行，这对浏览器的异步加载尤其适用。</p>
<p>实现AMD规范的库有require.js和curl.js等。</p>
<p>语法：</p>
<h2 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory)</div></pre></td></tr></table></figure>
<ul>
<li>第一个参数id为字符串类型，表示了模块标识，为可选参数。若不存在标识应该默认定义为在加载器中被请求脚本的标识。如果存在,那么模块标识必须为顶层的或者一个绝对的标识。</li>
<li>第二个参数denpendencies，是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。</li>
<li>第三个参数factory，是一个需要进行实例化的函数或者一个对象</li>
</ul>
<h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback)</div></pre></td></tr></table></figure>
<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。</p>
<h2 id="AMD规范的实现，require-js"><a href="#AMD规范的实现，require-js" class="headerlink" title="AMD规范的实现，require.js"></a>AMD规范的实现，require.js</h2><h3 id="require-js要解决什么问题"><a href="#require-js要解决什么问题" class="headerlink" title="require.js要解决什么问题"></a>require.js要解决什么问题</h3><p>最早的时候，所有Javascript代码都写在一个文件里，只要加载一个文件就够了，随着项目的庞大，需要加载多个js文件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"d.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种写法有很大的缺点，首先，加载JS文件的时候，浏览器会停止渲染，加载文件越多，网页失去响应的时间也越长；另外，由于依赖关系，我们必须按照a,b,c,d的顺序来依次写script标签，这不利于依赖管理，代码的编写和维护会变得难以处理。</p>
<p>require.js就是为了解决这两个问题的：</p>
<ol>
<li>实现js文件的异步加载，避免网页失去响应</li>
<li>管理模块之间的依赖性，便于代码的编写和维护</li>
</ol>
<h3 id="require-js加载"><a href="#require-js加载" class="headerlink" title="require.js加载"></a>require.js加载</h3><p>假定我们自己的代码文件是main.js，放在js目录下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"js/main"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>data-main属性的作用是，指定网页程序的主模块，如main.js，由于require.js默认文件后缀名是js，所有可以把main.js简写成main</p>
<h3 id="主模块的写法"><a href="#主模块的写法" class="headerlink" title="主模块的写法"></a>主模块的写法</h3><p>主模块依赖于其他模块，这时要使用AMD规范定义的require()函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'moduleA'</span>, <span class="string">'moduleB'</span>, <span class="string">'moculeC'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleA, moduleB, moduleC</span>)</span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>require()函数接受两个参数，第一个参数是一个数组，表示依赖的模块，moduleA、moduleB、moduleC，即主模块依赖这三个模块；第二个参数是一个回到函数，表示当前三个模块加载成功后，回调函数将被调用</p>
<h3 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h3><p>可以通过require.config()方法对模块的加载行为进行自定义。require.config()就写在主模块main.js的头部。参数是一个对象，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  baseUrl: <span class="string">""</span>,</div><div class="line">  paths: &#123;</div><div class="line">    <span class="comment">//如: "jquery": "jquery.min"</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="AMD-模块的写法"><a href="#AMD-模块的写法" class="headerlink" title="AMD 模块的写法"></a>AMD 模块的写法</h3><p>require.js加载的模块，采用AMD规范。</p>
<p>模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。如:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num++</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num--</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    add: add,</div><div class="line">    reduce: reduce</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>加载方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'math'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(math.add(num))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果模块依赖于其他模块，那么define()函数的第一个参数必须是数组，指明模块的依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">define([<span class="string">'caculate'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">caculate</span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    caculate.doSomething()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    foo: foo</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当require()函数加载math.js时，会先加载caculate.js</p>
<h3 id="加载非规范的模块"><a href="#加载非规范的模块" class="headerlink" title="加载非规范的模块"></a>加载非规范的模块</h3><p>加载非规范的模块要在用require()加载之前，要先用require.config()方法，定义它们的一些特征。</p>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>CMD是SeaJS在推广过程中对模块定义的规范,CMD则是依赖就近，用的时候再require。它写起来是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CMD</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>) <span class="comment">//依赖可以就近书写</span></div><div class="line">  math.add()</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//AMD默认推荐</span></div><div class="line">define([<span class="string">'a'</span>,<span class="string">'b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123; <span class="comment">//依赖必须一开始就写好</span></div><div class="line">  a.doSomething()</div><div class="line">  b.doSomething()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>AMD与CMD两者皆为异步加载模块，区别是对依赖模块的执行时机不同。</p>
<p>AMD依赖前置，JS可以方便的知道依赖是谁，立即加载；而CMD就近依赖，需要使用模块时在require()</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a><br><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a><br><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么使用模块化&quot;&gt;&lt;a href=&quot;#为什么使用模块化&quot; class=&quot;headerlink&quot; title=&quot;为什么使用模块化&quot;&gt;&lt;/a&gt;为什么使用模块化&lt;/h1&gt;&lt;p&gt;在多人合作的项目中，如果每个人都定义全局变量，难免会出现命名冲突的问题，这是难以维护的。同时分工合作的过程中，如果一人写一个js文件，我的js又需要依赖于另一个js文件，当文件多了，依赖关系变得十分混乱。而模块化编程正好可以解决这些问题。&lt;/p&gt;
&lt;h2 id=&quot;模块化的目的&quot;&gt;&lt;a href=&quot;#模块化的目的&quot; class=&quot;headerlink&quot; title=&quot;模块化的目的&quot;&gt;&lt;/a&gt;模块化的目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解决命名冲突&lt;/li&gt;
&lt;li&gt;依赖管理&lt;/li&gt;
&lt;li&gt;提高代码的可读性&lt;/li&gt;
&lt;li&gt;代码解耦，提高复用性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;立即执行函数写一个模块&quot;&gt;&lt;a href=&quot;#立即执行函数写一个模块&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数写一个模块&quot;&gt;&lt;/a&gt;立即执行函数写一个模块&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    m1: m1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    m2: m2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法达到了不暴露私有成员的目的&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="模块化" scheme="https://www.kmac007.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="CommonJS" scheme="https://www.kmac007.com/tags/CommonJS/"/>
    
      <category term="AMD" scheme="https://www.kmac007.com/tags/AMD/"/>
    
      <category term="CMD" scheme="https://www.kmac007.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>面向对象以及几种继承的实现方式</title>
    <link href="https://www.kmac007.com/2017/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%87%A0%E7%A7%8D%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html"/>
    <id>https://www.kmac007.com/2017/面向对象以及几种继承的实现方式.html</id>
    <published>2017-04-23T11:14:31.000Z</published>
    <updated>2017-08-29T02:31:06.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p>OOP指的是Object oriented programming指的是面向对象的程序设计。其中最重要的概念是类和对象</p>
<ul>
<li>类：具备某些属性和方法的模型。</li>
<li>对象：把类实例化就是一个个对象。</li>
</ul>
<p>面向对象编程有以下三个特性：</p>
<ol>
<li><p>继承性：子类继承父类的属性和方法，并可以添加新的属性和方法，或者对部分属性和方法进行重写。继承增加了代码的可重用性。</p>
</li>
<li><p>封装性：把类的属性的方法封装起来，暴露接口，使用方便</p>
</li>
<li><p>多态性：子类继承了父类的属性和方法，同时子类的方法可以进行重写。</p>
</li>
</ol>
<a id="more"></a>
<h1 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h1><ol>
<li>对象字面量</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>()</div></pre></td></tr></table></figure>
<ol>
<li>构造函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'dk'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo()</div></pre></td></tr></table></figure>
<ol>
<li>Object.create()</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> P = &#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(P)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">** Object.create()传递两个参数,第一个参数指定新创建对象的prototype,第二个属性可选。包含一个或多个属性描述符的 JavaScript 对象。如writable、enumerable和configurable</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h1 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"name"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="class声明"><a href="#class声明" class="headerlink" title="class声明"></a>class声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal2</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"name"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Animal()</div><div class="line"><span class="keyword">new</span> Animal2()</div></pre></td></tr></table></figure>
<h1 id="继承的几种实现方式"><a href="#继承的几种实现方式" class="headerlink" title="继承的几种实现方式"></a>继承的几种实现方式</h1><h2 id="一、借助构造函数实现继承"><a href="#一、借助构造函数实现继承" class="headerlink" title="一、借助构造函数实现继承"></a>一、借助构造函数实现继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">&#125;</div><div class="line">Parent.prototype.age = <span class="number">23</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child1"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<p>缺点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xiaoming.__proto__.__proto__ === Parent.prototype <span class="comment">//false</span></div><div class="line">xiaoming.__proto__.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>这个方法只继承的Parent构造函数中的属性，Parent.prototype上的属性与方法并不能被Child继承(这种方式会导致实例的原型链并不能指向Parent.prototype)</p>
<h2 id="二、借助原型链实现继承"><a href="#二、借助原型链实现继承" class="headerlink" title="二、借助原型链实现继承"></a>二、借助原型链实现继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"xiaoming"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent()</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> xiaoming2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaoming.__proto__.__proto__ === Parent.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>缺点:<br>父类增加新的属性，那么所有的实例也会同时发生改变。如上所示，由于实例xiaoming1与xiaoming2的<code>__proto__</code>属性指向同一个原型对象，因此，如果改变Parent中的arr，那么xiaoming1和xiaoming2的arr会同时改变，这是我们不想要的。(子类实例没有自己的属性)</p>
<h2 id="三、组合继承"><a href="#三、组合继承" class="headerlink" title="三、组合继承"></a>三、组合继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent()</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<p>缺点：<br>父对象执行了两次，这没有必要，并且无法区分实例对象是Child的直接实例还是Parent的实例</p>
<h2 id="四、组合继承优化1"><a href="#四、组合继承优化1" class="headerlink" title="四、组合继承优化1"></a>四、组合继承优化1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line">Child.prototype = Parent.prototype</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<p>缺点:<br>实例的constructor指向的是Parent，无法区分实例是Parent的实例还是Child的直接实例</p>
<h2 id="五、组合继承优化2"><a href="#五、组合继承优化2" class="headerlink" title="五、组合继承优化2"></a>五、组合继承优化2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.ptototype)</div><div class="line">Child.prototype.constructor = Child</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<h2 id="ES6-class继承"><a href="#ES6-class继承" class="headerlink" title="ES6 class继承"></a>ES6 class继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">super</span>()</div><div class="line">    <span class="keyword">this</span>.type=<span class="string">"child"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<h1 id="面向对象组件"><a href="#面向对象组件" class="headerlink" title="面向对象组件"></a>面向对象组件</h1><h2 id="jQuery轮播组件的面向对象写法"><a href="#jQuery轮播组件的面向对象写法" class="headerlink" title="jQuery轮播组件的面向对象写法"></a>jQuery轮播组件的面向对象写法</h2><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><script async src="//jsfiddle.net/kmac007/9mycbzdo/embed/result,js,html,css/dark/"></script>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-2.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 15px auto;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">      overflow: hidden;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">      content: '';</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      clear: both;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      right: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span><span class="selector-pseudo">:hover</span>,</span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.9</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">      bottom: 15px;</span></div><div class="line"><span class="undefined">      left: 50%;</span></div><div class="line"><span class="undefined">      margin-left: -60px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 10px;</span></div><div class="line"><span class="undefined">      height: 10px;</span></div><div class="line"><span class="undefined">      border-radius: 100%;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin: 0 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 传入轮播图的信息</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> infoList = [&#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img13.360buyimg.com/da/jfs/t6523/341/824411132/107598/9e0c0471/5944e2a2N1dbd6ab0.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img10.360buyimg.com/da/jfs/t5605/218/3703527351/96712/8d910da2/594204e7Necf27dfe.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img12.360buyimg.com/da/jfs/t6052/341/2742126351/72451/b5aa6d7/5945252bN141eed38.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img12.360buyimg.com/da/jfs/t5779/306/3761419882/121798/e8b4bb9c/59421ed2Ne982edad.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    ]</span></div><div class="line"><span class="javascript">    <span class="comment">// Carousel可传如两个参数，$ct为容器，infoList为轮播图信息（url与img.src）</span></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Carousel</span>(<span class="params">$ct, infoList</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct = $ct</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.pageIndex = <span class="number">0</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.render(infoList)</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.init()</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.bind()</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.autoPlay()</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 渲染dom节点</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">infoList</span>) </span>&#123;</span></div><div class="line"><span class="xml">      var arr = ['<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel"</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"img-ct"</span>&gt;</span>']</span></div><div class="line"><span class="javascript">      $.each(infoList, <span class="function"><span class="keyword">function</span> (<span class="params">index, info</span>) </span>&#123;</span></div><div class="line"><span class="xml">        arr.push('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"' + info.url + '"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"' + info.imgSrc + '"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>')</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      arr.push(<span class="string">'&lt;/ul&gt;&lt;div class = "playPre"&gt;&lt;&lt;/div&gt;&lt;div class="playNext"&gt;&gt;&lt;/div&gt;&lt;ul class="bullet"&gt;'</span>)</span></div><div class="line"><span class="javascript">      $.each(infoList, <span class="function"><span class="keyword">function</span> (<span class="params">idx, info</span>) </span>&#123;</span></div><div class="line"><span class="xml">        arr.push("<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>")</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="xml">      arr.push("<span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>")</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> renderDom = arr.join(<span class="string">''</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.append($(renderDom))</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".bullet li"</span>).eq(<span class="number">0</span>).addClass(<span class="string">"active"</span>)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">//初始化参数</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> $imgCt = <span class="keyword">this</span>.ct.find(<span class="string">'.img-ct'</span>),</span></div><div class="line"><span class="javascript">        $imgs = <span class="keyword">this</span>.ct.find(<span class="string">'.img-ct li'</span>),</span></div><div class="line"><span class="undefined">        imgsCount = $imgs.length,</span></div><div class="line"><span class="undefined">        imgWidth = $imgs.eq(0).width()</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      $imgCt.append($imgs.eq(0).clone())</span></div><div class="line"><span class="undefined">      $imgCt.prepend($imgs.last().clone())</span></div><div class="line"><span class="undefined">      $imgCt.width((imgsCount + 2) * imgWidth)</span></div><div class="line"><span class="undefined">      $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">        left: -imgWidth</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgCt = $imgCt</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgs = $imgs</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgsCount = imgsCount</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgWidth = imgWidth</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 绑定事件</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".playNext"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.playNext(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".playPre"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.playPre(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".bullet li"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (index &gt; _this.pageIndex) &#123;</span></div><div class="line"><span class="undefined">          _this.playNext(index - _this.pageIndex)</span></div><div class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_this.pageIndex &gt; index) &#123;</span></div><div class="line"><span class="undefined">          _this.playPre(_this.pageIndex - index)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 向后播放</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.playNext = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">        left: <span class="string">"-="</span> + len * _this.imgWidth</span></div><div class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.pageIndex += len</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (_this.pageIndex === _this.imgsCount) &#123;</span></div><div class="line"><span class="undefined">          _this.pageIndex = 0</span></div><div class="line"><span class="undefined">          _this.imgCt.css(&#123;</span></div><div class="line"><span class="undefined">            left: -_this.imgWidth</span></div><div class="line"><span class="undefined">          &#125;)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        _this.isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">        _this.setBullet()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 向前播放</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.playPre = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">        left: <span class="string">"+="</span> + len * _this.imgWidth</span></div><div class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.pageIndex -= len</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (_this.pageIndex &lt; <span class="number">0</span>) &#123;</span></div><div class="line"><span class="undefined">          _this.pageIndex = _this.imgsCount - 1</span></div><div class="line"><span class="undefined">          _this.imgCt.css(&#123;</span></div><div class="line"><span class="undefined">            left: -_this.imgsCount * _this.imgWidth</span></div><div class="line"><span class="undefined">          &#125;)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        _this.isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">        _this.setBullet()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 设置轮播图下部导航标</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.setBullet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">'.bullet li'</span>).removeClass(<span class="string">'active'</span>).eq(<span class="keyword">this</span>.pageIndex).addClass(<span class="string">'active'</span>)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    Carousel.prototype.autoPlay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.playNext(1)</span></div><div class="line"><span class="undefined">      &#125;, 3000)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> carousel1 = <span class="keyword">new</span> Carousel($(<span class="string">".container"</span>), infoList)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> carousel2 = <span class="keyword">new</span> Carousel($(<span class="string">".container2"</span>), infoList)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jQurey图片懒加载的面向对象写法"><a href="#jQurey图片懒加载的面向对象写法" class="headerlink" title="jQurey图片懒加载的面向对象写法"></a>jQurey图片懒加载的面向对象写法</h2><h3 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h3><script async src="//jsfiddle.net/kmac007/1xhyc8Lf/embed/result,js,html,css/dark/"></script>

<h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-2.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>lazyLoad<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 0 auto;</span></div><div class="line"><span class="undefined">      width: 800px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    img &#123;</span></div><div class="line"><span class="undefined">      width: 350px;</span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=6"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=7"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=9"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=10"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=11"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=13"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=14"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=15"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=16"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=17"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=18"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=19"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=20"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=21"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=22"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=23"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> LazyLoad = <span class="function"><span class="keyword">function</span> (<span class="params">img</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.target = img</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.bind()</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.check(<span class="keyword">this</span>.target)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 绑定滚动事件</span></span></div><div class="line"><span class="javascript">    LazyLoad.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (_this.check(_this.target)) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">var</span> dataSrc = _this.target.attr(<span class="string">'data-src'</span>)</span></div><div class="line"><span class="javascript">          _this.target.attr(<span class="string">'src'</span>, dataSrc)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">//判断目标图片是否在可视范围内</span></span></div><div class="line"><span class="javascript">    LazyLoad.prototype.check = <span class="function"><span class="keyword">function</span> (<span class="params">$node</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log($node)</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop(),</span></div><div class="line"><span class="javascript">        windowHeight = $(<span class="built_in">window</span>).height(),</span></div><div class="line"><span class="undefined">        offsetTop = $node.offset().top,</span></div><div class="line"><span class="javascript">        nodeHeight = $node.outerHeight(<span class="literal">true</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (scrollTop + windowHeight &gt; offsetTop &amp;&amp; scrollTop &lt; offsetTop + nodeHeight) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 遍历给每个图片绑定事件</span></span></div><div class="line"><span class="javascript">    $(<span class="string">'.wrap img'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">new</span> LazyLoad($(<span class="keyword">this</span>))</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OOP&quot;&gt;&lt;a href=&quot;#OOP&quot; class=&quot;headerlink&quot; title=&quot;OOP&quot;&gt;&lt;/a&gt;OOP&lt;/h1&gt;&lt;p&gt;OOP指的是Object oriented programming指的是面向对象的程序设计。其中最重要的概念是类和对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类：具备某些属性和方法的模型。&lt;/li&gt;
&lt;li&gt;对象：把类实例化就是一个个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向对象编程有以下三个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;继承性：子类继承父类的属性和方法，并可以添加新的属性和方法，或者对部分属性和方法进行重写。继承增加了代码的可重用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;封装性：把类的属性的方法封装起来，暴露接口，使用方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多态性：子类继承了父类的属性和方法，同时子类的方法可以进行重写。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="https://www.kmac007.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="https://www.kmac007.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>原型链、this与new操作符</title>
    <link href="https://www.kmac007.com/2017/%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81this%E4%B8%8Enew%E6%93%8D%E4%BD%9C%E7%AC%A6.html"/>
    <id>https://www.kmac007.com/2017/原型链、this与new操作符.html</id>
    <published>2017-04-20T07:10:32.000Z</published>
    <updated>2017-08-29T01:18:36.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h1><p>首先如下代码所示，声明一个构造函数，并实例化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"kmac007"</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div></pre></td></tr></table></figure></p>
<p>如上作为构造函数Person的实例person<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person.name <span class="comment">//kmac007</span></div></pre></td></tr></table></figure></p>
<p>person实例上并没有这个属性，而这个属性从何而来呢?<br>很明显，这个属性来自Person.prototype</p>
<p>每个函数都有一个prototype属性，就是上面看到的prototype,Person.prototype则表示实例的原型</p>
<p>那么person这个实例与Person.prototype的关系又是怎么样的呢，接下来就有了<code>__proto__</code></p>
<a id="more"></a>
<h1 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h1><p>每个JavaScript对象（除了null）都有一个隐式原型属性<code>__proto__</code>,这个属性指向创建该对象构造函数的prototype,而构造函数原型的constructor属性指向构造函数本身<br>如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"kmac007"</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">person.__proto__ === Person.prototype <span class="comment">//true</span></div><div class="line">Person.prototype.constructor === Person <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>那么Person.prototype对象的<code>__proto__</code>又是什么呢<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>由上可知实例对象通过<code>__proto__</code>与原型对象一层一层的连接<br>当我们使用person.toString()方法时，实例对象本身没有，因此通过<code>person.__proto__</code>向它的原型对象查找，如再找不到，则继续往它原型对象的原型对象查找<code>person.__proto__.__proto__</code>，最终在Object.prototype上找到了toString()方法。</p>
<p>而这种由<code>__proto__</code>相互关联的原型组成的链式结构就称作原型链。如下蓝色线条所示。</p>
<p><img src="http://ovdfwd2hf.bkt.clouddn.com/prototypeprototype.png" alt="prototye" style="margin: 0 auto;"></p>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="全局this"><a href="#全局this" class="headerlink" title="全局this"></a>全局this</h2><p>浏览器环境下this指向window对象，在任何情况下，创建变量时没有加上var或let相当于创建了一个全局变量。</p>
<p>Node命令行中，this===global  true</p>
<p>在命令行中进行求值会赋值在this上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo = <span class="string">"bar"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">//bar</span></div><div class="line"><span class="built_in">console</span>.log(global.foo) <span class="comment">//bar</span></div></pre></td></tr></table></figure></p>
<p>在Node环境中执行JS脚本，有所不同。this其实是个空对象，有别于global</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.js</span></div><div class="line">foo = <span class="string">"bar"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(global.foo) <span class="comment">//bar</span></div></pre></td></tr></table></figure>
<h2 id="函数或方法里的this"><a href="#函数或方法里的this" class="headerlink" title="函数或方法里的this"></a>函数或方法里的this</h2><p>函数被调用时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = obj.foo</div><div class="line">obj.foo()  <span class="comment">//obj</span></div><div class="line">bar() <span class="comment">//window</span></div></pre></td></tr></table></figure></p>
<p>函数的调用过程如下:</p>
<blockquote>
<p>func.call(context) context即调用时的上下文</p>
</blockquote>
<p>因此上面的调用过程如下:<br>obj.foo() 相当于 obj.foo.call(obj) this指向obj<br>bar() 相当于 bar.call(undefind) 而在浏览器环境中undefined默认指向window(注意：在严格模式下undefined并不指向window)</p>
<h2 id="个人了解的this的使用场景"><a href="#个人了解的this的使用场景" class="headerlink" title="个人了解的this的使用场景"></a>个人了解的this的使用场景</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  a: <span class="number">1</span>,</div><div class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>作为对象调用时，obj.b(); // 指向obj</li>
<li>作为函数调用, var b = obj.b; b(); // 指向全局window</li>
<li>作为构造函数调用 var b = new Fun(); // this指向当前实例对象</li>
<li>作为call与apply调用 obj.b.apply(object, []); // this指向当前的object</li>
</ol>
<h1 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call,apply,bind"></a>call,apply,bind</h1><p>call()和apply()的作用是改变函数的执行上下文，改变this的指向，第一部分参数是要指定的执行上下文，第二部分则是传入的参数。二者的区别在于传入参数的形式的不同，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func.apply(Obj, [argArray])</div><div class="line">func.call(Obj, arg1, arg2, arg3)</div></pre></td></tr></table></figure></p>
<p>bind()是ES5的方法，它是用来实现上下文的绑定，与call相似，可接受的参数部分分为两部分，第一个参数都是作为执行时函数上下文中的this的对象，但是bind的返回值是函数，call是改变上下文并执行函数。(bind()返回一个新的函数)</p>
<h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">instanceof</span>运算符用来测试一个对象在其原型链中是否存在一个构造函数的prototype属性。可以检测某个对象是不是另一个对象的实例。</div></pre></td></tr></table></figure>
<p>内部逻辑：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> A <span class="keyword">instanceof</span> B,</div><div class="line">判断规则是:</div><div class="line">先沿着A的__proto__链向上查找，</div><div class="line">同时查找B.prototype，</div><div class="line">一旦二者相等，</div><div class="line">则返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</div></pre></td></tr></table></figure>
<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><blockquote>
<p>MDN<br>当new Foo(…)执行时：</p>
<ol>
<li>一个新对象被创建。它继承自Foo.prototype</li>
<li>构造函数Foo被执行。执行的时候，相应的参数会被传入，同时上下文(this)会被指定为这个新实例。new Foo等同于new Foo()，只能用在不传递任何参数的情况。</li>
<li>如果构造函数返回了一个“对象”，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那么new出来的结果为步骤1创建的对象。</li>
</ol>
</blockquote>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>当new调用一个构造函数Foo时:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 创建一个对象</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;</div><div class="line"><span class="comment">//2. 设置原型链</span></div><div class="line">o.__proto__ = Foo.prototype</div><div class="line"><span class="comment">//3. 将Foo的this指向实例o并执行Foo</span></div><div class="line"><span class="keyword">var</span> k = Foo.call(o)</div><div class="line"><span class="comment">//4. 判断F的返回值类型：如果是值类型，就丢弃它，返回o；如果是引用类型，返回引用类型的这个对象，替换掉o</span></div></pre></td></tr></table></figure></p>
<p>new的代码实现思路如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> new2 = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(func.prototype)</div><div class="line">  <span class="keyword">var</span> k = func.call(o)</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> k === <span class="string">'object'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> k</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> o</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="external">JavaScript深入之从原型到原型链</a><br><a href="https://zhuanlan.zhihu.com/p/23090041?refer=study-fe" target="_blank" rel="external">「每日一题」什么是 JS 原型链？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;首先如下代码所示，声明一个构造函数，并实例化&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.name = &lt;span class=&quot;string&quot;&gt;&quot;kmac007&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上作为构造函数Person的实例person&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;person.name &lt;span class=&quot;comment&quot;&gt;//kmac007&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;person实例上并没有这个属性，而这个属性从何而来呢?&lt;br&gt;很明显，这个属性来自Person.prototype&lt;/p&gt;
&lt;p&gt;每个函数都有一个prototype属性，就是上面看到的prototype,Person.prototype则表示实例的原型&lt;/p&gt;
&lt;p&gt;那么person这个实例与Person.prototype的关系又是怎么样的呢，接下来就有了&lt;code&gt;__proto__&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="原型链" scheme="https://www.kmac007.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="this" scheme="https://www.kmac007.com/tags/this/"/>
    
      <category term="new" scheme="https://www.kmac007.com/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>jQuery轮播的两种实现</title>
    <link href="https://www.kmac007.com/2017/jQuery%E8%BD%AE%E6%92%AD%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://www.kmac007.com/2017/jQuery轮播的两种实现.html</id>
    <published>2017-04-17T06:20:14.000Z</published>
    <updated>2017-08-28T08:26:35.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="轮播图的原理"><a href="#轮播图的原理" class="headerlink" title="轮播图的原理"></a>轮播图的原理</h1><ul>
<li>方法一：通过一个容器将图片存放在一行上，设置一个窗口，并使其属性overflow: hidden，通过改变图片的水平偏移量达到视觉上的轮播效果。另外通过将最后一位图片拷贝一份放至最前，将第一位拷贝一份放置最后，当在第一位向前播放时，显示的是最后一位图片，并实际立刻跳转到最后一位，欺骗了用户，达到了无限轮播的效果。</li>
<li>方法二：容器中有许多图片，将图片所有初始的属性都设为display:none，通过jquery的fadeIn(),和fadeOut()方法，只显示第一张，改变图片的display属性达到渐变轮播的效果</li>
</ul>
<p>接口：</p>
<ul>
<li>playNext() 向后跳转</li>
<li>playPre()  向前跳转</li>
<li>play(index) 向某索引index跳转</li>
</ul>
<h1 id="预览及代码"><a href="#预览及代码" class="headerlink" title="预览及代码"></a>预览及代码</h1><h2 id="滑动轮播"><a href="#滑动轮播" class="headerlink" title="滑动轮播"></a>滑动轮播</h2><script async src="//jsfiddle.net/kmac007/Lwhjfg6h/1/embed/result,js,html,css/dark/"></script>

<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-Hans"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 15px auto;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">      overflow: hidden;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">      content: '';</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      clear: both;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      right: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span><span class="selector-pseudo">:hover</span>,</span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.9</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">      bottom: 15px;</span></div><div class="line"><span class="undefined">      left: 50%;</span></div><div class="line"><span class="undefined">      margin-left: -60px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 10px;</span></div><div class="line"><span class="undefined">      height: 10px;</span></div><div class="line"><span class="undefined">      border-radius: 100%;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin: 0 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"img-ct"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img13.360buyimg.com/da/jfs/t6523/341/824411132/107598/9e0c0471/5944e2a2N1dbd6ab0.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img10.360buyimg.com/da/jfs/t5605/218/3703527351/96712/8d910da2/594204e7Necf27dfe.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t6052/341/2742126351/72451/b5aa6d7/5945252bN141eed38.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t5779/306/3761419882/121798/e8b4bb9c/59421ed2Ne982edad.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playPre"</span>&gt;</span></div><div class="line">      &lt;&lt;/div&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playNext"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bullet"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> $imgCt = $(<span class="string">'.img-ct'</span>),</span></div><div class="line"><span class="javascript">        $imgs = $(<span class="string">'.img-ct li'</span>),</span></div><div class="line"><span class="undefined">        imgsCount = $imgs.length,</span></div><div class="line"><span class="undefined">        imgWidth = $imgs.eq(0).width(),</span></div><div class="line"><span class="undefined">        pageIndex = 0,</span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      $imgCt.append($imgs.eq(0).clone())</span></div><div class="line"><span class="undefined">      $imgCt.prepend($imgs.last().clone())</span></div><div class="line"><span class="undefined">      $imgCt.width((imgsCount + 2) * imgWidth)</span></div><div class="line"><span class="undefined">      $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">        left: -imgWidth</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      $(<span class="string">'.playNext'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      $(<span class="string">'.playPre'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playPre(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      $(<span class="string">'.bullet li'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (index &gt; pageIndex) &#123;</span></div><div class="line"><span class="undefined">          playNext(index - pageIndex)</span></div><div class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pageIndex &gt; index) &#123;</span></div><div class="line"><span class="undefined">          playPre(pageIndex - index)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playNext</span>(<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        $imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">          left: <span class="string">"-="</span> + len * imgWidth</span></div><div class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">          pageIndex += len</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (pageIndex === imgsCount) &#123;</span></div><div class="line"><span class="undefined">            pageIndex = 0</span></div><div class="line"><span class="undefined">            $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">              left: -imgWidth</span></div><div class="line"><span class="undefined">            &#125;)</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">          setBullet()</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playPre</span>(<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        $imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">          left: <span class="string">'+='</span> + len * imgWidth</span></div><div class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">          pageIndex -= len</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (pageIndex &lt; <span class="number">0</span>) &#123;</span></div><div class="line"><span class="undefined">            pageIndex = imgsCount - 1</span></div><div class="line"><span class="undefined">            $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">              left: -imgsCount * imgWidth</span></div><div class="line"><span class="undefined">            &#125;)</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">          setBullet()</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">setBullet</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        $(<span class="string">'.bullet li'</span>).removeClass(<span class="string">'active'</span>).eq(pageIndex).addClass(<span class="string">'active'</span>)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext(1)</span></div><div class="line"><span class="undefined">      &#125;, 3000)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="渐变轮播"><a href="#渐变轮播" class="headerlink" title="渐变轮播"></a>渐变轮播</h2><script async src="//jsfiddle.net/kmac007/8zxuojdd/embed/result,js,html,css/dark/"></script>

<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-Hans"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 15px auto;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">      overflow: hidden;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">      content: '';</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      clear: both;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      right: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span><span class="selector-pseudo">:hover</span>,</span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.9</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">      bottom: 15px;</span></div><div class="line"><span class="undefined">      left: 50%;</span></div><div class="line"><span class="undefined">      margin-left: -60px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 10px;</span></div><div class="line"><span class="undefined">      height: 10px;</span></div><div class="line"><span class="undefined">      border-radius: 100%;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin: 0 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"img-ct"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img13.360buyimg.com/da/jfs/t6523/341/824411132/107598/9e0c0471/5944e2a2N1dbd6ab0.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img10.360buyimg.com/da/jfs/t5605/218/3703527351/96712/8d910da2/594204e7Necf27dfe.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t6052/341/2742126351/72451/b5aa6d7/5945252bN141eed38.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t5779/306/3761419882/121798/e8b4bb9c/59421ed2Ne982edad.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playPre"</span>&gt;</span></div><div class="line">      &lt;&lt;/div&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playNext"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bullet"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> $imgCt = $(<span class="string">'.img-ct'</span>),</span></div><div class="line"><span class="javascript">        $imgs = $(<span class="string">'.img-ct li'</span>),</span></div><div class="line"><span class="undefined">        imgsCount = $imgs.length,</span></div><div class="line"><span class="undefined">        pageIndex = 0,</span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      play(0)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      $(<span class="string">'.playNext'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      $(<span class="string">'.playPre'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playPre()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      $(<span class="string">'.bullet li'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span></div><div class="line"><span class="undefined">        play(index)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">index</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        $imgs.eq(pageIndex).fadeOut(500)</span></div><div class="line"><span class="javascript">        $imgs.eq(index).fadeIn(<span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">          isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">        pageIndex = index</span></div><div class="line"><span class="undefined">        setBullet()</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playNext</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        play((pageIndex + 1) % imgsCount)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playPre</span>(<span class="params">index</span>) </span>&#123;</span></div><div class="line"><span class="undefined">        play((imgsCount + pageIndex - 1) % imgsCount)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">setBullet</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        $(<span class="string">'.bullet li'</span>).removeClass(<span class="string">'active'</span>).eq(pageIndex).addClass(<span class="string">'active'</span>)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext()</span></div><div class="line"><span class="undefined">      &#125;, 3000)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;轮播图的原理&quot;&gt;&lt;a href=&quot;#轮播图的原理&quot; class=&quot;headerlink&quot; title=&quot;轮播图的原理&quot;&gt;&lt;/a&gt;轮播图的原理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;方法一：通过一个容器将图片存放在一行上，设置一个窗口，并使其属性overflow: hidden，通过改变图片的水平偏移量达到视觉上的轮播效果。另外通过将最后一位图片拷贝一份放至最前，将第一位拷贝一份放置最后，当在第一位向前播放时，显示的是最后一位图片，并实际立刻跳转到最后一位，欺骗了用户，达到了无限轮播的效果。&lt;/li&gt;
&lt;li&gt;方法二：容器中有许多图片，将图片所有初始的属性都设为display:none，通过jquery的fadeIn(),和fadeOut()方法，只显示第一张，改变图片的display属性达到渐变轮播的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;playNext() 向后跳转&lt;/li&gt;
&lt;li&gt;playPre()  向前跳转&lt;/li&gt;
&lt;li&gt;play(index) 向某索引index跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;预览及代码&quot;&gt;&lt;a href=&quot;#预览及代码&quot; class=&quot;headerlink&quot; title=&quot;预览及代码&quot;&gt;&lt;/a&gt;预览及代码&lt;/h1&gt;&lt;h2 id=&quot;滑动轮播&quot;&gt;&lt;a href=&quot;#滑动轮播&quot; class=&quot;headerlink&quot; title=&quot;滑动轮播&quot;&gt;&lt;/a&gt;滑动轮播&lt;/h2&gt;&lt;script async src=&quot;//jsfiddle.net/kmac007/Lwhjfg6h/1/embed/result,js,html,css/dark/&quot;&gt;&lt;/script&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://www.kmac007.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.kmac007.com/tags/jQuery/"/>
    
      <category term="轮播" scheme="https://www.kmac007.com/tags/%E8%BD%AE%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习使用笔记</title>
    <link href="https://www.kmac007.com/2017/jQuery%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>https://www.kmac007.com/2017/jQuery学习使用笔记.html</id>
    <published>2017-04-13T10:20:14.000Z</published>
    <updated>2017-08-28T02:38:15.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="库vs框架"><a href="#库vs框架" class="headerlink" title="库vs框架"></a>库vs框架</h1><ul>
<li>库: 对原生代码进行一个完整的封装，通过封装解决许多兼容性的问题。用户可以简易的调用API来构建项目，而不需要考虑许多兼容性问题。</li>
<li>框架：会基于自身的特点向用户提供一套完整的模版，用户需要按照框架规范来构建项目。</li>
<li>类比来说：前端库就像我们家里的工具箱，里面有锯子、锤子等工具，需要时，我们从工具箱中取工具；而框架像是房子的骨架，我们通过给房子添加建材等，使其完整。</li>
</ul>
<h1 id="jQuery的作用"><a href="#jQuery的作用" class="headerlink" title="jQuery的作用"></a>jQuery的作用</h1><p>jQuery是JavaScript的一个类库，仍是js，jQuery主要用来简化原生js的各种操作以及解决各种浏览器之间的兼容性。jQuery能办到的事情原生js都能办到。<br>通常来说jQuery有以下几个功能：</p>
<ol>
<li>方便快捷获取DOM元素</li>
<li>动态修改页面样式、动态改变DOM内容</li>
<li>解决跨浏览器兼容</li>
<li>响应用户的交互操作</li>
<li>为页面添加动态效果</li>
<li>统一Ajax操作</li>
<li>简化常见的JavaScript操作</li>
</ol>
<a id="more"></a>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p><img src="http://ovdfwd2hf.bkt.clouddn.com/image/jquery20150425QQ20150425-1@2x.png" alt="一图记录jQuery选择器" style="margin:0 auto;"></p>
<h1 id="与原生DOM对象相互转换"><a href="#与原生DOM对象相互转换" class="headerlink" title="与原生DOM对象相互转换"></a>与原生DOM对象相互转换</h1><p>DOM对象转jQuery对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)  <span class="comment">//通过$()将DOM对象包裹起来转换成jQuery对象</span></div></pre></td></tr></table></figure>
<p>jQuery对象转DOM对象</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>通过类数组下标方式转换成DOM对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".ct&gt;li"</span>)[<span class="number">0</span>]</div><div class="line">$(<span class="string">".ct&gt;li"</span>).eq(<span class="number">0</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<ul>
<li>通过get方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".ct&gt;li"</span>).get(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><p>把DOM字符串插入$方法即可返回一个jQuery对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = $(<span class="string">'&lt;div class="test"&gt;&lt;p&gt;&lt;span&gt;kmac007&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><h3 id="append-content-content-before-function"><a href="#append-content-content-before-function" class="headerlink" title=".append([content][,content]) / .before(function)"></a>.append([content][,content]) / .before(function)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.append(content[,content]) / .append(<span class="function"><span class="keyword">function</span>(<span class="params">index, html</span>))</span></div></pre></td></tr></table></figure>
<ol>
<li>可以一次添加多个内容，内容可以是DOM对象、HTML string、jQuery对象</li>
<li>如果参数是function，function可以返回DOM对象、HTML string、 jQuery对象，参数是集合中的元素位置与原来的html值</li>
</ol>
<h3 id="appendTo-target"><a href="#appendTo-target" class="headerlink" title=".appendTo(target)"></a>.appendTo(target)</h3><p>把对象插入到目标元素尾部，目标元素可以是selector, DOM对象, HTML string, 元素集合, jQuery对象;</p>
<h3 id="prependTo"><a href="#prependTo" class="headerlink" title=".prependTo"></a>.prependTo</h3><p>向对象头部追加内容，用法和append类似，内容添加到最开始</p>
<h3 id="prependTo-target"><a href="#prependTo-target" class="headerlink" title="prependTo(target)"></a>prependTo(target)</h3><p>把对象插入到目标元素头部，用法和prepend类似</p>
<h3 id="before-content-content-before-function"><a href="#before-content-content-before-function" class="headerlink" title=".before([content][,content]) / .before(function)"></a>.before([content][,content]) / .before(function)</h3><p>在对象前面(不是头部，而是外面，和对象并列同级)插入内容，参数和append类似</p>
<h3 id="insertBefore-target"><a href="#insertBefore-target" class="headerlink" title=".insertBefore(target)"></a>.insertBefore(target)</h3><p>把对象插入到target之前（同样不是头部，是同级）</p>
<h3 id="after-content-content-after-function（index）"><a href="#after-content-content-after-function（index）" class="headerlink" title=".after([content][,content]) / .after(function（index）)"></a>.after([content][,content]) / .after(function（index）)</h3><p>和before相反，在对象后面(不是尾部，而是外面，和对象并列同级)插入内容，参数和append类似</p>
<h3 id="insertAfter-target"><a href="#insertAfter-target" class="headerlink" title=".insertAfter(target)"></a>.insertAfter(target)</h3><p>和insertBefore相反，把对象插入到target之后（同样不是尾部，是同级）</p>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="remove-selector"><a href="#remove-selector" class="headerlink" title=".remove([selector])"></a>.remove([selector])</h3><p>删除被选元素(及其子元素)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div'</span>).remove()</div></pre></td></tr></table></figure></p>
<p>也可以添加一个可选的选择器参数来过滤匹配元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).remove(<span class="string">'.test'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="empty"><a href="#empty" class="headerlink" title=".empty()"></a>.empty()</h3><p>清空被选择元素内所有子元素</p>
<h3 id="detach"><a href="#detach" class="headerlink" title=".detach()"></a>.detach()</h3><p>.detach() 方法和.remove()一样, 除了 .detach()保存所有jQuery数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。</p>
<h2 id="包裹元素"><a href="#包裹元素" class="headerlink" title="包裹元素"></a>包裹元素</h2><h3 id="wrap-wrappingElement-wrap-function-index"><a href="#wrap-wrappingElement-wrap-function-index" class="headerlink" title="wrap(wrappingElement) / .wrap(function(index))"></a>wrap(wrappingElement) / .wrap(function(index))</h3><p>为每个对象包裹一层HTML结构，可以是selector, element, HTML string, jQuery object<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>包裹元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">".inner"</span> ).wrap( <span class="string">"&lt;div class='new'&gt;&lt;/div&gt;"</span> );</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="wrapAll-wrappingElement"><a href="#wrapAll-wrappingElement" class="headerlink" title=".wrapAll(wrappingElement)"></a>.wrapAll(wrappingElement)</h3><p>把所有匹配对象包裹在同一个HTML结构中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>包裹元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">".inner"</span> ).wrapAll( <span class="string">"&lt;div class='new' /&gt;"</span>);</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="wrapInner-wrappingElement-wrapInner-function-index"><a href="#wrapInner-wrappingElement-wrapInner-function-index" class="headerlink" title=".wrapInner(wrappingElement) / .wrapInner(function(index))"></a>.wrapInner(wrappingElement) / .wrapInner(function(index))</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>包裹元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">".inner"</span> ).wrapInner( <span class="string">"&lt;div class='new'&gt;&lt;/div&gt;"</span>);</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="unwap"><a href="#unwap" class="headerlink" title=".unwap()"></a>.unwap()</h3><p>把DOM元素的parent移除<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pTags = $( <span class="string">"p"</span> ).unwrap();</div></pre></td></tr></table></figure></p>
<h2 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h2><h3 id="html-string"><a href="#html-string" class="headerlink" title="html([string])"></a>html([string])</h3><p>这是一个读写两用的方法，用于获取/修改元素的innerHTML</p>
<ol>
<li>当没有传递参数的时候，返回元素的innerHTML</li>
<li>当传递了一个string参数的时候，修改元素的innerHTML为参数值</li>
</ol>
<p>如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).html()</div><div class="line"></div><div class="line">$(<span class="string">'div'</span>).html(<span class="string">'123'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h3><p>和html方法类似，操作的是innerHTML</p>
<h1 id="属性-amp-CSS操作"><a href="#属性-amp-CSS操作" class="headerlink" title="属性&amp;CSS操作"></a>属性&amp;CSS操作</h1><h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><h3 id="val-value"><a href="#val-value" class="headerlink" title=".val([value])"></a>.val([value])</h3><p>处理input的value,无参数时表示获取，有参数时表示修改input的值为参数值</p>
<h3 id="attr-attributeName-value"><a href="#attr-attributeName-value" class="headerlink" title="attr(attributeName[,value])"></a>attr(attributeName[,value])</h3><p>传递两个参数，只有attributeName时，获取特定的属性值，有value则修改特定的属性值为value</p>
<h3 id="removeAttr"><a href="#removeAttr" class="headerlink" title="removeAttr()"></a>removeAttr()</h3><p>为匹配的元素集合移除相应属性</p>
<h2 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a>CSS相关</h2><p>与attr用法相似</p>
<h3 id="css-propertyName-css-propertyNames"><a href="#css-propertyName-css-propertyNames" class="headerlink" title="css(propertyName) / .css(propertyNames)"></a>css(propertyName) / .css(propertyNames)</h3><p>获取元素style特定property的值</p>
<h3 id="css-propertyName-value-css-propertyName-function-index-value-css-propertiesJson"><a href="#css-propertyName-value-css-propertyName-function-index-value-css-propertiesJson" class="headerlink" title=".css(propertyName,value) / .css( propertyName, function(index, value) ) / .css( propertiesJson )"></a>.css(propertyName,value) / .css( propertyName, function(index, value) ) / .css( propertiesJson )</h3><p>设置元素style特定property的值</p>
<h3 id="addClass-className-removeClass-className"><a href="#addClass-className-removeClass-className" class="headerlink" title="addClass(className) / .removeClass(className)"></a>addClass(className) / .removeClass(className)</h3><p>添加删除class,不覆盖原class,不检查重复</p>
<h3 id="removeClass-className-removeClass-function-index-class"><a href="#removeClass-className-removeClass-function-index-class" class="headerlink" title="removeClass([className]) / ,removeClass(function(index,class))"></a>removeClass([className]) / ,removeClass(function(index,class))</h3><p>移除元素单个/多个/所有class</p>
<h3 id="hasClass-className"><a href="#hasClass-className" class="headerlink" title=".hasClass(className)"></a>.hasClass(className)</h3><p>检查元素是否包含某个class，返回boolean</p>
<h3 id="toggleClass-className"><a href="#toggleClass-className" class="headerlink" title=".toggleClass(className)"></a>.toggleClass(className)</h3><p>切换class</p>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="each-function-index-Element"><a href="#each-function-index-Element" class="headerlink" title=".each( function(index, Element) )"></a>.each( function(index, Element) )</h2><p>遍历一个jQuery对象，为每个匹配元素执行一个函数</p>
<p>如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">"li"</span> ).each(<span class="function"><span class="keyword">function</span>(<span class="params"> index </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( index + <span class="string">": "</span><span class="string">" + $(this).text() );</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure></p>
<h2 id="jQuery-each-collection-callback-indexInArray-valueOfElement"><a href="#jQuery-each-collection-callback-indexInArray-valueOfElement" class="headerlink" title="jQuery.each( collection, callback(indexInArray, valueOfElement) )"></a>jQuery.each( collection, callback(indexInArray, valueOfElement) )</h2><p>一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1。其他对象通过其属性名进行迭代。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="string">"flammable"</span>: <span class="string">"inflammable"</span>,</div><div class="line">  <span class="string">"duh"</span>: <span class="string">"no duh"</span></div><div class="line">&#125;;</div><div class="line">$.each( obj, <span class="function"><span class="keyword">function</span>(<span class="params"> key, value </span>) </span>&#123;</div><div class="line">  alert( key + <span class="string">": "</span> + value );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="map-callback-index-domElement"><a href="#map-callback-index-domElement" class="headerlink" title=".map( callback(index, domElement) )"></a>.map( callback(index, domElement) )</h2><p>通过一个函数匹配当前集合中的每个元素,产生一个包含新的jQuery对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">i, ele</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="jQuery-extend-deep-target-object1-objectN"><a href="#jQuery-extend-deep-target-object1-objectN" class="headerlink" title="jQuery.extend([deep,] target [, object1 ] [, objectN ] )"></a>jQuery.extend([deep,] target [, object1 ] [, objectN ] )</h2><ol>
<li>当我们提供两个或多个对象给$.extend()，对象的所有属性都添加到目标对象（target参数）</li>
<li>如果只有一个参数提供给$.extend()，这意味着目标参数被省略。在这种情况下，jQuery对象本身被默认为目标对象。这样，我们可以在jQuery的命名空间下添加新的功能。这对于插件开发者希望向 jQuery 中添加新函数时是很有用的</li>
</ol>
<p>目标对象（第一个参数）将被修改，并且将通过$.extend()返回。然而，如果我们想保留原对象，我们可以通过传递一个空对象作为目标对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = $.extend(&#123;&#125;, object1, object2);</div></pre></td></tr></table></figure></p>
<p>如果第一个对象的属性本身是一个对象或数组，那么它将完全用第二个对象相同的key重写一个属性。这些值不会被合并。如果将 true作为该函数的第一个参数，那么会在对象上进行递归的合并。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object1 = &#123;</div><div class="line">  apple: <span class="number">0</span>,</div><div class="line">  banana: &#123; <span class="attr">weight</span>: <span class="number">52</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;,</div><div class="line">  cherry: <span class="number">97</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> object2 = &#123;</div><div class="line">  banana: &#123; <span class="attr">price</span>: <span class="number">200</span> &#125;,</div><div class="line">  durian: <span class="number">100</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Merge object2 into object1</span></div><div class="line">$.extend( object1, object2 );</div></pre></td></tr></table></figure></p>
<h2 id="clone-withDataAndEvents"><a href="#clone-withDataAndEvents" class="headerlink" title=".clone( [withDataAndEvents ] )"></a>.clone( [withDataAndEvents ] )</h2><p>.clone()方法深度复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点</p>
<h2 id="index-index-selector-index-element"><a href="#index-index-selector-index-element" class="headerlink" title=".index() / .index(selector)/ .index(element)"></a>.index() / .index(selector)/ .index(element)</h2><p>从给定集合中查找特定元素index</p>
<ol>
<li>没参数返回第一个元素index</li>
<li>如果参数是DOM对象或者jQuery对象，则返回参数在集合中的index</li>
<li>如果参数是选择器，返回第一个匹配元素index，没有找到返回-1</li>
</ol>
<h2 id="ready-handler"><a href="#ready-handler" class="headerlink" title=".ready( handler )"></a>.ready( handler )</h2><p>当DOM准备就绪时，指定一个函数来执行,如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ready'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><h2 id="on"><a href="#on" class="headerlink" title="on"></a>on</h2><p>on()为事件绑定的首选方法 在被选元素及子元素上添加一个或多个事件处理程序<br>语法: $(selector).on(event,childSelector,data,function,map)<br>参数:</p>
<ul>
<li>event:必需。规定要从被选元素添加的一个或多个事件或命名空间。由空格分隔多个事件值。必须是有效的事件</li>
<li>data:可选。规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）。</li>
<li>function:可选。规定当事件发生时运行的函数。</li>
<li>map:规定事件映射 ({event:function, event:function, …})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。</li>
</ul>
<h2 id="off"><a href="#off" class="headerlink" title="off"></a>off</h2><p>off() 方法通常用于移除通过 on() 方法添加的事件处理程序。</p>
<h2 id="使用on绑定事件使用事件代理的写法："><a href="#使用on绑定事件使用事件代理的写法：" class="headerlink" title="使用on绑定事件使用事件代理的写法："></a>使用on绑定事件使用事件代理的写法：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  $(<span class="string">".ct"</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text())</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其他事件:<br><img src="http://ovdfwd2hf.bkt.clouddn.com/20150425QQ20150425-2@2x.png" alt="一图总结jQuery事件" style="margin: 0 auto;"></p>
<h1 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>展示元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.show( duration [, easing ] [, complete ] )</div></pre></td></tr></table></figure>
<p>隐藏元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.hide([duration ] [,easing ] [,complete ])</div></pre></td></tr></table></figure>
<p>没有参数时直接等同于直接设置选中元素display属性，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.css(<span class="string">'display'</span>, <span class="string">'none'</span>)</div><div class="line"></div><div class="line">.toggle( [duration ] [, easing ] [, complete ] )</div><div class="line"><span class="comment">//用来切换元素的隐藏、显示，类似toggleClass</span></div></pre></td></tr></table></figure>
<p>参数：</p>
<ol>
<li>duration：动画持续的时间。一个字符串或数字决定动画运行的时间。（注：默认值为”400毫秒”）</li>
<li>easing：表示过渡使用哪种缓冲函数，jQuery自身提供”linear”和”swing”,默认为”swing”</li>
<li>complete：在动画完成时执行的函数<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2>.fadeIn<br>.fadeOut<br>.fadeTo<br>.fadeToggle</li>
</ol>
<h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><p>.slideDown<br>.slideUp<br>.slideToggle</p>
<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.animate( properties [, duration ] [, easing ] [, complete ] )</div></pre></td></tr></table></figure>
<p>properties是一个CSS属性和值的对象,动画将根据这组对象移动。 如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#clickme'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#book'</span>).animate(&#123;</div><div class="line">    opacity: <span class="number">0.25</span>,</div><div class="line">    left: <span class="string">'+=50'</span>,</div><div class="line">    height: <span class="string">'toggle'</span></div><div class="line">  &#125;, <span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Animation complete.</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>.animate( properties, options )</strong></p>
<p>options是一组包含动画选项的值的集合。 常用的选项:</p>
<ol>
<li>duration (default: 400)：一个字符串或者数字决定动画将运行多久。默认值: “normal”， 三种预定速度的字符串(“slow”, “normal”, 或 “fast”或表示动画时长的毫秒数值(如：1000) ）</li>
<li>easing (default: swing)：一个字符串，表示过渡使用哪种缓动函数。jQuery自身提供”linear” 和 “swing”，其他效果可以使用jQuery Easing Plugin插件</li>
<li>step：每个动画元素的每个动画属性将调用的函数。这个函数为修改Tween 对象提供了一个机会来改变设置中得属性值。</li>
<li>complete：在动画完成时执行的函数</li>
</ol>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">'xxx.js'</span>,</div><div class="line">    method: <span class="string">'GET'</span>,</div><div class="line">    data: &#123;</div><div class="line">        name: <span class="string">'kmac007'</span>,</div><div class="line">        age: <span class="number">23</span>,</div><div class="line">        sex: <span class="string">'Male'</span></div><div class="line">    &#125;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line"></div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus</span>)</span>&#123;</div><div class="line"></div><div class="line">    consloe.log(textStatus);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>参数:</p>
<ol>
<li><p>async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false</p>
</li>
<li><p>beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递</p>
</li>
<li><p>cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加”_={timestamp}”</p>
</li>
<li><p>context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象</p>
</li>
<li><p>data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据</p>
</li>
<li><p>headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖</p>
</li>
<li><p>method：HTTP 请求方法 (比如：”POST”, “GET “, “PUT”，1.9之前使用“type”)</p>
</li>
</ol>
<h2 id="serialize-serializeArray"><a href="#serialize-serializeArray" class="headerlink" title=".serialize() / serializeArray()"></a>.serialize() / serializeArray()</h2><p>用于提交表单</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;库vs框架&quot;&gt;&lt;a href=&quot;#库vs框架&quot; class=&quot;headerlink&quot; title=&quot;库vs框架&quot;&gt;&lt;/a&gt;库vs框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;库: 对原生代码进行一个完整的封装，通过封装解决许多兼容性的问题。用户可以简易的调用API来构建项目，而不需要考虑许多兼容性问题。&lt;/li&gt;
&lt;li&gt;框架：会基于自身的特点向用户提供一套完整的模版，用户需要按照框架规范来构建项目。&lt;/li&gt;
&lt;li&gt;类比来说：前端库就像我们家里的工具箱，里面有锯子、锤子等工具，需要时，我们从工具箱中取工具；而框架像是房子的骨架，我们通过给房子添加建材等，使其完整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;jQuery的作用&quot;&gt;&lt;a href=&quot;#jQuery的作用&quot; class=&quot;headerlink&quot; title=&quot;jQuery的作用&quot;&gt;&lt;/a&gt;jQuery的作用&lt;/h1&gt;&lt;p&gt;jQuery是JavaScript的一个类库，仍是js，jQuery主要用来简化原生js的各种操作以及解决各种浏览器之间的兼容性。jQuery能办到的事情原生js都能办到。&lt;br&gt;通常来说jQuery有以下几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快捷获取DOM元素&lt;/li&gt;
&lt;li&gt;动态修改页面样式、动态改变DOM内容&lt;/li&gt;
&lt;li&gt;解决跨浏览器兼容&lt;/li&gt;
&lt;li&gt;响应用户的交互操作&lt;/li&gt;
&lt;li&gt;为页面添加动态效果&lt;/li&gt;
&lt;li&gt;统一Ajax操作&lt;/li&gt;
&lt;li&gt;简化常见的JavaScript操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://www.kmac007.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.kmac007.com/tags/jQuery/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
      <category term="动画" scheme="https://www.kmac007.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>跨域的几种解决方案</title>
    <link href="https://www.kmac007.com/2017/%E8%B7%A8%E5%9F%9F%E7%9A%84%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>https://www.kmac007.com/2017/跨域的的几种解决方案.html</id>
    <published>2017-04-10T06:10:14.000Z</published>
    <updated>2017-08-28T02:08:12.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>浏览器出于安全方面的考虑，只允许与本域下的接口交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。<br>所谓的同源策略指的是三个相同：</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>例如:</p>
<p><a href="https://www.kmac007.com/2017/index.html">https://www.kmac007.com/2017/index.html</a> 这个网址，协议是https，域名是kmac007.com，端口是80（默认端口可以省略）<br>对于如下网址：</p>
<ul>
<li><a href="http://www.kmac007.com/2017/index.html">http://www.kmac007.com/2017/index.html</a> 不同源(协议不同)</li>
<li><a href="https://www.kmac007.com/2017/first.html">https://www.kmac007.com/2017/first.html</a> 同源</li>
<li><a href="https://kmac007.com/2017/first.html" target="_blank" rel="external">https://kmac007.com/2017/first.html</a> 不同源（域名不同）</li>
<li><a href="https://kmac007.com:8080/2017/first.html" target="_blank" rel="external">https://kmac007.com:8080/2017/first.html</a> 不同源（端口不同）</li>
</ul>
<p>同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<a id="more"></a>
<h1 id="跨域以及跨域的几种实现方式"><a href="#跨域以及跨域的几种实现方式" class="headerlink" title="跨域以及跨域的几种实现方式"></a>跨域以及跨域的几种实现方式</h1><p>跨域指的是，突破同源策略，不同源之间进行数据传输或通信。</p>
<p>跨域有如下几种实现方式：</p>
<ol>
<li>JSONP</li>
<li>document.domain</li>
<li>window.postMessage</li>
<li>CORS：跨域资源共享（Cross-origin resource sharing）<br>等</li>
</ol>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>在JS中我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。由于script标签不受同源策略的限制，可以通过script标签向服务器请求数据。而JSONP就是通过这个特性来实现的。</p>
<p>JSONP的原理是，在网页中动态添加一个script标签，src指向接口地址，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据包裹在一个指定名字的回调函数里传回来。</p>
<p>如: script标签的src指向 ‘kmac007.com/getData?callback=jsonp’,以jsonp(data)形式的返回数据，调用页面上的jsonp函数从而获取到了data</p>
<h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前端部分:</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.src = src;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    addScriptTag(<span class="string">'http://kmac007.com/getData?callback=jsonp'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data.name)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>服务器收到这个请求后，会将数据放在回调函数的参数位置返回：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后端部分：</span></div><div class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"dk"</span>,</div><div class="line">    <span class="string">"age"</span>: <span class="string">"23"</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> cb = req.query.callback</div><div class="line">  <span class="keyword">if</span> (cb) &#123;</div><div class="line">    res.send(cb + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(data) + <span class="string">')'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.send(data)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  返回：json(&#123;"name":"dk","age":"23"&#125;)</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>很好的解决了跨域通信的问题，用户传递一个callback参数给服务器，服务器根据callback返回特定的callback包裹的数据，客户端可以随意定制自己的的函数处理返回的数据。</li>
<li>兼容性非常好，在非常古老的浏览器上也能很好的实现</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>JSONP只支持get请求而不支持其他HTTP请求，参数的形式只能做url拼接，后台取值会比较繁琐</li>
<li>存在安全隐患，动态插入<code>&lt;script&gt;</code>标签其实就是一种脚本注入。</li>
</ol>
<h2 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h2><p>Cookie是服务器写入浏览器的一小段消息，只有同源的网页才能共享。但是两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享Cookie。</p>
<p>举例来说, A网页是<code>http://www1.kmac007.com/a.html</code>，B网页是<code>html://www2.kmac007.com/b.html</code>，只要设置相同的document.domain，两个网页就可以共享Cookie。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'kmac007.com'</span></div></pre></td></tr></table></figure>
<p>现在A网页中设置一个Cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"test=1"</span></div></pre></td></tr></table></figure>
<p>网页B中就可以读取这个Cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> allCookie = <span class="built_in">document</span>.cookie</div></pre></td></tr></table></figure>
<h2 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h2><p>由HTML5引入的API,postMEssage()方法允许来自不同源的脚本采用异步方式进行有限通信。这个API为 window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源。</p>
<p>postMessage方法的第一个参数是具体的信息内容，第二个参数是接收信息的窗口源（origin）,即“协议+域名+端口”。也可以设为*，表示不限制域名，向所有窗口发送。</p>
<p>即父窗口与子窗口互相发送消息，通过message事件，监听对方的消息，实现跨域。</p>
<p>父窗口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.main input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</div><div class="line">  <span class="built_in">window</span>.frames[<span class="number">0</span>].postMessage(<span class="keyword">this</span>.value, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">//向子窗口发送信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  $(<span class="string">'.main input'</span>).value = e.data</div><div class="line">  <span class="built_in">console</span>.log(e.data);</div><div class="line">  <span class="comment">//监听子窗口发送信息的变化</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>子窗口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.parent.postMessage(<span class="keyword">this</span>.value, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">//向父窗口发送信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		$(<span class="string">'#input'</span>).value = e.data</div><div class="line">    <span class="built_in">console</span>.log(e.data);</div><div class="line">    <span class="comment">//监听父窗口的发送的信息变化</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS是一个W3C标准，全称是“跨域资源共享”(Cross-origin resource sharing)。</p>
<p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>CORS需要浏览器和服务器同时支持。目前所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>实现功能非常简单，只需要由服务器发送一个响应标头即可。它是通过客户端+服务端协作声明的方式来确保请求安全的。服务端会在HTTP请求头增加一系列HTTP请求参数（例如Acess-Control-Allow-Origin等），来限制哪些域的请求和哪些类型可以接受，而客户端在发起请求时必须声明自己的源(Origin)，否则服务器将不予处理，如果客户端不作声明，请求甚至会被浏览器直接拦截到不了服务端。服务端收到HTTP请求后会进行域的比较，只有同域的请求才会处理。</p>
<p>浏览器将CORS请求分为两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要满足以下两大条件，就属于简单请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">（1）请求方法是以下三种方法之一：</div><div class="line">- HEAD</div><div class="line">- GET</div><div class="line">- POST</div><div class="line">（2）HTTP的头信息不超过以下几种字段：</div><div class="line">- Accept</div><div class="line">- Accept-Language</div><div class="line">- Content-Language</div><div class="line">- Last-Event-ID</div><div class="line">- Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</div></pre></td></tr></table></figure></p>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理方式是不一样的。</p>
<ol>
<li>简单请求<br>对于简单请求，浏览器直接发出CORS请求。具体来说就是在头信息中，增加一个Origin字段。而Origin字段说明本次请求来自哪个源（协议+域名+端口）。服务器根据这个值，决定是否同意这次请求。如果Origin指定的源，不在许可范围内，浏览器会返回一个正常的HTTP回应。如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息 。如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http:<span class="comment">//api.kmac007.com</span></div><div class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></div><div class="line">Access-Control-Expose-Headers: showMes</div><div class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></div></pre></td></tr></table></figure>
<ol>
<li><p>非简单请求<br>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或Content-Type字段的类型是application/json。</p>
<p> 非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求。浏览器先询问服务器，当前网页所在的域名是否在服务器的虚空名单之中，一次可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就会报错。</p>
</li>
</ol>
<p>实现实例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//前端部分</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)</span></div><div class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></div><div class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span></div><div class="line"><span class="undefined">          newLi.innerText = xhr.responseText</span></div><div class="line"><span class="javascript">          <span class="built_in">document</span>.body.appendChild(newLi)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      xhr.open(<span class="string">'get'</span>, <span class="string">'http://b.kmac007.com:8080/getData'</span>, <span class="literal">true</span>)</span></div><div class="line"><span class="undefined">      xhr.send()</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后端部分</span></div><div class="line">app.get(<span class="string">'/getData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="string">"are u ok"</span></div><div class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>)</div><div class="line">  <span class="comment">// 加入响应头Access-Control-Allow-Origin</span></div><div class="line">  res.send(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h1&gt;&lt;p&gt;浏览器出于安全方面的考虑，只允许与本域下的接口交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。&lt;br&gt;所谓的同源策略指的是三个相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kmac007.com/2017/index.html&quot;&gt;https://www.kmac007.com/2017/index.html&lt;/a&gt; 这个网址，协议是https，域名是kmac007.com，端口是80（默认端口可以省略）&lt;br&gt;对于如下网址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kmac007.com/2017/index.html&quot;&gt;http://www.kmac007.com/2017/index.html&lt;/a&gt; 不同源(协议不同)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kmac007.com/2017/first.html&quot;&gt;https://www.kmac007.com/2017/first.html&lt;/a&gt; 同源&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kmac007.com/2017/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kmac007.com/2017/first.html&lt;/a&gt; 不同源（域名不同）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kmac007.com:8080/2017/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kmac007.com:8080/2017/first.html&lt;/a&gt; 不同源（端口不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
      <category term="跨域" scheme="https://www.kmac007.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://www.kmac007.com/2017/Ajax.html"/>
    <id>https://www.kmac007.com/2017/Ajax.html</id>
    <published>2017-04-07T03:10:26.000Z</published>
    <updated>2017-08-27T09:13:42.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax是什么-有何作用"><a href="#Ajax是什么-有何作用" class="headerlink" title="Ajax是什么?有何作用"></a>Ajax是什么?有何作用</h1><blockquote>
<p>AJax为“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。</p>
</blockquote>
<p>作用是：无需重新加载页面即可与服务器交换数据。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术带来了不错的用户体验。</p>
<p>而传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。</p>
<a id="more"></a>
<h1 id="用JS发起请求的几个步骤"><a href="#用JS发起请求的几个步骤" class="headerlink" title="用JS发起请求的几个步骤"></a>用JS发起请求的几个步骤</h1><h2 id="1-创建一个XMLHttpRequest对象"><a href="#1-创建一个XMLHttpRequest对象" class="headerlink" title="1. 创建一个XMLHttpRequest对象()"></a>1. 创建一个XMLHttpRequest对象()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div></pre></td></tr></table></figure>
<h2 id="2-监听请求成功后的变化"><a href="#2-监听请求成功后的变化" class="headerlink" title="2. 监听请求成功后的变化"></a>2. 监听请求成功后的变化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState== <span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xhr.responseText即服务器返回的内容（默认为字符串）</p>
<h2 id="3-设置请求参数"><a href="#3-设置请求参数" class="headerlink" title="3. 设置请求参数"></a>3. 设置请求参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"url"</span>, <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h2 id="4-发送请求"><a href="#4-发送请求" class="headerlink" title="4. 发送请求"></a>4. 发送请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send()</div></pre></td></tr></table></figure>
<p>在jQuery.ajax中对以上进行了封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="comment">//response即为响应内容</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="点击按钮，使用-ajax-获取数据，防止重复点击"><a href="#点击按钮，使用-ajax-获取数据，防止重复点击" class="headerlink" title="点击按钮，使用 ajax 获取数据，防止重复点击"></a>点击按钮，使用 ajax 获取数据，防止重复点击</h1><p>可以使用状态锁，判断数据是否到来。状态锁初始值为true，当发起一次请求后状态锁值变为false，此时，若是未获得响应的情况下重复点击，函数均被返回，等到状态码变为4即数据接收完毕，状态锁值变为true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isDataArrive = <span class="literal">true</span> <span class="comment">//默认为true</span></div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"getData"</span>)</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!isDataArrive) &#123; <span class="comment">//如果数据没有到来</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</div><div class="line">      &#125;</div><div class="line">      isDataArrive = <span class="literal">true</span> <span class="comment">// 收到响应</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.open()</div><div class="line">  xhr.send()</div><div class="line">  isDataArrive = <span class="literal">false</span> <span class="comment">//停止再次发送请求</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="简单封装一个-ajax-函数"><a href="#简单封装一个-ajax-函数" class="headerlink" title="简单封装一个 ajax 函数"></a>简单封装一个 ajax 函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">        <span class="keyword">var</span> results = <span class="built_in">JSON</span>.parse(xhr.responseText)</div><div class="line">        opts.success(results)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(xhr.status === <span class="number">404</span>)&#123;</div><div class="line">        opts.error()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> dataString = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</div><div class="line">    dataString += key + <span class="string">"="</span> + opts.data[key] + <span class="string">"&amp;"</span></div><div class="line">  &#125;</div><div class="line">  dataString = dataString.substr(<span class="number">0</span>, dataString.length - <span class="number">1</span>)</div><div class="line">  <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"get"</span>) &#123;</div><div class="line">    xhr.open(<span class="string">"get"</span>, opts.url + <span class="string">"?"</span> + dataString, <span class="literal">true</span>)</div><div class="line">    xhr.send()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"post"</span>) &#123;</div><div class="line">    xhr.open(<span class="string">"post"</span>, opts.url, <span class="literal">true</span>)</div><div class="line">    xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</div><div class="line">    xhr.send(dataString)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ajax(&#123;</div><div class="line">    url: <span class="string">'/login'</span>, <span class="comment">//接口地址</span></div><div class="line">    type: <span class="string">'get'</span>, <span class="comment">// 类型， post 或者 get,</span></div><div class="line">    data: &#123;</div><div class="line">      username: <span class="string">'kmac007'</span>,</div><div class="line">      password: <span class="string">'kmac007'</span></div><div class="line">    &#125;,</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(ret); <span class="comment">// &#123;status: 0&#125;</span></div><div class="line">    &#125;,</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'出错了'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="实现加载更多的功能，后端在本地使用server-mock来模拟数据"><a href="#实现加载更多的功能，后端在本地使用server-mock来模拟数据" class="headerlink" title="实现加载更多的功能，后端在本地使用server-mock来模拟数据"></a>实现加载更多的功能，后端在本地使用server-mock来模拟数据</h1><p>前端部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 100%;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">      padding: 10px;</span></div><div class="line"><span class="undefined">      margin-top: 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#ct</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#btn</span> &#123;</span></div><div class="line"><span class="undefined">      border-radius: 5px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      width: 80px;</span></div><div class="line"><span class="undefined">      padding: 10px;</span></div><div class="line"><span class="undefined">      margin: 10px auto;</span></div><div class="line"><span class="undefined">      border: 1px solid palevioletred;</span></div><div class="line"><span class="undefined">      color: palevioletred;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line">    加载更多</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> ct = <span class="built_in">document</span>.getElementById(<span class="string">"ct"</span>)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> pageIdx = <span class="number">2</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> isDataArrive = <span class="literal">true</span></span></div><div class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="undefined">      e.preventDefault()</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (!isDataArrive) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      isDataArrive = <span class="literal">false</span></span></div><div class="line"><span class="undefined">      ajax(&#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'/loadMore'</span>, <span class="comment">//接口地址</span></span></div><div class="line"><span class="javascript">        type: <span class="string">'get'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">          index: pageIdx,</span></div><div class="line"><span class="undefined">          length: 6</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="undefined">          renderPage(results)</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"error"</span>)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">renderPage</span>(<span class="params">news</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span></div><div class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; news.length; i++) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">        node.innerText = news[i]</span></div><div class="line"><span class="undefined">        fragment.appendChild(node)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">      ct.appendChild(fragment)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></div><div class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> results = <span class="built_in">JSON</span>.parse(xhr.responseText)</span></div><div class="line"><span class="undefined">            opts.success(results)</span></div><div class="line"><span class="undefined">            pageIdx += 6</span></div><div class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="undefined">            opts.error()</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isDataArrive = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> dataStr = <span class="string">''</span></span></div><div class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</span></div><div class="line"><span class="javascript">        dataStr += key + <span class="string">"="</span> + opts.data[key] + <span class="string">"&amp;"</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">      dataStr = dataStr.substr(0, dataStr.length - 1)</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"get"</span>) &#123;</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">"get"</span>, opts.url + <span class="string">"?"</span> + dataStr, <span class="literal">true</span>)</span></div><div class="line"><span class="undefined">        xhr.send()</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"post"</span>) &#123;</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">"post"</span>, opts.url, <span class="literal">true</span>)</span></div><div class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span></div><div class="line"><span class="undefined">        xhr.send(dataStr)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>后端部分，采用server-mock<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载更多</span></div><div class="line">router.get(<span class="string">'/loadMore'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> curIdx = req.query.index</div><div class="line">  <span class="keyword">var</span> len = req.query.length</div><div class="line">  <span class="keyword">var</span> data = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    data.push(<span class="string">'内容'</span> + (<span class="built_in">parseInt</span>(curIdx) + i))</div><div class="line">  &#125;</div><div class="line">  res.send(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？"><a href="#前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？" class="headerlink" title="前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？"></a>前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？</h1><p>前后端开发联调需要注意的事情：</p>
<ul>
<li>约定数据：需要传输的数据及其数据类型</li>
<li>约定接口：确定接口名称及请求响应的格式，请求的参数名称、响应的数据格式</li>
<li>根据这些约定整理成接口文档</li>
</ul>
<p>如何mock数据：参照接口文档，使用假数据来验证接口和页面响应的正确性。</p>
<ul>
<li>如果有线上接口，可以根据线上接口来测试</li>
<li>可以使用mock工具来mock数据。</li>
<li>也可以通过node express搭建本地服务器，写脚本提供临时数据。</li>
<li>也可以直接将mock数据写入代码中，但缺点是联调需要做的改动较多，接口文档变化需要手动刷新。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ajax是什么-有何作用&quot;&gt;&lt;a href=&quot;#Ajax是什么-有何作用&quot; class=&quot;headerlink&quot; title=&quot;Ajax是什么?有何作用&quot;&gt;&lt;/a&gt;Ajax是什么?有何作用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;AJax为“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用是：无需重新加载页面即可与服务器交换数据。&lt;/p&gt;
&lt;p&gt;AJAX 是一种用于创建快速动态网页的技术。&lt;br&gt;通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术带来了不错的用户体验。&lt;/p&gt;
&lt;p&gt;而传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>闭包、定时器与BOM</title>
    <link href="https://www.kmac007.com/2017/%E9%97%AD%E5%8C%85%E3%80%81%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8EBOM.html"/>
    <id>https://www.kmac007.com/2017/闭包、定时器与BOM.html</id>
    <published>2017-04-05T04:36:21.000Z</published>
    <updated>2017-08-27T08:21:08.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>JavaScript变量作用域有两种，分别是全局的作用域和函数作用域，JavaScript函数的局部变量可以直接读取全局变量。而函数外部变量并不能读取函数内的局部变量，但是通过闭包，可以在函数外部访问到内部的变量。</p>
<p>JavaScript作用域链：子对象会一级一级的向上查找父对象的变量，父对象的所有变量对子对象都是可见的，反之则不成立。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> local = <span class="number">1</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + local)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo(<span class="number">2</span>)</div><div class="line">bar()</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如上，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> local = <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x + local)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是一个闭包</p>
<blockquote>
<p>即闭包指的是函数和函数内部能访问到的变量的总和。</p>
</blockquote>
<p>闭包的作用：</p>
<ol>
<li>暴露一个可以访问局部变量的函数</li>
<li>隐藏一个变量，不让其他人直接访问这个变量</li>
</ol>
<h1 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h1><p>写一个函数判断是否首次加载</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断是否首次加载</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//声明一个_list，外部无法直接访问与修改_list</span></div><div class="line">  <span class="keyword">var</span> _arr = []</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_arr.indexOf(id) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      _arr.push(id)</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isFirstLoad = firstLoad()</div><div class="line"></div><div class="line">isFirstLoad(<span class="number">10</span>)</div><div class="line">isFirstLoad(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h1 id="修改代码让fnArr-i-输出-i。使用两种以上的方法"><a href="#修改代码让fnArr-i-输出-i。使用两种以上的方法" class="headerlink" title="修改代码让fnArr[i]() 输出 i。使用两种以上的方法"></a>修改代码让<code>fnArr[i]()</code> 输出 i。使用<strong>两种以上的</strong>方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">    fnArr[i] =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	    <span class="keyword">return</span> i;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">// 输出10</span></div></pre></td></tr></table></figure>
<p>代码的输出结果为10<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法一</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    fnArr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;(i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法二</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;(i));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法三</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  <span class="comment">//使用ES6的let语法</span></div><div class="line">  fnArr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure>
<h1 id="封装一个汽车对象，可以通过如下方式获取汽车状态"><a href="#封装一个汽车对象，可以通过如下方式获取汽车状态" class="headerlink" title="封装一个汽车对象，可以通过如下方式获取汽车状态"></a>封装一个汽车对象，可以通过如下方式获取汽车状态</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> speed = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSpeed</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    speed = s</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(speed)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">accelerate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    speed += <span class="number">10</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decelerate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    speed &gt; <span class="number">0</span> ? speed -= <span class="number">10</span> : speed</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getStatus</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (speed &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"stop"</span>);</div><div class="line">      speed = <span class="literal">null</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (speed &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"running"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    setSpeed: setSpeed,</div><div class="line">    getSpeed: getSpeed,</div><div class="line">    accelerate: accelerate,</div><div class="line">    decelerate: decelerate,</div><div class="line">    getStatus: getStatus</div><div class="line">  &#125;</div><div class="line">&#125;)()</div><div class="line">Car.setSpeed(<span class="number">30</span>);</div><div class="line">Car.getSpeed(); <span class="comment">//30</span></div><div class="line">Car.accelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//40;</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//20</span></div><div class="line">Car.getStatus(); <span class="comment">// 'running';</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getStatus(); <span class="comment">//'stop';</span></div><div class="line"><span class="comment">//Car.speed;  //error</span></div></pre></td></tr></table></figure>
<h1 id="下面这段代码输出结果是-为什么"><a href="#下面这段代码输出结果是-为什么" class="headerlink" title="下面这段代码输出结果是? 为什么?"></a>下面这段代码输出结果是? 为什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> a ;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//2</span></div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果为1,3,2 因为setTimeout()会在程序的最后执行，前面声明a并赋值，重复声明不会改变a的值, setTimeOut异步</p>
</blockquote>
<h1 id="下面这段代码输出结果是-为什么-1"><a href="#下面这段代码输出结果是-为什么-1" class="headerlink" title="下面这段代码输出结果是? 为什么?"></a>下面这段代码输出结果是? 为什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    flag = <span class="literal">false</span>;</div><div class="line">&#125;,<span class="number">0</span>) <span class="comment">//原本会在程序的末尾执行，但由于while是个死循环，程序不会往下执行，故setTimeout也不会执行</span></div><div class="line"><span class="keyword">while</span>(flag)&#123;&#125; <span class="comment">//flag永远是true,死循环</span></div><div class="line"><span class="built_in">console</span>.log(flag); <span class="comment">//不会执行</span></div></pre></td></tr></table></figure>
<h1 id="下面这段代码输出？如何输出delayer-0-delayer-1-（使用闭包来实现）"><a href="#下面这段代码输出？如何输出delayer-0-delayer-1-（使用闭包来实现）" class="headerlink" title="下面这段代码输出？如何输出delayer: 0, delayer:1...（使用闭包来实现）"></a>下面这段代码输出？如何输出<code>delayer: 0, delayer:1...</code>（使用闭包来实现）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i);</div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出 0,1,2,3,4 delayer: 5, delayer: 5...</span></div></pre></td></tr></table></figure>
<p>修改：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;)(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出0,1,2,3,4 delayer: 0, delayer: 1, delayer: 2, delayer: 3, delayer: 4,</span></div></pre></td></tr></table></figure></p>
<h1 id="如何获取元素的真实宽高"><a href="#如何获取元素的真实宽高" class="headerlink" title="如何获取元素的真实宽高"></a>如何获取元素的真实宽高</h1><p>使用window.getComputedStyle()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var ele = doutment.getElementById(&quot;test&quot;)</div><div class="line">window.getComputedStyle(ele).width //获取id为test元素的宽</div><div class="line">window.getComputedStyle(ele).height //获取id为test元素的高</div></pre></td></tr></table></figure></p>
<h1 id="URL如何编码解码？为什么要编码？"><a href="#URL如何编码解码？为什么要编码？" class="headerlink" title="URL如何编码解码？为什么要编码？"></a>URL如何编码解码？为什么要编码？</h1><p>JavaScript提供四个URL的编码/解码方法。</p>
<ol>
<li>decodeURI()</li>
<li>decodeURIComponent()</li>
<li>encodeURI()</li>
<li>encodeURIComponent()<br>区别</li>
</ol>
<ul>
<li><p>encodeURI方法不会对下列字符编码</p>
<ol>
<li>ASCII字母</li>
<li>数字</li>
<li>~!@#$&amp;*()=:/,;?+’</li>
</ol>
</li>
<li><p>encodeURIComponent方法不会对下列字符编码</p>
<ol>
<li>ASCII字母</li>
<li>数字</li>
<li>~!*()’</li>
</ol>
</li>
</ul>
<p>所以encodeURIComponent比encodeURI编码的范围更大。<br>之所以要进行编码，是因为URL中有些字符会引起歧义。</p>
<h1 id="补全如下函数，判断用户的浏览器类型"><a href="#补全如下函数，判断用户的浏览器类型" class="headerlink" title="补全如下函数，判断用户的浏览器类型"></a>补全如下函数，判断用户的浏览器类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroid</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/Android/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIphone</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iPhone/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIpad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iPad/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIOS</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iOS/i</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭包&lt;/h1&gt;&lt;p&gt;JavaScript变量作用域有两种，分别是全局的作用域和函数作用域，JavaScript函数的局部变量可以直接读取全局变量。而函数外部变量并不能读取函数内的局部变量，但是通过闭包，可以在函数外部访问到内部的变量。&lt;/p&gt;
&lt;p&gt;JavaScript作用域链：子对象会一级一级的向上查找父对象的变量，父对象的所有变量对子对象都是可见的，反之则不成立。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + local)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = foo(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="BOM" scheme="https://www.kmac007.com/tags/BOM/"/>
    
      <category term="闭包" scheme="https://www.kmac007.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="定时器" scheme="https://www.kmac007.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件</title>
    <link href="https://www.kmac007.com/2017/DOM%E4%BA%8B%E4%BB%B6.html"/>
    <id>https://www.kmac007.com/2017/DOM事件.html</id>
    <published>2017-04-01T02:36:21.000Z</published>
    <updated>2017-08-27T02:46:09.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM0级事件和DOM2级事件"><a href="#DOM0级事件和DOM2级事件" class="headerlink" title="DOM0级事件和DOM2级事件"></a>DOM0级事件和DOM2级事件</h1><ul>
<li>DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性。每个元素（包括window 和document）都有自己的事件处理程序属性，这些属性通常全部小写，如：onclick；同属性多次赋值的话，后面的属性会覆盖前面的属性。删除事件处理程序只需要将属性值设置为null即可，具有跨浏览器优势。这种方式添加的事件处理程序会在事件流的冒泡阶段处理。</li>
<li>DOM2级事件处理程序，定义了两个方法，用于处理指定和删除事件处理程序：addEventListener(), removeEventListener()。都接受3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值（默认为false）。最后一个布尔参数如果是true，表示在捕获阶段调用处理程序，而false表示在冒泡阶段调用事件处理程序。可以添加多个事件处理程序。但IE8及更早的版本不支持。</li>
</ul>
<a id="more"></a>
<h1 id="attachEvent与addEventListener的区别？"><a href="#attachEvent与addEventListener的区别？" class="headerlink" title="attachEvent与addEventListener的区别？"></a>attachEvent与addEventListener的区别？</h1><p>区别如下：</p>
<ol>
<li>attachEvent()接受两个参数：事件处理程序名称与事件处理程序函数；而     addEventListener()接受三个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值（默认值为false可忽略）。</li>
<li>事件处理程序的执行顺序不同：通过attachEvent()给某元素添加多个对于同一事件的处理程序时，它们的执行顺序是按照最后添加的先执行。 对于addEventListener()的事件处理程序则是按照添加顺序执行。</li>
<li>由于IE8及更早版本只支持事件冒泡，所用通过attachEvent()添加的事件处理程序都会被添加到冒泡阶段，而addEventListener()可以通过第三个参数布尔值来确定处理程序是在捕获阶段还是冒泡阶段调用。</li>
<li>作用域: 使用attachEvent()，事件处理程序会在全局作用域中运行，因此this等于window; 而addEventListener()的作用域是元素本身，this是指的是触发元素。</li>
<li>第一个参数不同：attachEvent()第一个参数为”on”+事件名，而addEventListener()的第一个参数为事件名。</li>
</ol>
<h1 id="IE事件冒泡与DOM2事件"><a href="#IE事件冒泡与DOM2事件" class="headerlink" title="IE事件冒泡与DOM2事件"></a>IE事件冒泡与DOM2事件</h1><h2 id="IE事件冒泡"><a href="#IE事件冒泡" class="headerlink" title="IE事件冒泡"></a>IE事件冒泡</h2><p><img style="margin: auto;" src="http://7xpvnv.com2.z0.glb.qiniucdn.com/4bc08396-78b0-48e3-a8bb-f846e86e9d73" alt="IE事件冒泡"></p>
<p>对于IE事件冒泡：即事件开始时由最具体的元素接受，然后逐级向上传播到较为不具体的节点。<br>如图，如果单击了页面中的<div>元素，那么click事件就会按照图中1、2、3、4的顺序传播。</div></p>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p><img style="margin: auto;" src="http://7xpvnv.com2.z0.glb.qiniucdn.com/8ddedb2e-f55e-4872-bd36-79c44b71d3f1" alt="DOM事件流"></p>
<p>对于DOM事件流：“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件作出响应。当点击<div>元素时，会按照如上图所示的顺序触发事件。</div></p>
<h1 id="阻止事件冒泡与阻止默认事件"><a href="#阻止事件冒泡与阻止默认事件" class="headerlink" title="阻止事件冒泡与阻止默认事件"></a>阻止事件冒泡与阻止默认事件</h1><ul>
<li>标准浏览器<ul>
<li>阻止冒泡: e.stopPropagation()</li>
<li>阻止默认事件：e.preventDefault()</li>
</ul>
</li>
<li>IE浏览器<ul>
<li>阻止冒泡：event.cancelBubble = true</li>
<li>阻止默认事件：event.returnValue = false</li>
</ul>
</li>
</ul>
<h1 id="有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"><a href="#有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容" class="headerlink" title="有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"></a>有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"ct"</span>&gt;</div><div class="line">    &lt;li&gt;这里是&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;kmac007&lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;小站&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">&lt;/u</span>l&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//todo ...</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myLi = <span class="built_in">document</span>.querySelector(<span class="string">".ct"</span>);</div><div class="line">myLi.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(event.target.innerText);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="补全代码，要求："><a href="#补全代码，要求：" class="headerlink" title="补全代码，要求："></a>补全代码，要求：</h1><ul>
<li>当点击按钮开头添加时在</li><li>这里是</li>元素前添加一个新元素，内容为用户输入的非空字符串；当点击结尾添加时在最后一个 li 元素后添加用户输入的非空字符串.
<li>当点击每一个元素li时控制台展示该元素的文本内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>kmac007<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>小站<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt-add-content"</span> <span class="attr">placeholder</span>=<span class="string">"添加内容"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-start"</span>&gt;</span>开头添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-end"</span>&gt;</span>结尾添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">//你的代码</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> ct = $(<span class="string">".ct"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btnStart = $(<span class="string">"#btn-add-start"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btnEnd = $(<span class="string">"#btn-add-end"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> iptContent = $(<span class="string">".ipt-add-content"</span>)</span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(e.target.innerText)</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  btnStart.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (!iptContent.value) &#123;</span></div><div class="line"><span class="javascript">      alert(<span class="string">"请输入内容"</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">      newLi.innerText = iptContent.value</span></div><div class="line"><span class="undefined">      ct.insertBefore(newLi, ct.childNodes[0])</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  btnEnd.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (!iptContent.value) &#123;</span></div><div class="line"><span class="javascript">      alert(<span class="string">"请输入内容"</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">      newLi.innerText = iptContent.value</span></div><div class="line"><span class="undefined">      ct.appendChild(newLi)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"><a href="#补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。" class="headerlink" title="补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"></a>补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/Mourinho.png"</span>&gt;</span>鼠标放置查看图片1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/ibr.png"</span>&gt;</span>鼠标放置查看图片2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/rooney.png"</span>&gt;</span>鼠标放置查看图片3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">//你的代码</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> ct = $(<span class="string">".ct"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> pre = $(<span class="string">".img-preview"</span>)</span></div><div class="line"><span class="javascript">  <span class="comment">//鼠标移入事件</span></span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span></div><div class="line"><span class="javascript">      img.src = e.target.getAttribute(<span class="string">"data-img"</span>)</span></div><div class="line"><span class="undefined">      pre.appendChild(img)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  <span class="comment">//鼠标移出事件</span></span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></div><div class="line"><span class="javascript">      pre.innerHTML = <span class="string">''</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM0级事件和DOM2级事件&quot;&gt;&lt;a href=&quot;#DOM0级事件和DOM2级事件&quot; class=&quot;headerlink&quot; title=&quot;DOM0级事件和DOM2级事件&quot;&gt;&lt;/a&gt;DOM0级事件和DOM2级事件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性。每个元素（包括window 和document）都有自己的事件处理程序属性，这些属性通常全部小写，如：onclick；同属性多次赋值的话，后面的属性会覆盖前面的属性。删除事件处理程序只需要将属性值设置为null即可，具有跨浏览器优势。这种方式添加的事件处理程序会在事件流的冒泡阶段处理。&lt;/li&gt;
&lt;li&gt;DOM2级事件处理程序，定义了两个方法，用于处理指定和删除事件处理程序：addEventListener(), removeEventListener()。都接受3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值（默认为false）。最后一个布尔参数如果是true，表示在捕获阶段调用处理程序，而false表示在冒泡阶段调用事件处理程序。可以添加多个事件处理程序。但IE8及更早的版本不支持。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="DOM" scheme="https://www.kmac007.com/tags/DOM/"/>
    
      <category term="事件" scheme="https://www.kmac007.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>DOM操作</title>
    <link href="https://www.kmac007.com/2017/DOM%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/DOM操作.html</id>
    <published>2017-03-29T06:26:31.000Z</published>
    <updated>2017-08-26T14:06:36.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM对象的innerText和innerHTML有什么区别？"><a href="#DOM对象的innerText和innerHTML有什么区别？" class="headerlink" title="DOM对象的innerText和innerHTML有什么区别？"></a>DOM对象的innerText和innerHTML有什么区别？</h1><ul>
<li><p>innerText返回元素内所包含的文本内容，在多层次的时候会按照元素的深浅顺序拼接其内容</p>
</li>
<li><p>innerHTML返回的是元素的HTML结构</p>
</li>
</ul>
<h1 id="elem-children和elem-childNodes的区别"><a href="#elem-children和elem-childNodes的区别" class="headerlink" title="elem.children和elem.childNodes的区别"></a>elem.children和elem.childNodes的区别</h1><p>elem.children与elem.childNodes 两者都是返回子节点；前者返回的是节点集合后者返回指定节点的子节点的节点集合包括元素、文本、注释等</p>
<a id="more"></a>
<h1 id="查询元素有几种常见的方法？ES5的元素选择方法是什么"><a href="#查询元素有几种常见的方法？ES5的元素选择方法是什么" class="headerlink" title="查询元素有几种常见的方法？ES5的元素选择方法是什么?"></a>查询元素有几种常见的方法？ES5的元素选择方法是什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">常见的方法有：</div><div class="line"></div><div class="line"><span class="number">1</span>、getElementById()</div><div class="line"><span class="number">2</span>、getElementsByTagName()</div><div class="line"><span class="number">3</span>、getElementsByClassName()</div><div class="line"><span class="number">4</span>、getElementsByName()</div><div class="line"></div><div class="line">ES5的元素选择方法是：</div><div class="line"></div><div class="line"><span class="number">1.</span> querySelector()</div><div class="line"><span class="number">2.</span> querySelectorAll()</div></pre></td></tr></table></figure>
<h1 id="如何创建一个元素？如何给元素设置属性？如何删除属性"><a href="#如何创建一个元素？如何给元素设置属性？如何删除属性" class="headerlink" title="如何创建一个元素？如何给元素设置属性？如何删除属性"></a>如何创建一个元素？如何给元素设置属性？如何删除属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>) <span class="comment">//创建元素</span></div><div class="line">s.setAttribute(<span class="string">"name"</span>,<span class="string">"DK"</span>) <span class="comment">// 设置属性</span></div><div class="line">s.removeAttribute(<span class="string">"name"</span>) <span class="comment">//删除属性</span></div></pre></td></tr></table></figure>
<h1 id="如何给页面元素添加子元素？如何删除页面元素下的子元素"><a href="#如何给页面元素添加子元素？如何删除页面元素下的子元素" class="headerlink" title="如何给页面元素添加子元素？如何删除页面元素下的子元素?"></a>如何给页面元素添加子元素？如何删除页面元素下的子元素?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">element.appendChild() <span class="comment">//给element添加子元素</span></div><div class="line">element.removeChild(child) <span class="comment">//删除element元素下的子元素child</span></div></pre></td></tr></table></figure>
<h1 id="element-classList有哪些方法？如何判断一个元素的-class-列表中是包含某个-class？如何添加一个class？如何删除一个class"><a href="#element-classList有哪些方法？如何判断一个元素的-class-列表中是包含某个-class？如何添加一个class？如何删除一个class" class="headerlink" title="element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?"></a>element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">add(class1, class2, ...) <span class="comment">//在元素中添加一个或多个类名，如指定的类名已存在，则不会添加</span></div><div class="line">contains(<span class="class"><span class="keyword">class</span>) //返回布尔值，判断指定的类名是否存在</span></div><div class="line"><span class="class"><span class="title">item</span>(<span class="title">index</span>) //返回类名在元素中的索引</span></div><div class="line"><span class="class"><span class="title">remove</span>(<span class="title">class1</span>, <span class="title">class2</span>, ...) //移除元素中的一个或多个类名，移除不存在的类名不会报错</span></div><div class="line"><span class="class"><span class="title">toggle</span>(<span class="title">class</span>, <span class="title">true</span>|<span class="title">false</span>) //在元素中切换类名，第一个参数为要在元素中移除的类名，并返回<span class="title">false</span>。如果类名不存在则会在元素中添加类名，并返回<span class="title">true</span>。第二个是可选参数，是个布尔值用于设置元素是否强制添加或移除类，不管类名是否存在。</span></div></pre></td></tr></table></figure>
<p>利用contains()判断是否包含某个class,用add()和remove()添加和删除class</p>
<h1 id="如何选中如下代码所有的li元素？-如何选中btn元素？"><a href="#如何选中如下代码所有的li元素？-如何选中btn元素？" class="headerlink" title="如何选中如下代码所有的li元素？ 如何选中btn元素？"></a>如何选中如下代码所有的li元素？ 如何选中btn元素？</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-tabs"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list1<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list2<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list3<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>选中所有的li:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)</div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</div></pre></td></tr></table></figure></p>
<p>选中btn元素:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>]</div><div class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"btn"</span>)[<span class="number">0</span>]</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</div><div class="line">doucument.querySelectorAll(<span class="string">".btn"</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM对象的innerText和innerHTML有什么区别？&quot;&gt;&lt;a href=&quot;#DOM对象的innerText和innerHTML有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;DOM对象的innerText和innerHTML有什么区别？&quot;&gt;&lt;/a&gt;DOM对象的innerText和innerHTML有什么区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;innerText返回元素内所包含的文本内容，在多层次的时候会按照元素的深浅顺序拼接其内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;innerHTML返回的是元素的HTML结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;elem-children和elem-childNodes的区别&quot;&gt;&lt;a href=&quot;#elem-children和elem-childNodes的区别&quot; class=&quot;headerlink&quot; title=&quot;elem.children和elem.childNodes的区别&quot;&gt;&lt;/a&gt;elem.children和elem.childNodes的区别&lt;/h1&gt;&lt;p&gt;elem.children与elem.childNodes 两者都是返回子节点；前者返回的是节点集合后者返回指定节点的子节点的节点集合包括元素、文本、注释等&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="DOM" scheme="https://www.kmac007.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>引用类型及对象拷贝</title>
    <link href="https://www.kmac007.com/2017/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D.html"/>
    <id>https://www.kmac007.com/2017/引用类型及对象拷贝.html</id>
    <published>2017-03-25T05:36:21.000Z</published>
    <updated>2017-08-26T13:58:53.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用类型与非引用类型"><a href="#引用类型与非引用类型" class="headerlink" title="引用类型与非引用类型"></a>引用类型与非引用类型</h1><p>非引用类型：Undefined, Null, Number, String, Boolean</p>
<p>引用类型有: Function, Object, Array, Date, RegExp</p>
<h1 id="如下代码输出什么？为什么"><a href="#如下代码输出什么？为什么" class="headerlink" title="如下代码输出什么？为什么"></a>如下代码输出什么？为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj1 == obj2);  <span class="comment">//false 这里是判断obj1与obj2是否指向相同的对象</span></div><div class="line"><span class="built_in">console</span>.log(obj1 = obj2);  <span class="comment">//&#123;a:1, b:2&#125; 使obj1的指针指向obj2</span></div><div class="line"><span class="built_in">console</span>.log(obj1 == obj2);  <span class="comment">//true 由于obj1, obj2指向相同的对象，所以为true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="如下代码输出什么-为什么"><a href="#如下代码输出什么-为什么" class="headerlink" title="如下代码输出什么? 为什么"></a>如下代码输出什么? 为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span></div><div class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</div><div class="line"><span class="keyword">var</span> d = [a, b, c]</div><div class="line"></div><div class="line"><span class="keyword">var</span> aa = a</div><div class="line"><span class="keyword">var</span> bb = b</div><div class="line"><span class="keyword">var</span> cc = c</div><div class="line"><span class="keyword">var</span> dd = d</div><div class="line"></div><div class="line">a = <span class="number">11</span></div><div class="line">b = <span class="number">22</span></div><div class="line">c.name = <span class="string">'hello'</span></div><div class="line">d[<span class="number">2</span>][<span class="string">'age'</span>] = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(aa)  <span class="comment">//1, 将a的值赋予aa</span></div><div class="line"><span class="built_in">console</span>.log(bb)  <span class="comment">//2, 将b的值赋予bb</span></div><div class="line"><span class="built_in">console</span>.log(cc)  <span class="comment">//&#123; name: 'hello', age: 3 &#125;, cc与c指向同一个对象,改变c与会使cc改变</span></div><div class="line"><span class="built_in">console</span>.log(dd)  <span class="comment">// [1, 2, &#123; name: 'hello', age: 3 &#125;], dd与d指向同一个对象,改变d同样会使dd改变</span></div></pre></td></tr></table></figure>
<h1 id="如下代码输出什么-为什么-1"><a href="#如下代码输出什么-为什么-1" class="headerlink" title="如下代码输出什么? 为什么"></a>如下代码输出什么? 为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  ++n</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  ++obj.age</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1(a)</div><div class="line">f2(c)</div><div class="line">f1(c.age)</div><div class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1, 因为f1是按值传递，仅是将值传递进去，不会改变全局变量a</span></div><div class="line"><span class="built_in">console</span>.log(c)  <span class="comment">//&#123; name: 'dk', age: 3 &#125;, f2(c)是引用传递，变量指针指向obj, 会改变c中的值，而f1(c.age)为值传递，同理不会改变c</span></div></pre></td></tr></table></figure>
<h1 id="过滤如下数组，只保留正数，直接在原数组上操作"><a href="#过滤如下数组，只保留正数，直接在原数组上操作" class="headerlink" title="过滤如下数组，只保留正数，直接在原数组上操作"></a>过滤如下数组，只保留正数，直接在原数组上操作</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &lt;= <span class="number">0</span>) &#123;</div><div class="line">      arr.splice(i, <span class="number">1</span>);</div><div class="line">      filter(arr);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">filter(arr)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [3,1,2]</span></div></pre></td></tr></table></figure>
<h1 id="过滤如下数组，只保留正数，原数组不变，生成新数组"><a href="#过滤如下数组，只保留正数，原数组不变，生成新数组" class="headerlink" title="过滤如下数组，只保留正数，原数组不变，生成新数组"></a>过滤如下数组，只保留正数，原数组不变，生成新数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = []</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">      newArr.push(arr[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr2 = filter(arr)</div><div class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// [3,1,2]</span></div><div class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [3,1,0,-1,-2,2,-5]</span></div></pre></td></tr></table></figure>
<h1 id="对象深拷贝的几种方式"><a href="#对象深拷贝的几种方式" class="headerlink" title="对象深拷贝的几种方式"></a>对象深拷贝的几种方式</h1><blockquote>
<p>注意，ES6中Object.assign为浅拷贝</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">"robert"</span>,</div><div class="line">  age: <span class="number">3</span>,</div><div class="line">  child: &#123;</div><div class="line">    name: <span class="string">"bob"</span>,</div><div class="line">    age: <span class="number">3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*方法一*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy1</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newObj = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] !== <span class="string">'object'</span>) &#123;</div><div class="line">        newObj[key] = obj[key]</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newObj[key] = deepCopy1(obj[key])</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newObj</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj2 = deepCopy1(obj)</div><div class="line"><span class="built_in">console</span>.log(obj2)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*方法二*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy2</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</div><div class="line">  <span class="keyword">return</span> newObj</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引用类型与非引用类型&quot;&gt;&lt;a href=&quot;#引用类型与非引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型与非引用类型&quot;&gt;&lt;/a&gt;引用类型与非引用类型&lt;/h1&gt;&lt;p&gt;非引用类型：Undefined, Null, Number, String, Boolean&lt;/p&gt;
&lt;p&gt;引用类型有: Function, Object, Array, Date, RegExp&lt;/p&gt;
&lt;h1 id=&quot;如下代码输出什么？为什么&quot;&gt;&lt;a href=&quot;#如下代码输出什么？为什么&quot; class=&quot;headerlink&quot; title=&quot;如下代码输出什么？为什么&quot;&gt;&lt;/a&gt;如下代码输出什么？为什么&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 == obj2);  &lt;span class=&quot;comment&quot;&gt;//false 这里是判断obj1与obj2是否指向相同的对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 = obj2);  &lt;span class=&quot;comment&quot;&gt;//&amp;#123;a:1, b:2&amp;#125; 使obj1的指针指向obj2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 == obj2);  &lt;span class=&quot;comment&quot;&gt;//true 由于obj1, obj2指向相同的对象，所以为true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="引用类型" scheme="https://www.kmac007.com/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="对象拷贝" scheme="https://www.kmac007.com/tags/%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
</feed>
