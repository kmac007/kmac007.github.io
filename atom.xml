<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kmac007</title>
  <subtitle>kmac007&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kmac007.com/"/>
  <updated>2017-08-27T13:35:51.689Z</updated>
  <id>https://www.kmac007.com/</id>
  
  <author>
    <name>kmac007</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery学习使用笔记</title>
    <link href="https://www.kmac007.com/2017/jQuery%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>https://www.kmac007.com/2017/jQuery学习使用笔记.html</id>
    <published>2017-04-13T10:20:14.000Z</published>
    <updated>2017-08-27T13:35:51.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="库vs框架"><a href="#库vs框架" class="headerlink" title="库vs框架"></a>库vs框架</h1><ul>
<li>库: 对原生代码进行一个完整的封装，通过封装解决许多兼容性的问题。用户可以简易的调用API来构建项目，而不需要考虑许多兼容性问题。</li>
<li>框架：会基于自身的特点向用户提供一套完整的模版，用户需要按照框架规范来构建项目。</li>
<li>类比来说：前端库就像我们家里的工具箱，里面有锯子、锤子等工具，需要时，我们从工具箱中取工具；而框架像是房子的骨架，我们通过给房子添加建材等，使其完整。</li>
</ul>
<h1 id="jQuery的作用"><a href="#jQuery的作用" class="headerlink" title="jQuery的作用"></a>jQuery的作用</h1><p>jQuery是JavaScript的一个类库，仍是js，jQuery主要用来简化原生js的各种操作以及解决各种浏览器之间的兼容性。jQuery能办到的事情原生js都能办到。<br>通常来说jQuery有以下几个功能：</p>
<ol>
<li>方便快捷获取DOM元素</li>
<li>动态修改页面样式、动态改变DOM内容</li>
<li>解决跨浏览器兼容</li>
<li>响应用户的交互操作</li>
<li>为页面添加动态效果</li>
<li>统一Ajax操作</li>
<li>简化常见的JavaScript操作</li>
</ol>
<a id="more"></a>
<h1 id="与原生DOM对象相互转换"><a href="#与原生DOM对象相互转换" class="headerlink" title="与原生DOM对象相互转换"></a>与原生DOM对象相互转换</h1><p>DOM对象转jQuery对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)  <span class="comment">//通过$()将DOM对象包裹起来转换成jQuery对象</span></div></pre></td></tr></table></figure>
<p>jQuery对象转DOM对象</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>通过类数组下标方式转换成DOM对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".ct&gt;li"</span>)[<span class="number">0</span>]</div><div class="line">$(<span class="string">".ct&gt;li"</span>).eq(<span class="number">0</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<ul>
<li>通过get方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".ct&gt;li"</span>).get(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><h2 id="on"><a href="#on" class="headerlink" title="on"></a>on</h2><p>on()为事件绑定的首选方法 在被选元素及子元素上添加一个或多个事件处理程序<br>语法: $(selector).on(event,childSelector,data,function,map)<br>参数:</p>
<ul>
<li>event:必需。规定要从被选元素添加的一个或多个事件或命名空间。由空格分隔多个事件值。必须是有效的事件</li>
<li>data:可选。规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）。</li>
<li>function:可选。规定当事件发生时运行的函数。</li>
<li>map:规定事件映射 ({event:function, event:function, …})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。</li>
</ul>
<h2 id="off"><a href="#off" class="headerlink" title="off"></a>off</h2><p>off() 方法通常用于移除通过 on() 方法添加的事件处理程序。</p>
<h2 id="使用on绑定事件使用事件代理的写法："><a href="#使用on绑定事件使用事件代理的写法：" class="headerlink" title="使用on绑定事件使用事件代理的写法："></a>使用on绑定事件使用事件代理的写法：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  $(<span class="string">".ct"</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text())</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="展示与隐藏元素"><a href="#展示与隐藏元素" class="headerlink" title="展示与隐藏元素"></a>展示与隐藏元素</h1><p>展示元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.show( duration [, easing ] [, complete ] )</div></pre></td></tr></table></figure>
<p>隐藏元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.hide([duration ] [,easing ] [,complete ])</div></pre></td></tr></table></figure>
<p>没有参数时直接等同于直接设置选中元素display属性，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.css(<span class="string">'display'</span>, <span class="string">'none'</span>)</div><div class="line"></div><div class="line">.toggle( [duration ] [, easing ] [, complete ] )</div><div class="line"><span class="comment">//用来切换元素的隐藏、显示，类似toggleClass</span></div></pre></td></tr></table></figure>
<p>参数：</p>
<ol>
<li>duration：动画持续的时间。一个字符串或数字决定动画运行的时间。（注：默认值为”400毫秒”）</li>
<li>easing：表示过渡使用哪种缓冲函数，jQuery自身提供”linear”和”swing”,默认为”swing”</li>
<li>complete：在动画完成时执行的函数</li>
</ol>
<h1 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.animate( properties [, duration ] [, easing ] [, complete ] )</div></pre></td></tr></table></figure>
<p>properties是一个CSS属性和值的对象,动画将根据这组对象移动。 如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#clickme'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#book'</span>).animate(&#123;</div><div class="line">    opacity: <span class="number">0.25</span>,</div><div class="line">    left: <span class="string">'+=50'</span>,</div><div class="line">    height: <span class="string">'toggle'</span></div><div class="line">  &#125;, <span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Animation complete.</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>.animate( properties, options )</strong></p>
<p>options是一组包含动画选项的值的集合。 常用的选项:</p>
<ol>
<li>duration (default: 400)：一个字符串或者数字决定动画将运行多久。默认值: “normal”， 三种预定速度的字符串(“slow”, “normal”, 或 “fast”或表示动画时长的毫秒数值(如：1000) ）</li>
<li>easing (default: swing)：一个字符串，表示过渡使用哪种缓动函数。jQuery自身提供”linear” 和 “swing”，其他效果可以使用jQuery Easing Plugin插件</li>
<li>step：每个动画元素的每个动画属性将调用的函数。这个函数为修改Tween 对象提供了一个机会来改变设置中得属性值。</li>
<li>complete：在动画完成时执行的函数</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;库vs框架&quot;&gt;&lt;a href=&quot;#库vs框架&quot; class=&quot;headerlink&quot; title=&quot;库vs框架&quot;&gt;&lt;/a&gt;库vs框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;库: 对原生代码进行一个完整的封装，通过封装解决许多兼容性的问题。用户可以简易的调用API来构建项目，而不需要考虑许多兼容性问题。&lt;/li&gt;
&lt;li&gt;框架：会基于自身的特点向用户提供一套完整的模版，用户需要按照框架规范来构建项目。&lt;/li&gt;
&lt;li&gt;类比来说：前端库就像我们家里的工具箱，里面有锯子、锤子等工具，需要时，我们从工具箱中取工具；而框架像是房子的骨架，我们通过给房子添加建材等，使其完整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;jQuery的作用&quot;&gt;&lt;a href=&quot;#jQuery的作用&quot; class=&quot;headerlink&quot; title=&quot;jQuery的作用&quot;&gt;&lt;/a&gt;jQuery的作用&lt;/h1&gt;&lt;p&gt;jQuery是JavaScript的一个类库，仍是js，jQuery主要用来简化原生js的各种操作以及解决各种浏览器之间的兼容性。jQuery能办到的事情原生js都能办到。&lt;br&gt;通常来说jQuery有以下几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快捷获取DOM元素&lt;/li&gt;
&lt;li&gt;动态修改页面样式、动态改变DOM内容&lt;/li&gt;
&lt;li&gt;解决跨浏览器兼容&lt;/li&gt;
&lt;li&gt;响应用户的交互操作&lt;/li&gt;
&lt;li&gt;为页面添加动态效果&lt;/li&gt;
&lt;li&gt;统一Ajax操作&lt;/li&gt;
&lt;li&gt;简化常见的JavaScript操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://www.kmac007.com/categories/jQuery/"/>
    
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
      <category term="jQuery" scheme="https://www.kmac007.com/tags/jQuery/"/>
    
      <category term="动画" scheme="https://www.kmac007.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>跨域的几种解决方案</title>
    <link href="https://www.kmac007.com/2017/%E8%B7%A8%E5%9F%9F%E7%9A%84%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>https://www.kmac007.com/2017/跨域的的几种解决方案.html</id>
    <published>2017-04-10T06:10:14.000Z</published>
    <updated>2017-08-27T12:21:50.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>浏览器出于安全方面的考虑，只允许与本域下的接口交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。<br>所谓的同源策略指的是三个相同：</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>例如:</p>
<p><a href="https://www.kmac007.com/2017/index.html">https://www.kmac007.com/2017/index.html</a> 这个网址，协议是https，域名是kmac007.com，端口是80（默认端口可以省略）<br>对于如下网址：</p>
<ul>
<li><a href="http://www.kmac007.com/2017/index.html">http://www.kmac007.com/2017/index.html</a> 不同源(协议不同)</li>
<li><a href="https://www.kmac007.com/2017/first.html">https://www.kmac007.com/2017/first.html</a> 同源</li>
<li><a href="https://kmac007.com/2017/first.html" target="_blank" rel="external">https://kmac007.com/2017/first.html</a> 不同源（域名不同）</li>
<li><a href="https://kmac007.com:8080/2017/first.html" target="_blank" rel="external">https://kmac007.com:8080/2017/first.html</a> 不同源（端口不同）</li>
</ul>
<p>同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<a id="more"></a>
<h1 id="跨域以及跨域的几种实现方式"><a href="#跨域以及跨域的几种实现方式" class="headerlink" title="跨域以及跨域的几种实现方式"></a>跨域以及跨域的几种实现方式</h1><p>跨域指的是，突破同源策略，不同源之间进行数据传输或通信。</p>
<p>跨域有如下几种实现方式：</p>
<ol>
<li>JSONP</li>
<li>CORS：跨域资源共享（Cross-origin resource sharing）</li>
<li>document.domain</li>
<li>window.postMessage<br>等</li>
</ol>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>在JS中我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。由于script标签不受同源策略的限制，可以通过script标签向服务器请求数据。而JSONP就是通过这个特性来实现的。</p>
<p>JSONP的原理是，在网页中动态添加一个script标签，src指向接口地址，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据包裹在一个指定名字的回调函数里传回来。</p>
<p>如: script标签的src指向 ‘kmac007.com/getData?callback=jsonp’,以jsonp(data)形式的返回数据，调用页面上的jsonp函数从而获取到了data</p>
<h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前端部分:</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.src = src;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    addScriptTag(<span class="string">'http://kmac007.com/getData?callback=jsonp'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data.name)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>服务器收到这个请求后，会将数据放在回调函数的参数位置返回：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后端部分：</span></div><div class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"dk"</span>,</div><div class="line">    <span class="string">"age"</span>: <span class="string">"23"</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> cb = req.query.callback</div><div class="line">  <span class="keyword">if</span> (cb) &#123;</div><div class="line">    res.send(cb + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(data) + <span class="string">')'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.send(data)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  返回：json(&#123;"name":"dk","age":"23"&#125;)</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>很好的解决了跨域通信的问题，用户传递一个callback参数给服务器，服务器根据callback返回特定的callback包裹的数据，客户端可以随意定制自己的的函数处理返回的数据。</li>
<li>兼容性非常好，在非常古老的浏览器上也能很好的实现</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>JSONP只支持get请求而不支持其他HTTP请求，参数的形式只能做url拼接，后台取值会比较繁琐</li>
<li>存在安全隐患，动态插入<code>&lt;script&gt;</code>标签其实就是一种脚本注入。</li>
</ol>
<h2 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h2><p>Cookie是服务器写入浏览器的一小段消息，只有同源的网页才能共享。但是两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享Cookie。</p>
<p>举例来说, A网页是<code>http://www1.kmac007.com/a.html</code>，B网页是<code>html://www2.kmac007.com/b.html</code>，只要设置相同的document.domain，两个网页就可以共享Cookie。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'kmac007.com'</span></div></pre></td></tr></table></figure>
<p>现在A网页中设置一个Cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"test=1"</span></div></pre></td></tr></table></figure>
<p>网页B中就可以读取这个Cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> allCookie = <span class="built_in">document</span>.cookie</div></pre></td></tr></table></figure>
<h2 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h2><p>由HTML5引入的API,postMEssage()方法允许来自不同源的脚本采用异步方式进行有限通信。这个API为 window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源。</p>
<p>postMessage方法的第一个参数是具体的信息内容，第二个参数是接收信息的窗口源（origin）,即“协议+域名+端口”。也可以设为*，表示不限制域名，向所有窗口发送。</p>
<p>即父窗口与子窗口互相发送消息，通过message事件，监听对方的消息，实现跨域。</p>
<p>父窗口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.main input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</div><div class="line">  <span class="built_in">window</span>.frames[<span class="number">0</span>].postMessage(<span class="keyword">this</span>.value, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">//向子窗口发送信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  $(<span class="string">'.main input'</span>).value = e.data</div><div class="line">  <span class="built_in">console</span>.log(e.data);</div><div class="line">  <span class="comment">//监听子窗口发送信息的变化</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>子窗口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.parent.postMessage(<span class="keyword">this</span>.value, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">//向父窗口发送信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		$(<span class="string">'#input'</span>).value = e.data</div><div class="line">    <span class="built_in">console</span>.log(e.data);</div><div class="line">    <span class="comment">//监听父窗口的发送的信息变化</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS是一个W3C标准，全称是“跨域资源共享”(Cross-origin resource sharing)。</p>
<p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>CORS需要浏览器和服务器同时支持。目前所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>实现功能非常简单，只需要由服务器发送一个响应标头即可。它是通过客户端+服务端协作声明的方式来确保请求安全的。服务端会在HTTP请求头增加一系列HTTP请求参数（例如Acess-Control-Allow-Origin等），来限制哪些域的请求和哪些类型可以接受，而客户端在发起请求时必须声明自己的源(Origin)，否则服务器将不予处理，如果客户端不作声明，请求甚至会被浏览器直接拦截到不了服务端。服务端收到HTTP请求后会进行域的比较，只有同域的请求才会处理。</p>
<p>浏览器将CORS请求分为两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要满足以下两大条件，就属于简单请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">（1）请求方法是以下三种方法之一：</div><div class="line">- HEAD</div><div class="line">- GET</div><div class="line">- POST</div><div class="line">（2）HTTP的头信息不超过以下几种字段：</div><div class="line">- Accept</div><div class="line">- Accept-Language</div><div class="line">- Content-Language</div><div class="line">- Last-Event-ID</div><div class="line">- Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</div></pre></td></tr></table></figure></p>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理方式是不一样的。</p>
<ol>
<li>简单请求<br>对于简单请求，浏览器直接发出CORS请求。具体来说就是在头信息中，增加一个Origin字段。而Origin字段说明本次请求来自哪个源（协议+域名+端口）。服务器根据这个值，决定是否同意这次请求。如果Origin指定的源，不在许可范围内，浏览器会返回一个正常的HTTP回应。如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息 。如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http:<span class="comment">//api.kmac007.com</span></div><div class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></div><div class="line">Access-Control-Expose-Headers: showMes</div><div class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></div></pre></td></tr></table></figure>
<ol>
<li><p>非简单请求<br>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或Content-Type字段的类型是application/json。</p>
<p> 非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求。浏览器先询问服务器，当前网页所在的域名是否在服务器的虚空名单之中，一次可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就会报错。</p>
</li>
</ol>
<p>实现实例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//前端部分</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)</span></div><div class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></div><div class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span></div><div class="line"><span class="undefined">          newLi.innerText = xhr.responseText</span></div><div class="line"><span class="javascript">          <span class="built_in">document</span>.body.appendChild(newLi)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      xhr.open(<span class="string">'get'</span>, <span class="string">'http://b.kmac007.com:8080/getData'</span>, <span class="literal">true</span>)</span></div><div class="line"><span class="undefined">      xhr.send()</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后端部分</span></div><div class="line">app.get(<span class="string">'/getData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="string">"are u ok"</span></div><div class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>)</div><div class="line">  <span class="comment">// 加入响应头Access-Control-Allow-Origin</span></div><div class="line">  res.send(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h1&gt;&lt;p&gt;浏览器出于安全方面的考虑，只允许与本域下的接口交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。&lt;br&gt;所谓的同源策略指的是三个相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kmac007.com/2017/index.html&quot;&gt;https://www.kmac007.com/2017/index.html&lt;/a&gt; 这个网址，协议是https，域名是kmac007.com，端口是80（默认端口可以省略）&lt;br&gt;对于如下网址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kmac007.com/2017/index.html&quot;&gt;http://www.kmac007.com/2017/index.html&lt;/a&gt; 不同源(协议不同)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kmac007.com/2017/first.html&quot;&gt;https://www.kmac007.com/2017/first.html&lt;/a&gt; 同源&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kmac007.com/2017/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kmac007.com/2017/first.html&lt;/a&gt; 不同源（域名不同）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kmac007.com:8080/2017/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kmac007.com:8080/2017/first.html&lt;/a&gt; 不同源（端口不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
      <category term="跨域" scheme="https://www.kmac007.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://www.kmac007.com/2017/Ajax.html"/>
    <id>https://www.kmac007.com/2017/Ajax.html</id>
    <published>2017-04-07T03:10:26.000Z</published>
    <updated>2017-08-27T09:13:42.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax是什么-有何作用"><a href="#Ajax是什么-有何作用" class="headerlink" title="Ajax是什么?有何作用"></a>Ajax是什么?有何作用</h1><blockquote>
<p>AJax为“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。</p>
</blockquote>
<p>作用是：无需重新加载页面即可与服务器交换数据。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术带来了不错的用户体验。</p>
<p>而传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。</p>
<a id="more"></a>
<h1 id="用JS发起请求的几个步骤"><a href="#用JS发起请求的几个步骤" class="headerlink" title="用JS发起请求的几个步骤"></a>用JS发起请求的几个步骤</h1><h2 id="1-创建一个XMLHttpRequest对象"><a href="#1-创建一个XMLHttpRequest对象" class="headerlink" title="1. 创建一个XMLHttpRequest对象()"></a>1. 创建一个XMLHttpRequest对象()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div></pre></td></tr></table></figure>
<h2 id="2-监听请求成功后的变化"><a href="#2-监听请求成功后的变化" class="headerlink" title="2. 监听请求成功后的变化"></a>2. 监听请求成功后的变化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState== <span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xhr.responseText即服务器返回的内容（默认为字符串）</p>
<h2 id="3-设置请求参数"><a href="#3-设置请求参数" class="headerlink" title="3. 设置请求参数"></a>3. 设置请求参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"url"</span>, <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h2 id="4-发送请求"><a href="#4-发送请求" class="headerlink" title="4. 发送请求"></a>4. 发送请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send()</div></pre></td></tr></table></figure>
<p>在jQuery.ajax中对以上进行了封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="comment">//response即为响应内容</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="点击按钮，使用-ajax-获取数据，防止重复点击"><a href="#点击按钮，使用-ajax-获取数据，防止重复点击" class="headerlink" title="点击按钮，使用 ajax 获取数据，防止重复点击"></a>点击按钮，使用 ajax 获取数据，防止重复点击</h1><p>可以使用状态锁，判断数据是否到来。状态锁初始值为true，当发起一次请求后状态锁值变为false，此时，若是未获得响应的情况下重复点击，函数均被返回，等到状态码变为4即数据接收完毕，状态锁值变为true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isDataArrive = <span class="literal">true</span> <span class="comment">//默认为true</span></div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"getData"</span>)</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!isDataArrive) &#123; <span class="comment">//如果数据没有到来</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</div><div class="line">      &#125;</div><div class="line">      isDataArrive = <span class="literal">true</span> <span class="comment">// 收到响应</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.open()</div><div class="line">  xhr.send()</div><div class="line">  isDataArrive = <span class="literal">false</span> <span class="comment">//停止再次发送请求</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="简单封装一个-ajax-函数"><a href="#简单封装一个-ajax-函数" class="headerlink" title="简单封装一个 ajax 函数"></a>简单封装一个 ajax 函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">        <span class="keyword">var</span> results = <span class="built_in">JSON</span>.parse(xhr.responseText)</div><div class="line">        opts.success(results)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(xhr.status === <span class="number">404</span>)&#123;</div><div class="line">        opts.error()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> dataString = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</div><div class="line">    dataString += key + <span class="string">"="</span> + opts.data[key] + <span class="string">"&amp;"</span></div><div class="line">  &#125;</div><div class="line">  dataString = dataString.substr(<span class="number">0</span>, dataString.length - <span class="number">1</span>)</div><div class="line">  <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"get"</span>) &#123;</div><div class="line">    xhr.open(<span class="string">"get"</span>, opts.url + <span class="string">"?"</span> + dataString, <span class="literal">true</span>)</div><div class="line">    xhr.send()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"post"</span>) &#123;</div><div class="line">    xhr.open(<span class="string">"post"</span>, opts.url, <span class="literal">true</span>)</div><div class="line">    xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</div><div class="line">    xhr.send(dataString)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ajax(&#123;</div><div class="line">    url: <span class="string">'/login'</span>, <span class="comment">//接口地址</span></div><div class="line">    type: <span class="string">'get'</span>, <span class="comment">// 类型， post 或者 get,</span></div><div class="line">    data: &#123;</div><div class="line">      username: <span class="string">'kmac007'</span>,</div><div class="line">      password: <span class="string">'kmac007'</span></div><div class="line">    &#125;,</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(ret); <span class="comment">// &#123;status: 0&#125;</span></div><div class="line">    &#125;,</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'出错了'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="实现加载更多的功能，后端在本地使用server-mock来模拟数据"><a href="#实现加载更多的功能，后端在本地使用server-mock来模拟数据" class="headerlink" title="实现加载更多的功能，后端在本地使用server-mock来模拟数据"></a>实现加载更多的功能，后端在本地使用server-mock来模拟数据</h1><p>前端部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    #ct li &#123;</span></div><div class="line"><span class="undefined">      width: 100%;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">      padding: 10px;</span></div><div class="line"><span class="undefined">      margin-top: 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">      border: 1px solid #ccc;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    #ct li:hover &#123;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      color: #fff;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    #btn &#123;</span></div><div class="line"><span class="undefined">      border-radius: 5px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      width: 80px;</span></div><div class="line"><span class="undefined">      padding: 10px;</span></div><div class="line"><span class="undefined">      margin: 10px auto;</span></div><div class="line"><span class="undefined">      border: 1px solid palevioletred;</span></div><div class="line"><span class="undefined">      color: palevioletred;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line">    加载更多</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> ct = <span class="built_in">document</span>.getElementById(<span class="string">"ct"</span>)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> pageIdx = <span class="number">2</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> isDataArrive = <span class="literal">true</span></span></div><div class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="undefined">      e.preventDefault()</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (!isDataArrive) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      isDataArrive = <span class="literal">false</span></span></div><div class="line"><span class="undefined">      ajax(&#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'/loadMore'</span>, <span class="comment">//接口地址</span></span></div><div class="line"><span class="javascript">        type: <span class="string">'get'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">          index: pageIdx,</span></div><div class="line"><span class="undefined">          length: 6</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="undefined">          renderPage(results)</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"error"</span>)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">renderPage</span>(<span class="params">news</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span></div><div class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; news.length; i++) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">        node.innerText = news[i]</span></div><div class="line"><span class="undefined">        fragment.appendChild(node)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">      ct.appendChild(fragment)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></div><div class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> results = <span class="built_in">JSON</span>.parse(xhr.responseText)</span></div><div class="line"><span class="undefined">            opts.success(results)</span></div><div class="line"><span class="undefined">            pageIdx += 6</span></div><div class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="undefined">            opts.error()</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isDataArrive = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> dataStr = <span class="string">''</span></span></div><div class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</span></div><div class="line"><span class="javascript">        dataStr += key + <span class="string">"="</span> + opts.data[key] + <span class="string">"&amp;"</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">      dataStr = dataStr.substr(0, dataStr.length - 1)</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"get"</span>) &#123;</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">"get"</span>, opts.url + <span class="string">"?"</span> + dataStr, <span class="literal">true</span>)</span></div><div class="line"><span class="undefined">        xhr.send()</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"post"</span>) &#123;</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">"post"</span>, opts.url, <span class="literal">true</span>)</span></div><div class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span></div><div class="line"><span class="undefined">        xhr.send(dataStr)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>后端部分，采用server-mock<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载更多</span></div><div class="line">router.get(<span class="string">'/loadMore'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> curIdx = req.query.index</div><div class="line">  <span class="keyword">var</span> len = req.query.length</div><div class="line">  <span class="keyword">var</span> data = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    data.push(<span class="string">'内容'</span> + (<span class="built_in">parseInt</span>(curIdx) + i))</div><div class="line">  &#125;</div><div class="line">  res.send(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？"><a href="#前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？" class="headerlink" title="前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？"></a>前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？</h1><p>前后端开发联调需要注意的事情：</p>
<ul>
<li>约定数据：需要传输的数据及其数据类型</li>
<li>约定接口：确定接口名称及请求响应的格式，请求的参数名称、响应的数据格式</li>
<li>根据这些约定整理成接口文档</li>
</ul>
<p>如何mock数据：参照接口文档，使用假数据来验证接口和页面响应的正确性。</p>
<ul>
<li>如果有线上接口，可以根据线上接口来测试</li>
<li>可以使用mock工具来mock数据。</li>
<li>也可以通过node express搭建本地服务器，写脚本提供临时数据。</li>
<li>也可以直接将mock数据写入代码中，但缺点是联调需要做的改动较多，接口文档变化需要手动刷新。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ajax是什么-有何作用&quot;&gt;&lt;a href=&quot;#Ajax是什么-有何作用&quot; class=&quot;headerlink&quot; title=&quot;Ajax是什么?有何作用&quot;&gt;&lt;/a&gt;Ajax是什么?有何作用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;AJax为“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用是：无需重新加载页面即可与服务器交换数据。&lt;/p&gt;
&lt;p&gt;AJAX 是一种用于创建快速动态网页的技术。&lt;br&gt;通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术带来了不错的用户体验。&lt;/p&gt;
&lt;p&gt;而传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>闭包、定时器与BOM</title>
    <link href="https://www.kmac007.com/2017/%E9%97%AD%E5%8C%85%E3%80%81%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8EBOM.html"/>
    <id>https://www.kmac007.com/2017/闭包、定时器与BOM.html</id>
    <published>2017-04-05T04:36:21.000Z</published>
    <updated>2017-08-27T08:21:08.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>JavaScript变量作用域有两种，分别是全局的作用域和函数作用域，JavaScript函数的局部变量可以直接读取全局变量。而函数外部变量并不能读取函数内的局部变量，但是通过闭包，可以在函数外部访问到内部的变量。</p>
<p>JavaScript作用域链：子对象会一级一级的向上查找父对象的变量，父对象的所有变量对子对象都是可见的，反之则不成立。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> local = <span class="number">1</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + local)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo(<span class="number">2</span>)</div><div class="line">bar()</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如上，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> local = <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x + local)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是一个闭包</p>
<blockquote>
<p>即闭包指的是函数和函数内部能访问到的变量的总和。</p>
</blockquote>
<p>闭包的作用：</p>
<ol>
<li>暴露一个可以访问局部变量的函数</li>
<li>隐藏一个变量，不让其他人直接访问这个变量</li>
</ol>
<h1 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h1><p>写一个函数判断是否首次加载</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断是否首次加载</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//声明一个_list，外部无法直接访问与修改_list</span></div><div class="line">  <span class="keyword">var</span> _arr = []</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_arr.indexOf(id) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      _arr.push(id)</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isFirstLoad = firstLoad()</div><div class="line"></div><div class="line">isFirstLoad(<span class="number">10</span>)</div><div class="line">isFirstLoad(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h1 id="修改代码让fnArr-i-输出-i。使用两种以上的方法"><a href="#修改代码让fnArr-i-输出-i。使用两种以上的方法" class="headerlink" title="修改代码让fnArr[i]() 输出 i。使用两种以上的方法"></a>修改代码让<code>fnArr[i]()</code> 输出 i。使用<strong>两种以上的</strong>方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">    fnArr[i] =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	    <span class="keyword">return</span> i;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">// 输出10</span></div></pre></td></tr></table></figure>
<p>代码的输出结果为10<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法一</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    fnArr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;(i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法二</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;(i));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法三</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  <span class="comment">//使用ES6的let语法</span></div><div class="line">  fnArr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure>
<h1 id="封装一个汽车对象，可以通过如下方式获取汽车状态"><a href="#封装一个汽车对象，可以通过如下方式获取汽车状态" class="headerlink" title="封装一个汽车对象，可以通过如下方式获取汽车状态"></a>封装一个汽车对象，可以通过如下方式获取汽车状态</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> speed = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSpeed</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    speed = s</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(speed)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">accelerate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    speed += <span class="number">10</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decelerate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    speed &gt; <span class="number">0</span> ? speed -= <span class="number">10</span> : speed</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getStatus</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (speed &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"stop"</span>);</div><div class="line">      speed = <span class="literal">null</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (speed &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"running"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    setSpeed: setSpeed,</div><div class="line">    getSpeed: getSpeed,</div><div class="line">    accelerate: accelerate,</div><div class="line">    decelerate: decelerate,</div><div class="line">    getStatus: getStatus</div><div class="line">  &#125;</div><div class="line">&#125;)()</div><div class="line">Car.setSpeed(<span class="number">30</span>);</div><div class="line">Car.getSpeed(); <span class="comment">//30</span></div><div class="line">Car.accelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//40;</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//20</span></div><div class="line">Car.getStatus(); <span class="comment">// 'running';</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getStatus(); <span class="comment">//'stop';</span></div><div class="line"><span class="comment">//Car.speed;  //error</span></div></pre></td></tr></table></figure>
<h1 id="下面这段代码输出结果是-为什么"><a href="#下面这段代码输出结果是-为什么" class="headerlink" title="下面这段代码输出结果是? 为什么?"></a>下面这段代码输出结果是? 为什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> a ;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//2</span></div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果为1,3,2 因为setTimeout()会在程序的最后执行，前面声明a并赋值，重复声明不会改变a的值, setTimeOut异步</p>
</blockquote>
<h1 id="下面这段代码输出结果是-为什么-1"><a href="#下面这段代码输出结果是-为什么-1" class="headerlink" title="下面这段代码输出结果是? 为什么?"></a>下面这段代码输出结果是? 为什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    flag = <span class="literal">false</span>;</div><div class="line">&#125;,<span class="number">0</span>) <span class="comment">//原本会在程序的末尾执行，但由于while是个死循环，程序不会往下执行，故setTimeout也不会执行</span></div><div class="line"><span class="keyword">while</span>(flag)&#123;&#125; <span class="comment">//flag永远是true,死循环</span></div><div class="line"><span class="built_in">console</span>.log(flag); <span class="comment">//不会执行</span></div></pre></td></tr></table></figure>
<h1 id="下面这段代码输出？如何输出delayer-0-delayer-1-（使用闭包来实现）"><a href="#下面这段代码输出？如何输出delayer-0-delayer-1-（使用闭包来实现）" class="headerlink" title="下面这段代码输出？如何输出delayer: 0, delayer:1...（使用闭包来实现）"></a>下面这段代码输出？如何输出<code>delayer: 0, delayer:1...</code>（使用闭包来实现）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i);</div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出 0,1,2,3,4 delayer: 5, delayer: 5...</span></div></pre></td></tr></table></figure>
<p>修改：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;)(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出0,1,2,3,4 delayer: 0, delayer: 1, delayer: 2, delayer: 3, delayer: 4,</span></div></pre></td></tr></table></figure></p>
<h1 id="如何获取元素的真实宽高"><a href="#如何获取元素的真实宽高" class="headerlink" title="如何获取元素的真实宽高"></a>如何获取元素的真实宽高</h1><p>使用window.getComputedStyle()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var ele = doutment.getElementById(&quot;test&quot;)</div><div class="line">window.getComputedStyle(ele).width //获取id为test元素的宽</div><div class="line">window.getComputedStyle(ele).height //获取id为test元素的高</div></pre></td></tr></table></figure></p>
<h1 id="URL如何编码解码？为什么要编码？"><a href="#URL如何编码解码？为什么要编码？" class="headerlink" title="URL如何编码解码？为什么要编码？"></a>URL如何编码解码？为什么要编码？</h1><p>JavaScript提供四个URL的编码/解码方法。</p>
<ol>
<li>decodeURI()</li>
<li>decodeURIComponent()</li>
<li>encodeURI()</li>
<li>encodeURIComponent()<br>区别</li>
</ol>
<ul>
<li><p>encodeURI方法不会对下列字符编码</p>
<ol>
<li>ASCII字母</li>
<li>数字</li>
<li>~!@#$&amp;*()=:/,;?+’</li>
</ol>
</li>
<li><p>encodeURIComponent方法不会对下列字符编码</p>
<ol>
<li>ASCII字母</li>
<li>数字</li>
<li>~!*()’</li>
</ol>
</li>
</ul>
<p>所以encodeURIComponent比encodeURI编码的范围更大。<br>之所以要进行编码，是因为URL中有些字符会引起歧义。</p>
<h1 id="补全如下函数，判断用户的浏览器类型"><a href="#补全如下函数，判断用户的浏览器类型" class="headerlink" title="补全如下函数，判断用户的浏览器类型"></a>补全如下函数，判断用户的浏览器类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroid</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/Android/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIphone</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iPhone/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIpad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iPad/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIOS</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iOS/i</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭包&lt;/h1&gt;&lt;p&gt;JavaScript变量作用域有两种，分别是全局的作用域和函数作用域，JavaScript函数的局部变量可以直接读取全局变量。而函数外部变量并不能读取函数内的局部变量，但是通过闭包，可以在函数外部访问到内部的变量。&lt;/p&gt;
&lt;p&gt;JavaScript作用域链：子对象会一级一级的向上查找父对象的变量，父对象的所有变量对子对象都是可见的，反之则不成立。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + local)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = foo(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="BOM" scheme="https://www.kmac007.com/tags/BOM/"/>
    
      <category term="闭包" scheme="https://www.kmac007.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="定时器" scheme="https://www.kmac007.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件</title>
    <link href="https://www.kmac007.com/2017/DOM%E4%BA%8B%E4%BB%B6.html"/>
    <id>https://www.kmac007.com/2017/DOM事件.html</id>
    <published>2017-04-01T02:36:21.000Z</published>
    <updated>2017-08-27T02:46:09.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM0级事件和DOM2级事件"><a href="#DOM0级事件和DOM2级事件" class="headerlink" title="DOM0级事件和DOM2级事件"></a>DOM0级事件和DOM2级事件</h1><ul>
<li>DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性。每个元素（包括window 和document）都有自己的事件处理程序属性，这些属性通常全部小写，如：onclick；同属性多次赋值的话，后面的属性会覆盖前面的属性。删除事件处理程序只需要将属性值设置为null即可，具有跨浏览器优势。这种方式添加的事件处理程序会在事件流的冒泡阶段处理。</li>
<li>DOM2级事件处理程序，定义了两个方法，用于处理指定和删除事件处理程序：addEventListener(), removeEventListener()。都接受3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值（默认为false）。最后一个布尔参数如果是true，表示在捕获阶段调用处理程序，而false表示在冒泡阶段调用事件处理程序。可以添加多个事件处理程序。但IE8及更早的版本不支持。</li>
</ul>
<a id="more"></a>
<h1 id="attachEvent与addEventListener的区别？"><a href="#attachEvent与addEventListener的区别？" class="headerlink" title="attachEvent与addEventListener的区别？"></a>attachEvent与addEventListener的区别？</h1><p>区别如下：</p>
<ol>
<li>attachEvent()接受两个参数：事件处理程序名称与事件处理程序函数；而     addEventListener()接受三个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值（默认值为false可忽略）。</li>
<li>事件处理程序的执行顺序不同：通过attachEvent()给某元素添加多个对于同一事件的处理程序时，它们的执行顺序是按照最后添加的先执行。 对于addEventListener()的事件处理程序则是按照添加顺序执行。</li>
<li>由于IE8及更早版本只支持事件冒泡，所用通过attachEvent()添加的事件处理程序都会被添加到冒泡阶段，而addEventListener()可以通过第三个参数布尔值来确定处理程序是在捕获阶段还是冒泡阶段调用。</li>
<li>作用域: 使用attachEvent()，事件处理程序会在全局作用域中运行，因此this等于window; 而addEventListener()的作用域是元素本身，this是指的是触发元素。</li>
<li>第一个参数不同：attachEvent()第一个参数为”on”+事件名，而addEventListener()的第一个参数为事件名。</li>
</ol>
<h1 id="IE事件冒泡与DOM2事件"><a href="#IE事件冒泡与DOM2事件" class="headerlink" title="IE事件冒泡与DOM2事件"></a>IE事件冒泡与DOM2事件</h1><h2 id="IE事件冒泡"><a href="#IE事件冒泡" class="headerlink" title="IE事件冒泡"></a>IE事件冒泡</h2><p><img style="margin: auto;" src="http://7xpvnv.com2.z0.glb.qiniucdn.com/4bc08396-78b0-48e3-a8bb-f846e86e9d73" alt="IE事件冒泡"></p>
<p>对于IE事件冒泡：即事件开始时由最具体的元素接受，然后逐级向上传播到较为不具体的节点。<br>如图，如果单击了页面中的<div>元素，那么click事件就会按照图中1、2、3、4的顺序传播。</div></p>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p><img style="margin: auto;" src="http://7xpvnv.com2.z0.glb.qiniucdn.com/8ddedb2e-f55e-4872-bd36-79c44b71d3f1" alt="DOM事件流"></p>
<p>对于DOM事件流：“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件作出响应。当点击<div>元素时，会按照如上图所示的顺序触发事件。</div></p>
<h1 id="阻止事件冒泡与阻止默认事件"><a href="#阻止事件冒泡与阻止默认事件" class="headerlink" title="阻止事件冒泡与阻止默认事件"></a>阻止事件冒泡与阻止默认事件</h1><ul>
<li>标准浏览器<ul>
<li>阻止冒泡: e.stopPropagation()</li>
<li>阻止默认事件：e.preventDefault()</li>
</ul>
</li>
<li>IE浏览器<ul>
<li>阻止冒泡：event.cancelBubble = true</li>
<li>阻止默认事件：event.returnValue = false</li>
</ul>
</li>
</ul>
<h1 id="有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"><a href="#有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容" class="headerlink" title="有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"></a>有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"ct"</span>&gt;</div><div class="line">    &lt;li&gt;这里是&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;kmac007&lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;小站&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">&lt;/u</span>l&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//todo ...</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myLi = <span class="built_in">document</span>.querySelector(<span class="string">".ct"</span>);</div><div class="line">myLi.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(event.target.innerText);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="补全代码，要求："><a href="#补全代码，要求：" class="headerlink" title="补全代码，要求："></a>补全代码，要求：</h1><ul>
<li>当点击按钮开头添加时在</li><li>这里是</li>元素前添加一个新元素，内容为用户输入的非空字符串；当点击结尾添加时在最后一个 li 元素后添加用户输入的非空字符串.
<li>当点击每一个元素li时控制台展示该元素的文本内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>kmac007<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>小站<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt-add-content"</span> <span class="attr">placeholder</span>=<span class="string">"添加内容"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-start"</span>&gt;</span>开头添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-end"</span>&gt;</span>结尾添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">//你的代码</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> ct = $(<span class="string">".ct"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btnStart = $(<span class="string">"#btn-add-start"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btnEnd = $(<span class="string">"#btn-add-end"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> iptContent = $(<span class="string">".ipt-add-content"</span>)</span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(e.target.innerText)</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  btnStart.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (!iptContent.value) &#123;</span></div><div class="line"><span class="javascript">      alert(<span class="string">"请输入内容"</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">      newLi.innerText = iptContent.value</span></div><div class="line"><span class="undefined">      ct.insertBefore(newLi, ct.childNodes[0])</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  btnEnd.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (!iptContent.value) &#123;</span></div><div class="line"><span class="javascript">      alert(<span class="string">"请输入内容"</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">      newLi.innerText = iptContent.value</span></div><div class="line"><span class="undefined">      ct.appendChild(newLi)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"><a href="#补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。" class="headerlink" title="补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"></a>补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/Mourinho.png"</span>&gt;</span>鼠标放置查看图片1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/ibr.png"</span>&gt;</span>鼠标放置查看图片2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/rooney.png"</span>&gt;</span>鼠标放置查看图片3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">//你的代码</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> ct = $(<span class="string">".ct"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> pre = $(<span class="string">".img-preview"</span>)</span></div><div class="line"><span class="javascript">  <span class="comment">//鼠标移入事件</span></span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span></div><div class="line"><span class="javascript">      img.src = e.target.getAttribute(<span class="string">"data-img"</span>)</span></div><div class="line"><span class="undefined">      pre.appendChild(img)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  <span class="comment">//鼠标移出事件</span></span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></div><div class="line"><span class="javascript">      pre.innerHTML = <span class="string">''</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM0级事件和DOM2级事件&quot;&gt;&lt;a href=&quot;#DOM0级事件和DOM2级事件&quot; class=&quot;headerlink&quot; title=&quot;DOM0级事件和DOM2级事件&quot;&gt;&lt;/a&gt;DOM0级事件和DOM2级事件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性。每个元素（包括window 和document）都有自己的事件处理程序属性，这些属性通常全部小写，如：onclick；同属性多次赋值的话，后面的属性会覆盖前面的属性。删除事件处理程序只需要将属性值设置为null即可，具有跨浏览器优势。这种方式添加的事件处理程序会在事件流的冒泡阶段处理。&lt;/li&gt;
&lt;li&gt;DOM2级事件处理程序，定义了两个方法，用于处理指定和删除事件处理程序：addEventListener(), removeEventListener()。都接受3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值（默认为false）。最后一个布尔参数如果是true，表示在捕获阶段调用处理程序，而false表示在冒泡阶段调用事件处理程序。可以添加多个事件处理程序。但IE8及更早的版本不支持。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="DOM" scheme="https://www.kmac007.com/tags/DOM/"/>
    
      <category term="事件" scheme="https://www.kmac007.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>DOM操作</title>
    <link href="https://www.kmac007.com/2017/DOM%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/DOM操作.html</id>
    <published>2017-03-29T06:26:31.000Z</published>
    <updated>2017-08-26T14:06:36.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM对象的innerText和innerHTML有什么区别？"><a href="#DOM对象的innerText和innerHTML有什么区别？" class="headerlink" title="DOM对象的innerText和innerHTML有什么区别？"></a>DOM对象的innerText和innerHTML有什么区别？</h1><ul>
<li><p>innerText返回元素内所包含的文本内容，在多层次的时候会按照元素的深浅顺序拼接其内容</p>
</li>
<li><p>innerHTML返回的是元素的HTML结构</p>
</li>
</ul>
<h1 id="elem-children和elem-childNodes的区别"><a href="#elem-children和elem-childNodes的区别" class="headerlink" title="elem.children和elem.childNodes的区别"></a>elem.children和elem.childNodes的区别</h1><p>elem.children与elem.childNodes 两者都是返回子节点；前者返回的是节点集合后者返回指定节点的子节点的节点集合包括元素、文本、注释等</p>
<a id="more"></a>
<h1 id="查询元素有几种常见的方法？ES5的元素选择方法是什么"><a href="#查询元素有几种常见的方法？ES5的元素选择方法是什么" class="headerlink" title="查询元素有几种常见的方法？ES5的元素选择方法是什么?"></a>查询元素有几种常见的方法？ES5的元素选择方法是什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">常见的方法有：</div><div class="line"></div><div class="line"><span class="number">1</span>、getElementById()</div><div class="line"><span class="number">2</span>、getElementsByTagName()</div><div class="line"><span class="number">3</span>、getElementsByClassName()</div><div class="line"><span class="number">4</span>、getElementsByName()</div><div class="line"></div><div class="line">ES5的元素选择方法是：</div><div class="line"></div><div class="line"><span class="number">1.</span> querySelector()</div><div class="line"><span class="number">2.</span> querySelectorAll()</div></pre></td></tr></table></figure>
<h1 id="如何创建一个元素？如何给元素设置属性？如何删除属性"><a href="#如何创建一个元素？如何给元素设置属性？如何删除属性" class="headerlink" title="如何创建一个元素？如何给元素设置属性？如何删除属性"></a>如何创建一个元素？如何给元素设置属性？如何删除属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>) <span class="comment">//创建元素</span></div><div class="line">s.setAttribute(<span class="string">"name"</span>,<span class="string">"DK"</span>) <span class="comment">// 设置属性</span></div><div class="line">s.removeAttribute(<span class="string">"name"</span>) <span class="comment">//删除属性</span></div></pre></td></tr></table></figure>
<h1 id="如何给页面元素添加子元素？如何删除页面元素下的子元素"><a href="#如何给页面元素添加子元素？如何删除页面元素下的子元素" class="headerlink" title="如何给页面元素添加子元素？如何删除页面元素下的子元素?"></a>如何给页面元素添加子元素？如何删除页面元素下的子元素?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">element.appendChild() <span class="comment">//给element添加子元素</span></div><div class="line">element.removeChild(child) <span class="comment">//删除element元素下的子元素child</span></div></pre></td></tr></table></figure>
<h1 id="element-classList有哪些方法？如何判断一个元素的-class-列表中是包含某个-class？如何添加一个class？如何删除一个class"><a href="#element-classList有哪些方法？如何判断一个元素的-class-列表中是包含某个-class？如何添加一个class？如何删除一个class" class="headerlink" title="element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?"></a>element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">add(class1, class2, ...) <span class="comment">//在元素中添加一个或多个类名，如指定的类名已存在，则不会添加</span></div><div class="line">contains(<span class="class"><span class="keyword">class</span>) //返回布尔值，判断指定的类名是否存在</span></div><div class="line"><span class="class"><span class="title">item</span>(<span class="title">index</span>) //返回类名在元素中的索引</span></div><div class="line"><span class="class"><span class="title">remove</span>(<span class="title">class1</span>, <span class="title">class2</span>, ...) //移除元素中的一个或多个类名，移除不存在的类名不会报错</span></div><div class="line"><span class="class"><span class="title">toggle</span>(<span class="title">class</span>, <span class="title">true</span>|<span class="title">false</span>) //在元素中切换类名，第一个参数为要在元素中移除的类名，并返回<span class="title">false</span>。如果类名不存在则会在元素中添加类名，并返回<span class="title">true</span>。第二个是可选参数，是个布尔值用于设置元素是否强制添加或移除类，不管类名是否存在。</span></div></pre></td></tr></table></figure>
<p>利用contains()判断是否包含某个class,用add()和remove()添加和删除class</p>
<h1 id="如何选中如下代码所有的li元素？-如何选中btn元素？"><a href="#如何选中如下代码所有的li元素？-如何选中btn元素？" class="headerlink" title="如何选中如下代码所有的li元素？ 如何选中btn元素？"></a>如何选中如下代码所有的li元素？ 如何选中btn元素？</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-tabs"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list1<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list2<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list3<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>选中所有的li:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)</div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</div></pre></td></tr></table></figure></p>
<p>选中btn元素:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>]</div><div class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"btn"</span>)[<span class="number">0</span>]</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</div><div class="line">doucument.querySelectorAll(<span class="string">".btn"</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM对象的innerText和innerHTML有什么区别？&quot;&gt;&lt;a href=&quot;#DOM对象的innerText和innerHTML有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;DOM对象的innerText和innerHTML有什么区别？&quot;&gt;&lt;/a&gt;DOM对象的innerText和innerHTML有什么区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;innerText返回元素内所包含的文本内容，在多层次的时候会按照元素的深浅顺序拼接其内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;innerHTML返回的是元素的HTML结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;elem-children和elem-childNodes的区别&quot;&gt;&lt;a href=&quot;#elem-children和elem-childNodes的区别&quot; class=&quot;headerlink&quot; title=&quot;elem.children和elem.childNodes的区别&quot;&gt;&lt;/a&gt;elem.children和elem.childNodes的区别&lt;/h1&gt;&lt;p&gt;elem.children与elem.childNodes 两者都是返回子节点；前者返回的是节点集合后者返回指定节点的子节点的节点集合包括元素、文本、注释等&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="DOM" scheme="https://www.kmac007.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>引用类型及对象拷贝</title>
    <link href="https://www.kmac007.com/2017/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D.html"/>
    <id>https://www.kmac007.com/2017/引用类型及对象拷贝.html</id>
    <published>2017-03-25T05:36:21.000Z</published>
    <updated>2017-08-26T13:58:53.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用类型与非引用类型"><a href="#引用类型与非引用类型" class="headerlink" title="引用类型与非引用类型"></a>引用类型与非引用类型</h1><p>非引用类型：Undefined, Null, Number, String, Boolean</p>
<p>引用类型有: Function, Object, Array, Date, RegExp</p>
<h1 id="如下代码输出什么？为什么"><a href="#如下代码输出什么？为什么" class="headerlink" title="如下代码输出什么？为什么"></a>如下代码输出什么？为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj1 == obj2);  <span class="comment">//false 这里是判断obj1与obj2是否指向相同的对象</span></div><div class="line"><span class="built_in">console</span>.log(obj1 = obj2);  <span class="comment">//&#123;a:1, b:2&#125; 使obj1的指针指向obj2</span></div><div class="line"><span class="built_in">console</span>.log(obj1 == obj2);  <span class="comment">//true 由于obj1, obj2指向相同的对象，所以为true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="如下代码输出什么-为什么"><a href="#如下代码输出什么-为什么" class="headerlink" title="如下代码输出什么? 为什么"></a>如下代码输出什么? 为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span></div><div class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</div><div class="line"><span class="keyword">var</span> d = [a, b, c]</div><div class="line"></div><div class="line"><span class="keyword">var</span> aa = a</div><div class="line"><span class="keyword">var</span> bb = b</div><div class="line"><span class="keyword">var</span> cc = c</div><div class="line"><span class="keyword">var</span> dd = d</div><div class="line"></div><div class="line">a = <span class="number">11</span></div><div class="line">b = <span class="number">22</span></div><div class="line">c.name = <span class="string">'hello'</span></div><div class="line">d[<span class="number">2</span>][<span class="string">'age'</span>] = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(aa)  <span class="comment">//1, 将a的值赋予aa</span></div><div class="line"><span class="built_in">console</span>.log(bb)  <span class="comment">//2, 将b的值赋予bb</span></div><div class="line"><span class="built_in">console</span>.log(cc)  <span class="comment">//&#123; name: 'hello', age: 3 &#125;, cc与c指向同一个对象,改变c与会使cc改变</span></div><div class="line"><span class="built_in">console</span>.log(dd)  <span class="comment">// [1, 2, &#123; name: 'hello', age: 3 &#125;], dd与d指向同一个对象,改变d同样会使dd改变</span></div></pre></td></tr></table></figure>
<h1 id="如下代码输出什么-为什么-1"><a href="#如下代码输出什么-为什么-1" class="headerlink" title="如下代码输出什么? 为什么"></a>如下代码输出什么? 为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  ++n</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  ++obj.age</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1(a)</div><div class="line">f2(c)</div><div class="line">f1(c.age)</div><div class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1, 因为f1是按值传递，仅是将值传递进去，不会改变全局变量a</span></div><div class="line"><span class="built_in">console</span>.log(c)  <span class="comment">//&#123; name: 'dk', age: 3 &#125;, f2(c)是引用传递，变量指针指向obj, 会改变c中的值，而f1(c.age)为值传递，同理不会改变c</span></div></pre></td></tr></table></figure>
<h1 id="过滤如下数组，只保留正数，直接在原数组上操作"><a href="#过滤如下数组，只保留正数，直接在原数组上操作" class="headerlink" title="过滤如下数组，只保留正数，直接在原数组上操作"></a>过滤如下数组，只保留正数，直接在原数组上操作</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &lt;= <span class="number">0</span>) &#123;</div><div class="line">      arr.splice(i, <span class="number">1</span>);</div><div class="line">      filter(arr);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">filter(arr)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [3,1,2]</span></div></pre></td></tr></table></figure>
<h1 id="过滤如下数组，只保留正数，原数组不变，生成新数组"><a href="#过滤如下数组，只保留正数，原数组不变，生成新数组" class="headerlink" title="过滤如下数组，只保留正数，原数组不变，生成新数组"></a>过滤如下数组，只保留正数，原数组不变，生成新数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = []</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">      newArr.push(arr[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr2 = filter(arr)</div><div class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// [3,1,2]</span></div><div class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [3,1,0,-1,-2,2,-5]</span></div></pre></td></tr></table></figure>
<h1 id="对象深拷贝的几种方式"><a href="#对象深拷贝的几种方式" class="headerlink" title="对象深拷贝的几种方式"></a>对象深拷贝的几种方式</h1><blockquote>
<p>注意，ES6中Object.assign为浅拷贝</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">"robert"</span>,</div><div class="line">  age: <span class="number">3</span>,</div><div class="line">  child: &#123;</div><div class="line">    name: <span class="string">"bob"</span>,</div><div class="line">    age: <span class="number">3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*方法一*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy1</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newObj = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] !== <span class="string">'object'</span>) &#123;</div><div class="line">        newObj[key] = obj[key]</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newObj[key] = deepCopy1(obj[key])</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newObj</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj2 = deepCopy1(obj)</div><div class="line"><span class="built_in">console</span>.log(obj2)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*方法二*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy2</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</div><div class="line">  <span class="keyword">return</span> newObj</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引用类型与非引用类型&quot;&gt;&lt;a href=&quot;#引用类型与非引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型与非引用类型&quot;&gt;&lt;/a&gt;引用类型与非引用类型&lt;/h1&gt;&lt;p&gt;非引用类型：Undefined, Null, Number, String, Boolean&lt;/p&gt;
&lt;p&gt;引用类型有: Function, Object, Array, Date, RegExp&lt;/p&gt;
&lt;h1 id=&quot;如下代码输出什么？为什么&quot;&gt;&lt;a href=&quot;#如下代码输出什么？为什么&quot; class=&quot;headerlink&quot; title=&quot;如下代码输出什么？为什么&quot;&gt;&lt;/a&gt;如下代码输出什么？为什么&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 == obj2);  &lt;span class=&quot;comment&quot;&gt;//false 这里是判断obj1与obj2是否指向相同的对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 = obj2);  &lt;span class=&quot;comment&quot;&gt;//&amp;#123;a:1, b:2&amp;#125; 使obj1的指针指向obj2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 == obj2);  &lt;span class=&quot;comment&quot;&gt;//true 由于obj1, obj2指向相同的对象，所以为true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="引用类型" scheme="https://www.kmac007.com/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="对象拷贝" scheme="https://www.kmac007.com/tags/%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.kmac007.com/2017/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>https://www.kmac007.com/2017/正则表达式.html</id>
    <published>2017-03-22T11:36:21.000Z</published>
    <updated>2017-08-26T10:53:08.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式常用字符及其含义"><a href="#正则表达式常用字符及其含义" class="headerlink" title="正则表达式常用字符及其含义"></a>正则表达式常用字符及其含义</h2><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>数字字符</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，字母、数字下划线</td>
</tr>
<tr>
<td>\s</td>
<td>空白符</td>
</tr>
<tr>
<td>[a-zA-Z0-9]]</td>
<td>任意字母a-z,A-Z和数字</td>
</tr>
<tr>
<td>\b</td>
<td>单词边界</td>
</tr>
<tr>
<td>.</td>
<td>除了回车符和换行符之外的所有字符</td>
</tr>
<tr>
<td>*</td>
<td>出现零次或多次（任意次）</td>
</tr>
<tr>
<td>+</td>
<td>出现一次或多次（至少出现一次）</td>
</tr>
<tr>
<td>?</td>
<td>出现零次或一次（最多出现一次）</td>
</tr>
<tr>
<td>x{3}</td>
<td>x出现3次</td>
</tr>
<tr>
<td>^</td>
<td>以XXX开头</td>
</tr>
<tr>
<td>$</td>
<td>以XXX结尾</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="写一个函数trim-str-，去除字符串两边的空白字符"><a href="#写一个函数trim-str-，去除字符串两边的空白字符" class="headerlink" title="写一个函数trim(str)，去除字符串两边的空白字符"></a>写一个函数trim(str)，去除字符串两边的空白字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isEmail-str-，判断用户输入的是不是邮箱"><a href="#写一个函数isEmail-str-，判断用户输入的是不是邮箱" class="headerlink" title="写一个函数isEmail(str)，判断用户输入的是不是邮箱"></a>写一个函数isEmail(str)，判断用户输入的是不是邮箱</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+$/</span></div><div class="line">  <span class="keyword">return</span> reg.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isPhoneNum-str-，判断用户输入的是不是手机号"><a href="#写一个函数isPhoneNum-str-，判断用户输入的是不是手机号" class="headerlink" title="写一个函数isPhoneNum(str)，判断用户输入的是不是手机号"></a>写一个函数isPhoneNum(str)，判断用户输入的是不是手机号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPhoneNum</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^1[35789]\d&#123;9&#125;$/</span></div><div class="line">  <span class="keyword">return</span> reg.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"><a href="#写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）" class="headerlink" title="写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"></a>写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidUsername</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,20&#125;$/</span></div><div class="line">  <span class="keyword">return</span> reg.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）"><a href="#写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）" class="headerlink" title="写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）"></a>写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidPassword</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(str.length&lt;<span class="number">6</span>||str.length&gt;<span class="number">20</span>||<span class="regexp">/[\W]/</span>.test(str)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[a-z]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[A-Z]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[0-9]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[_]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(count&gt;=<span class="number">2</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个正则表达式，得到如下字符串里所有的颜色"><a href="#写一个正则表达式，得到如下字符串里所有的颜色" class="headerlink" title="写一个正则表达式，得到如下字符串里所有的颜色"></a>写一个正则表达式，得到如下字符串里所有的颜色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/#[a-fA-F0-9]&#123;6&#125;/g</span></div><div class="line"><span class="keyword">var</span> subj = <span class="string">"color: #121212; background-color: #AA00ef; width: 12px; bad-colors: f#fddee "</span></div><div class="line"><span class="built_in">console</span>.log( subj.match(reg) )  <span class="comment">// ['#121212', '#AA00ef']</span></div></pre></td></tr></table></figure>
<h2 id="下面代码输出什么-为什么-改写代码，让其输出-“”hunger””-“”world””"><a href="#下面代码输出什么-为什么-改写代码，让其输出-“”hunger””-“”world””" class="headerlink" title="下面代码输出什么? 为什么? 改写代码，让其输出[“”hunger””, “”world””]."></a>下面代码输出什么? 为什么? 改写代码，让其输出[“”hunger””, “”world””].</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello  "hunger" , hello "world"'</span>;</div><div class="line"><span class="keyword">var</span> pat =  <span class="regexp">/".*"/g</span>;</div><div class="line">str.match(pat);<span class="comment">//[""hunger" , hello "world""]</span></div><div class="line"><span class="comment">//原因是贪婪模式，量词在默认下尽可能多的匹配</span></div><div class="line"><span class="comment">//修改如下：</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'hello  "hunger" , hello "world"'</span>;</div><div class="line"><span class="keyword">var</span> pat =  <span class="regexp">/".*?"/g</span>;</div><div class="line">str.match(pat);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式常用字符及其含义&quot;&gt;&lt;a href=&quot;#正则表达式常用字符及其含义&quot; class=&quot;headerlink&quot; title=&quot;正则表达式常用字符及其含义&quot;&gt;&lt;/a&gt;正则表达式常用字符及其含义&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;单词字符，字母、数字下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-zA-Z0-9]]&lt;/td&gt;
&lt;td&gt;任意字母a-z,A-Z和数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;单词边界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;除了回车符和换行符之外的所有字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;出现零次或多次（任意次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;出现一次或多次（至少出现一次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;出现零次或一次（最多出现一次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x{3}&lt;/td&gt;
&lt;td&gt;x出现3次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;以XXX开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;以XXX结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="正则表达式" scheme="https://www.kmac007.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Math数组及Date相关操作</title>
    <link href="https://www.kmac007.com/2017/Math%E6%95%B0%E7%BB%84%E5%8F%8ADate%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/Math数组及Date相关操作.html</id>
    <published>2017-03-20T10:56:51.000Z</published>
    <updated>2017-08-26T10:44:56.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="写一个函数，返回从min到max之间的随机整数，包括min不包括max"><a href="#写一个函数，返回从min到max之间的随机整数，包括min不包括max" class="headerlink" title="写一个函数，返回从min到max之间的随机整数，包括min不包括max"></a>写一个函数，返回从min到max之间的随机整数，包括min不包括max</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(min + <span class="built_in">Math</span>.random() * (max - min))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数，返回从min都max之间的-随机整数，包括min包括max"><a href="#写一个函数，返回从min都max之间的-随机整数，包括min包括max" class="headerlink" title="写一个函数，返回从min都max之间的 随机整数，包括min包括max"></a>写一个函数，返回从min都max之间的 随机整数，包括min包括max</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(min + <span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="写一个函数，生成一个长度为-n-的随机字符串，字符串字符的取值范围包括0到9，a到-z，A到Z。"><a href="#写一个函数，生成一个长度为-n-的随机字符串，字符串字符的取值范围包括0到9，a到-z，A到Z。" class="headerlink" title="写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z。"></a>写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldStr = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandStr</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="comment">//补全函数</span></div><div class="line">  <span class="keyword">var</span> strArr = oldStr.split(<span class="string">''</span>)</div><div class="line">  <span class="keyword">var</span> randStr = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> strKey = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * oldStr.length)</div><div class="line">    randStr += strArr[strKey]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> randStr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = getRandStr(<span class="number">10</span>); <span class="comment">// 0a3iJiRZap</span></div></pre></td></tr></table></figure>
<h2 id="写一个函数，生成一个随机-IP-地址，一个合法的-IP-地址为-0-0-0-0-255-255-255-255"><a href="#写一个函数，生成一个随机-IP-地址，一个合法的-IP-地址为-0-0-0-0-255-255-255-255" class="headerlink" title="写一个函数，生成一个随机 IP 地址，一个合法的 IP 地址为 0.0.0.0~255.255.255.255"></a>写一个函数，生成一个随机 IP 地址，一个合法的 IP 地址为 0.0.0.0~255.255.255.255</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandIp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ipArr = []</div><div class="line">  <span class="keyword">var</span> len = <span class="number">4</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    ipArr[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">255</span> + <span class="number">1</span>))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ipArr.join(<span class="string">'.'</span>)</div><div class="line">  &#125;</div><div class="line">  getRandIp()</div></pre></td></tr></table></figure>
<h2 id="写一个函数，生成一个随机颜色字符串，合法的颜色为-000000-ffffff"><a href="#写一个函数，生成一个随机颜色字符串，合法的颜色为-000000-ffffff" class="headerlink" title="写一个函数，生成一个随机颜色字符串，合法的颜色为#000000~ #ffffff"></a>写一个函数，生成一个随机颜色字符串，合法的颜色为#000000~ #ffffff</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">"ABCDEF0123456789"</span></div><div class="line">  <span class="keyword">var</span> colorArr = str.split(<span class="string">''</span>)</div><div class="line">  <span class="keyword">var</span> len = <span class="number">6</span></div><div class="line">  <span class="keyword">var</span> colorStr = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    colorStr += colorArr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (colorArr.length))]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">'#'</span> + colorStr</div><div class="line">&#125;</div><div class="line">getRandColor()</div></pre></td></tr></table></figure>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用-splice函数分别实现push、pop、shift、unshift方法"><a href="#数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用-splice函数分别实现push、pop、shift、unshift方法" class="headerlink" title="数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用 splice函数分别实现push、pop、shift、unshift方法"></a>数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用 splice函数分别实现push、pop、shift、unshift方法</h2><p>push: 向数组的末尾添加一个或更多元素，并返回新的数组长度。</p>
<p>pop: 删除并返回数组的最后一个元素</p>
<p>shift: 删除并返回数组的第一个元素</p>
<p>unshift: 向数组的开头添加一个或更多元素，并返回新的长度。</p>
<p>join: 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</p>
<p>splice: 删除元素，并向数组添加新元素。</p>
<p>用splice实现push:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(arr.length,<span class="number">0</span>,item)</div></pre></td></tr></table></figure></p>
<p>用splice实现pop:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(arr.length<span class="number">-1</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>用slice实现unshift:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(<span class="number">0</span>,<span class="number">0</span>,item)</div></pre></td></tr></table></figure></p>
<p>用slice实现shift:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<h2 id="写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作"><a href="#写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作" class="headerlink" title="写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作"></a>写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">squareArr</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    arr[i] = arr[i] * arr[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</div><div class="line">squareArr(arr)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [4, 16, 36]</span></div></pre></td></tr></table></figure>
<h2 id="写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变"><a href="#写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变" class="headerlink" title="写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变"></a>写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterPositive</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] === <span class="string">"number"</span> &amp;&amp; arr[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">      newArr.push(arr[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="string">'hello'</span>, <span class="literal">true</span>]</div><div class="line"><span class="keyword">var</span> newArr = filterPositive(arr)</div><div class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">//[3, 2]</span></div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//[3, -1,  2,  'hello', true]</span></div></pre></td></tr></table></figure>
<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><h2 id="写一个函数getChIntv，获取从当前时间到指定日期的间隔时间"><a href="#写一个函数getChIntv，获取从当前时间到指定日期的间隔时间" class="headerlink" title="写一个函数getChIntv，获取从当前时间到指定日期的间隔时间"></a>写一个函数getChIntv，获取从当前时间到指定日期的间隔时间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timeStr = getChIntv(<span class="string">"2017-05-01"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChIntv</span>(<span class="params">timeStr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> targetTime = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr).getTime() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">8</span></div><div class="line">  <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now()</div><div class="line">  <span class="keyword">var</span> offsetTime = targetTime - currentTime</div><div class="line">  <span class="keyword">var</span> days = <span class="built_in">parseInt</span>(offsetTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>))</div><div class="line">  <span class="keyword">var</span> hours = <span class="built_in">parseInt</span>(offsetTime % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>))</div><div class="line">  <span class="keyword">var</span> mins = <span class="built_in">parseInt</span>(offsetTime % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">1000</span> * <span class="number">60</span>))</div><div class="line">  <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>(offsetTime % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) % (<span class="number">1000</span> * <span class="number">60</span>) / <span class="number">1000</span>)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">"距五一还有:"</span> + days + <span class="string">"天"</span> + hours + <span class="string">"小时"</span> + mins + <span class="string">"分"</span> + seconds + <span class="string">"秒"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(timeStr); <span class="comment">// 距五一还有:11天7小时26分28秒</span></div></pre></td></tr></table></figure>
<h2 id="把hh-mm-dd格式数字日期改成中文日期"><a href="#把hh-mm-dd格式数字日期改成中文日期" class="headerlink" title="把hh-mm-dd格式数字日期改成中文日期"></a>把hh-mm-dd格式数字日期改成中文日期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = getChsDate(<span class="string">'2015-01-08'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChsDate</span>(<span class="params">timeStr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dist = [<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>, <span class="string">"十"</span>, <span class="string">"十一"</span>, <span class="string">"十二"</span>, <span class="string">"十三"</span>, <span class="string">"十四"</span>, <span class="string">"十五"</span>, <span class="string">"十六"</span>, <span class="string">"十七"</span>, <span class="string">"十八"</span>, <span class="string">"十九"</span>, <span class="string">"二十"</span>, <span class="string">"二十一"</span>, <span class="string">"二十二"</span>, <span class="string">"二十三"</span>, <span class="string">"二十四"</span>, <span class="string">"二十五"</span>, <span class="string">"二十六"</span>, <span class="string">"二十七"</span>, <span class="string">"二十八"</span>, <span class="string">"二十九"</span>, <span class="string">"三十"</span>, <span class="string">"三十一"</span>];</div><div class="line">  <span class="keyword">var</span> arr = timeStr.split(<span class="string">'-'</span>)</div><div class="line">  <span class="keyword">var</span> year = arr[<span class="number">0</span>]</div><div class="line">  <span class="keyword">var</span> month = arr[<span class="number">1</span>]</div><div class="line">  <span class="keyword">var</span> day = arr[<span class="number">2</span>]</div><div class="line">  <span class="keyword">var</span> chYear = dist[<span class="built_in">parseInt</span>(year[<span class="number">0</span>])] + dist[<span class="built_in">parseInt</span>(year[<span class="number">1</span>])] + dist[<span class="built_in">parseInt</span>(year[<span class="number">2</span>])] + dist[<span class="built_in">parseInt</span>(year[<span class="number">3</span>])]</div><div class="line">  <span class="keyword">var</span> chMonth = dist[<span class="built_in">parseInt</span>(month)]</div><div class="line">  <span class="keyword">var</span> chDay = dist[<span class="built_in">parseInt</span>(day)]</div><div class="line">  <span class="keyword">return</span> chYear + <span class="string">"年"</span> + chMonth + <span class="string">"月"</span> + chDay + <span class="string">"日"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 二零一五年一月八日</span></div></pre></td></tr></table></figure>
<h2 id="写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串"><a href="#写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串" class="headerlink" title="写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串:"></a>写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">friendlyDate</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> now = <span class="built_in">Date</span>.now()</div><div class="line">  <span class="keyword">var</span> offsetTime = (now - time) / <span class="number">1000</span> / <span class="number">60</span></div><div class="line">  <span class="keyword">if</span> (offsetTime &lt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime * <span class="number">60</span>) + <span class="string">"刚刚"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">1</span> &amp;&amp; offsetTime &lt; <span class="number">60</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime) + <span class="string">"分钟前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> &amp;&amp; offsetTime &lt; <span class="number">60</span> * <span class="number">24</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span>) + <span class="string">"小时前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> * <span class="number">24</span> &amp;&amp; offsetTime &lt; <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span> / <span class="number">24</span>) + <span class="string">"天前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> &amp;&amp; offsetTime &lt; <span class="number">60</span> * <span class="number">24</span> * <span class="number">39</span> * <span class="number">12</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span> / <span class="number">24</span> / <span class="number">30</span>) + <span class="string">"月前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> * <span class="number">24</span> * <span class="number">39</span> * <span class="number">12</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span> / <span class="number">24</span> / <span class="number">30</span> / <span class="number">12</span>) + <span class="string">"年前"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = friendlyDate(<span class="string">'1492593606284'</span>) <span class="comment">//  1分钟前</span></div><div class="line"><span class="keyword">var</span> str2 = friendlyDate(<span class="string">'1422583606284'</span>) <span class="comment">//2年前</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;&gt;&lt;/a&gt;Math&lt;/h1&gt;&lt;h2 id=&quot;写一个函数，返回从min到max之间的随机整数，包括min不包括max&quot;&gt;&lt;a href=&quot;#写一个函数，返回从min到max之间的随机整数，包括min不包括max&quot; class=&quot;headerlink&quot; title=&quot;写一个函数，返回从min到max之间的随机整数，包括min不包括max&quot;&gt;&lt;/a&gt;写一个函数，返回从min到max之间的随机整数，包括min不包括max&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRandom&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;min, max&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(min + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * (max - min))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;写一个函数，返回从min都max之间的-随机整数，包括min包括max&quot;&gt;&lt;a href=&quot;#写一个函数，返回从min都max之间的-随机整数，包括min包括max&quot; class=&quot;headerlink&quot; title=&quot;写一个函数，返回从min都max之间的 随机整数，包括min包括max&quot;&gt;&lt;/a&gt;写一个函数，返回从min都max之间的 随机整数，包括min包括max&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRandom&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;min, max&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(min + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * (max - min + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Math" scheme="https://www.kmac007.com/tags/Math/"/>
    
      <category term="Date" scheme="https://www.kmac007.com/tags/Date/"/>
    
      <category term="数组" scheme="https://www.kmac007.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>字符串与JSON相关操作</title>
    <link href="https://www.kmac007.com/2017/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8EJSON%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/字符串与JSON相关操作.html</id>
    <published>2017-03-20T08:28:55.000Z</published>
    <updated>2017-08-26T10:10:16.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用数组拼接出如下字符串"><a href="#使用数组拼接出如下字符串" class="headerlink" title="使用数组拼接出如下字符串"></a>使用数组拼接出如下字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;&lt;dl class=&quot;product&quot;&gt;&lt;dt&gt;女装&lt;/dt&gt;&lt;dd&gt;短款&lt;/dd&gt;&lt;dd&gt;冬季&lt;/dd&gt;&lt;dd&gt;春装&lt;/dd&gt;&lt;/dl&gt;&quot;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prod = &#123;</div><div class="line">  name: <span class="string">'女装'</span>,</div><div class="line">  styles: [<span class="string">'短款'</span>, <span class="string">'冬季'</span>, <span class="string">'春装'</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTplStr</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = []</div><div class="line">  arr.push(<span class="string">'&lt;dl class="product"&gt;'</span>)</div><div class="line">  arr.push(<span class="string">'&lt;dt&gt;'</span> + data.name + <span class="string">'&lt;/dt&gt;'</span>)</div><div class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> data[<span class="string">'styles'</span>]) &#123;</div><div class="line">    arr.push(<span class="string">'&lt;dd&gt;'</span> + data[<span class="string">'styles'</span>][key] + <span class="string">'&lt;/dd&gt;'</span>)</div><div class="line">  &#125;</div><div class="line">  arr.push(<span class="string">"&lt;/dl&gt;"</span>)</div><div class="line">  <span class="keyword">return</span> arr.join(<span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = getTplStr(prod) <span class="comment">//result拼接后的字符串</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="写出两种以上声明多行字符串的方法"><a href="#写出两种以上声明多行字符串的方法" class="headerlink" title="写出两种以上声明多行字符串的方法"></a>写出两种以上声明多行字符串的方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*使用\n转义字符回车*/</span></div><div class="line"><span class="keyword">var</span> str1 = <span class="string">"line1\nline2\nline3\n"</span></div><div class="line"><span class="built_in">console</span>.log(str1)</div><div class="line"></div><div class="line"><span class="comment">/*使用反斜杠转义*/</span></div><div class="line"><span class="keyword">var</span> str2 = <span class="string">"line1\</span></div><div class="line"><span class="string">            line2\</span></div><div class="line"><span class="string">            line3\</span></div><div class="line"><span class="string">"</span></div><div class="line"><span class="built_in">console</span>.log(str2)</div><div class="line"></div><div class="line"><span class="comment">/*连接运算符(+)*/</span></div><div class="line"><span class="keyword">var</span> str3 = <span class="string">"line1"</span></div><div class="line">  + <span class="string">"line2"</span></div><div class="line">  + <span class="string">"line3"</span></div><div class="line"><span class="built_in">console</span>.log(str3)</div><div class="line"></div><div class="line"><span class="comment">/*使用多行注释，生成多行字符串*/</span></div><div class="line"><span class="keyword">var</span> str4 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*</span></div><div class="line"><span class="comment">  line1</span></div><div class="line"><span class="comment">  line2</span></div><div class="line"><span class="comment">  line3</span></div><div class="line"><span class="comment">*/</span>&#125;).toString().split(<span class="string">'\n'</span>).slice(<span class="number">1</span>,<span class="number">-1</span>).join(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="comment">/*使用ES6的字符串扩展*/</span></div><div class="line"><span class="keyword">var</span> str5 = <span class="string">`</span></div><div class="line"><span class="string">  line1</span></div><div class="line"><span class="string">  line2</span></div><div class="line"><span class="string">  line3</span></div><div class="line"><span class="string">`</span></div><div class="line"><span class="built_in">console</span>.log(str5)</div></pre></td></tr></table></figure>
<h1 id="写一个函数，判断一个字符串是回文字符串，如-abcdcba是回文字符串-abcdcbb不是"><a href="#写一个函数，判断一个字符串是回文字符串，如-abcdcba是回文字符串-abcdcbb不是" class="headerlink" title="写一个函数，判断一个字符串是回文字符串，如 abcdcba是回文字符串, abcdcbb不是"></a>写一个函数，判断一个字符串是回文字符串，如 abcdcba是回文字符串, abcdcbb不是</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">"string"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> newStr = str.toLowerCase().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">    <span class="keyword">if</span>(newStr === str.toLowerCase()) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"是回文"</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"不是回文"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="写一个函数，统计字符串里出现出现频率最多的字符"><a href="#写一个函数，统计字符串里出现出现频率最多的字符" class="headerlink" title="写一个函数，统计字符串里出现出现频率最多的字符"></a>写一个函数，统计字符串里出现出现频率最多的字符</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMost</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dict = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(dict[str[i]]) &#123;</div><div class="line">      ++dict[str[i]]</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      dict[str[i]] = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> maxValue</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> dict)&#123;</div><div class="line">    <span class="keyword">if</span>(dict[key] &gt; count)&#123;</div><div class="line">      maxValue = key</div><div class="line">      count = dict[key]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//如果出现次数最多的字符不止一个，则加多一层循环</span></div><div class="line">  <span class="keyword">return</span> maxValue + <span class="string">":"</span> + count</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如"><a href="#写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如" class="headerlink" title="写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如"></a>写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">camelize(<span class="string">"background-color"</span>) == <span class="string">'backgroundColor'</span></div><div class="line">camelize(<span class="string">"list-style-image"</span>) == <span class="string">'listStyleImage'</span></div></pre></td></tr></table></figure>
<p>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = str.toLowerCase().split(<span class="string">'-'</span>)</div><div class="line">  <span class="keyword">var</span> newStr = arr[<span class="number">0</span>]</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    newStr += (arr[i].charAt(<span class="number">0</span>).toUpperCase() + arr[i].substring(<span class="number">1</span>))</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newStr</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="写一个-ucFirst函数，返回第一个字母为大写的字符"><a href="#写一个-ucFirst函数，返回第一个字母为大写的字符" class="headerlink" title="写一个 ucFirst函数，返回第一个字母为大写的字符"></a>写一个 ucFirst函数，返回第一个字母为大写的字符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ucFirst(&quot;hunger&quot;) == &quot;Hunger&quot;</div></pre></td></tr></table></figure>
<p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function ucFirst(str) &#123;</div><div class="line">  return str.charAt(0).toUpperCase() + str.substring(1)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如"><a href="#写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如" class="headerlink" title="写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如"></a>写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">truncate(<span class="string">"hello, my name is kmac007"</span>, <span class="number">10</span>) == <span class="string">"hello, thi..."</span>;</div><div class="line">truncate(<span class="string">"hello world"</span>, <span class="number">20</span>) == <span class="string">"hello world"</span></div></pre></td></tr></table></figure>
<p>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, maxlength</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (str.length &gt; maxlength) &#123;</div><div class="line">    <span class="keyword">return</span> str.substring(<span class="number">0</span>, maxlength) + <span class="string">"..."</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> str</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于JavaScript（Standard ECMA-262 3rd Edition - December 1999）的一个子集.JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(网络传输速度)。</p>
<p>严格的JavaScript对象表示法表示结构化的数据。具体写法是：数据在名称/值对中；数据由逗号分隔；花括号保存对象；方括号保存数组</p>
<p>JSON 数据的书写格式是：名称/值对，名称/值对组合中的名称写在前面（在双引号中），值对写在后面(同样在双引号中)，中间用冒号隔开：<br>值（value）可以是双引号括起来的字符串（string）、数值(number)、boolean、 null、对象（object）或者数组（array）。这些结构可以嵌套。</p>
<p>window.JSON是浏览器内置对象<br>其中JSON.parse()表示把字符串解析为JSON对象，而JSON.stringify()表示将JSON对象解析为字符串</p>
</blockquote>
<p>eval() 可以把字符串转为JSON 但不推荐使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用数组拼接出如下字符串&quot;&gt;&lt;a href=&quot;#使用数组拼接出如下字符串&quot; class=&quot;headerlink&quot; title=&quot;使用数组拼接出如下字符串&quot;&gt;&lt;/a&gt;使用数组拼接出如下字符串&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;lt;dl class=&amp;quot;product&amp;quot;&amp;gt;&amp;lt;dt&amp;gt;女装&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;短款&amp;lt;/dd&amp;gt;&amp;lt;dd&amp;gt;冬季&amp;lt;/dd&amp;gt;&amp;lt;dd&amp;gt;春装&amp;lt;/dd&amp;gt;&amp;lt;/dl&amp;gt;&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prod = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;女装&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  styles: [&lt;span class=&quot;string&quot;&gt;&#39;短款&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;冬季&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;春装&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTplStr&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr.push(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;dl class=&quot;product&quot;&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr.push(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;dt&amp;gt;&#39;&lt;/span&gt; + data.name + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/dt&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data[&lt;span class=&quot;string&quot;&gt;&#39;styles&#39;&lt;/span&gt;]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr.push(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;dd&amp;gt;&#39;&lt;/span&gt; + data[&lt;span class=&quot;string&quot;&gt;&#39;styles&#39;&lt;/span&gt;][key] + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/dd&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr.push(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/dl&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = getTplStr(prod) &lt;span class=&quot;comment&quot;&gt;//result拼接后的字符串&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="字符串" scheme="https://www.kmac007.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="JSON" scheme="https://www.kmac007.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>函数与函数作用域</title>
    <link href="https://www.kmac007.com/2017/%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F.html"/>
    <id>https://www.kmac007.com/2017/函数与作用域.html</id>
    <published>2017-03-15T11:56:07.000Z</published>
    <updated>2017-08-26T10:45:09.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h1><p>函数声明与函数表达式的区别在于:</p>
<ol>
<li>函数声明是function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  而函数表达式采用的是变量赋值的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  这种写法将一个匿名函数赋值给变量，这个匿名函数又称为函数表达式。</p>
<ol>
<li>由于函数声明前置，对于函数声明不必放到调用的前面，而函数表达式必须放到调用的前面。</li>
</ol>
<a id="more"></a>
<h1 id="变量声明前置与函数声明前置"><a href="#变量声明前置与函数声明前置" class="headerlink" title="变量声明前置与函数声明前置"></a>变量声明前置与函数声明前置</h1><p>在一个作用域下，var 声明的变量和function 声明的函数会前置。</p>
<p>变量声明前置：使用var声明变量，变量声明会被提前到函数体的顶部，初始值为undefined而变量赋值操作留在原来的位置。</p>
<p>函数声明前置：采用function命令声明函数时，整个函数会被提升到当前作用域顶部，因此在声明函数之前调用函数也是可行的。</p>
<h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><blockquote>
<p>由于JavaScript允许函数有不定数目的参数，所以我们需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。</p>
</blockquote>
<p>arguments为类数组对象，无法直接使用Aarry对象上的方法。arguments对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，arguments[1]就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p>
<blockquote>
<p>但在严格模式下：</p>
<ol>
<li><p>不允许对arguments赋值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">arguments</span>++; <span class="comment">// 语法错误</span></div></pre></td></tr></table></figure>
</li>
<li><p>arguments不再追踪参数的变化</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">　　　　a = <span class="number">2</span>;</div><div class="line">　　　　<span class="keyword">return</span> [a, <span class="built_in">arguments</span>[<span class="number">0</span>]];</div><div class="line">　　&#125;</div><div class="line">　　f(<span class="number">1</span>); <span class="comment">// 正常模式为[2,2]</span></div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</div><div class="line"><span class="meta">　　　　"use strict"</span>;</div><div class="line">　　　　a = <span class="number">2</span>;</div><div class="line">　　　　<span class="keyword">return</span> [a, <span class="built_in">arguments</span>[<span class="number">0</span>]];</div><div class="line">　　&#125;</div><div class="line">　　f(<span class="number">1</span>); <span class="comment">// 严格模式为[2,1]</span></div></pre></td></tr></table></figure>
</li>
<li><p>禁止使用arguments.callee</p>
</li>
</ol>
<p>这意味着，你无法在匿名函数内部调用自身了。</p>
</blockquote>
<h1 id="函数重载的模拟"><a href="#函数重载的模拟" class="headerlink" title="函数重载的模拟"></a>函数重载的模拟</h1><p>JS没有重载机制，但我们可以模仿重载。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="built_in">arguments</span>[<span class="number">2</span>];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="built_in">arguments</span>[<span class="number">2</span>] + <span class="built_in">arguments</span>[<span class="number">3</span>];</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//3</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//6</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//10</span></div></pre></td></tr></table></figure>
<h1 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h1><p>立即执行函数模式是一种语法，可以让你的函数在定义后立即被执行，<br>这种模式本质上就是函数表达式(命名的或者匿名的)，在创建后立即执行；<br>立即执行函数(immediate function)术语不是在ECMAScript标准中定义的，但它很短有助于描述和讨论模式；<br>这种模式有一些几部分组成：</p>
<ul>
<li>使用函数表达式定义一个函数(函数声明不能起作用)</li>
<li>在结尾加上一对括号，让函数立即被执行</li>
<li>将整个函数包裹在一对括号中(只有在你不将函数赋值给一个变量的时候才需要)</li>
</ul>
<p>主要的作用是：隔离作用域。</p>
<h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><h2 id="求n-，用递归来实现"><a href="#求n-，用递归来实现" class="headerlink" title="求n!，用递归来实现"></a>求n!，用递归来实现</h2> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数，返回参数的平方和"><a href="#写一个函数，返回参数的平方和" class="headerlink" title="写一个函数，返回参数的平方和"></a>写一个函数，返回参数的平方和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfSquares</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">    sum += <span class="built_in">Math</span>.pow(<span class="built_in">arguments</span>[i],<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = sumOfSquares(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="keyword">var</span> result2 = sumOfSquares(<span class="number">1</span>,<span class="number">3</span>)</div><div class="line"><span class="built_in">console</span>.log(result)  <span class="comment">//29</span></div><div class="line"><span class="built_in">console</span>.log(result2)  <span class="comment">//10</span></div></pre></td></tr></table></figure>
<h2 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  输出：</span></div><div class="line"><span class="comment">  undefined</span></div><div class="line"><span class="comment">  b is not defined</span></div><div class="line"><span class="comment">  原因是a声明前置，初始值为undefined，而b并没有声明</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h2 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> sayName(<span class="string">'world'</span>);</div><div class="line">sayAge(<span class="number">10</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'hello '</span>, name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sayAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(age);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  输出：</span></div><div class="line"><span class="comment">  hello world</span></div><div class="line"><span class="comment">  sayAge is not a function</span></div><div class="line"><span class="comment">  原因是sayName函数声明前置</span></div><div class="line"><span class="comment">  而sayAge采用的是函数表达式的形式，必须要声明后才能调用</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h2 id="如下代码输出什么-写出作用域链查找过程伪代码"><a href="#如下代码输出什么-写出作用域链查找过程伪代码" class="headerlink" title="如下代码输出什么? 写出作用域链查找过程伪代码"></a>如下代码输出什么? 写出作用域链查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span></div><div class="line">bar()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">30</span></div><div class="line">  foo()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//作用域链过程伪代码：</span></div><div class="line"></div><div class="line">globalContext = &#123;</div><div class="line">    AO: &#123;</div><div class="line">        x: <span class="number">10</span></div><div class="line">        foo: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">        <span class="title">bar</span>: <span class="title">function</span></span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function">    <span class="title">Scope</span>:<span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//声明<span class="title">foo</span>时得到下面</span></div><div class="line">foo.[[scope]] = globalContext.AO</div><div class="line"><span class="comment">//声明</span></div><div class="line">bar.[[scope]] = globalConetxt.AO</div><div class="line"><span class="comment">//进入bar的执行上下文</span></div><div class="line">barContext = &#123;</div><div class="line">    AO: &#123;</div><div class="line">        x: <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">    scope: globalConetext.AO</div><div class="line">&#125;</div><div class="line"><span class="comment">//进入foo的执行上下文</span></div><div class="line">fooConetxt = &#123;</div><div class="line">    AO: &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    scope: globalConetext.AO</div><div class="line">&#125;</div><div class="line"></div><div class="line">故输出为： <span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="如下代码输出什么-写出作用域链查找过程伪代码-1"><a href="#如下代码输出什么-写出作用域链查找过程伪代码-1" class="headerlink" title="如下代码输出什么? 写出作用域链查找过程伪代码"></a>如下代码输出什么? 写出作用域链查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">bar()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">30</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x)</div><div class="line">  &#125;</div><div class="line">  foo();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//作用域链查找过程伪代码：</span></div><div class="line"></div><div class="line">globleContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">10</span></div><div class="line">    bar: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">bar</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">barContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">30</span>;</div><div class="line">    foo: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globleContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">foo</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">fooContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: barContext.AO</div><div class="line">&#125;</div><div class="line">结果输出为: <span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="以下代码输出什么-写出作用域链的查找过程伪代码"><a href="#以下代码输出什么-写出作用域链的查找过程伪代码" class="headerlink" title="以下代码输出什么? 写出作用域链的查找过程伪代码"></a>以下代码输出什么? 写出作用域链的查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">bar()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">30</span>;</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x)</div><div class="line">  &#125;)()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//作用域链的查找过程伪代码：</span></div><div class="line">globleContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">10</span></div><div class="line">    bar: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">bar</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">barContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">30</span></div><div class="line">    (anonymous): <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globleContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入匿名函数执行上下文</span></div><div class="line"><span class="function"><span class="title">anonymousContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: barContext.AO</div><div class="line">&#125;</div><div class="line">所以最后输出: <span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="以下代码输出什么？-写出作用域链查找过程伪代码"><a href="#以下代码输出什么？-写出作用域链查找过程伪代码" class="headerlink" title="以下代码输出什么？ 写出作用域链查找过程伪代码"></a>以下代码输出什么？ 写出作用域链查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  <span class="keyword">var</span> a = <span class="number">5</span></div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  a++</div><div class="line">  <span class="keyword">var</span> a</div><div class="line">  fn3()</div><div class="line">  fn2()</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a)</div><div class="line">    a = <span class="number">20</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  a = <span class="number">200</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">fn()</div><div class="line"><span class="built_in">console</span>.log(a)</div><div class="line"></div><div class="line"><span class="comment">//作用域链查找过程伪代码：</span></div><div class="line">globleContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="number">1</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">    <span class="title">fn3</span>: <span class="title">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//声明<span class="title">fn</span>时:</span></div><div class="line">fn.[[scope]]=globalContext.AO</div><div class="line"><span class="comment">//声明fn3时:</span></div><div class="line">fn3.[[scope]]=globalContext.AO</div><div class="line"><span class="comment">//开始进入fn的执行上下文</span></div><div class="line">fnContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="literal">undefined</span>  <span class="comment">//输出undefined,变量声明提前</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>:<span class="title">globalContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//声明<span class="title">a</span>后</span></div><div class="line"><span class="function"><span class="title">fnContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="number">5</span>          <span class="comment">//输出5</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globalContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//<span class="title">a</span>++</span></div><div class="line"><span class="function"><span class="title">fnContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="number">6</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globalContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">fn3</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">fn3Context</span> = </span>&#123;</div><div class="line">  Ao: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: globalContext.AO   <span class="comment">//输出1  此后全局作用域下a:200</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//进入fn2的执行上下文</span></div><div class="line">fn2Context = &#123;</div><div class="line">  AO: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: fnContext.AO   <span class="comment">//输出6 此后fnContext.AO作用域下a:20</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//输出20 此后全局作用域下a:200</span></div><div class="line"><span class="comment">//输出200</span></div><div class="line"></div><div class="line">即输出结果为：<span class="literal">undefined</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">20</span> <span class="number">200</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数声明与函数表达式的区别&quot;&gt;&lt;a href=&quot;#函数声明与函数表达式的区别&quot; class=&quot;headerlink&quot; title=&quot;函数声明与函数表达式的区别&quot;&gt;&lt;/a&gt;函数声明与函数表达式的区别&lt;/h1&gt;&lt;p&gt;函数声明与函数表达式的区别在于:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数声明是function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。如：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  而函数表达式采用的是变量赋值的写法：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sayHi = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  这种写法将一个匿名函数赋值给变量，这个匿名函数又称为函数表达式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于函数声明前置，对于函数声明不必放到调用的前面，而函数表达式必须放到调用的前面。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="函数" scheme="https://www.kmac007.com/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="作用域" scheme="https://www.kmac007.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>几种方式实现元素的垂直居中</title>
    <link href="https://www.kmac007.com/2017/%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html"/>
    <id>https://www.kmac007.com/2017/几种方式实现元素的垂直居中.html</id>
    <published>2017-03-12T12:10:06.000Z</published>
    <updated>2017-08-26T05:53:10.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>HTML结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>垂直居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="flexbox布局"><a href="#flexbox布局" class="headerlink" title="flexbox布局"></a>flexbox布局</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="绝对定位负margin"><a href="#绝对定位负margin" class="headerlink" title="绝对定位负margin"></a>绝对定位负margin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  background-color: red;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.box &#123;</div><div class="line">  background-color: #000;</div><div class="line">  color: #fff;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  margin-left: -25px;</div><div class="line">  margin-top: -25px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与绝对定位负边距相似</p>
<h1 id="绝对定位和0"><a href="#绝对定位和0" class="headerlink" title="绝对定位和0"></a>绝对定位和0</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绝对定位，margin: auto; top, left, bottom, right均设为0, 子元素margin会撑开形成垂直居中</p>
<h1 id="伪元素与inline-block"><a href="#伪元素与inline-block" class="headerlink" title="伪元素与inline-block"></a>伪元素与inline-block</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  background-color: red;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line">.box &#123;</div><div class="line">  background-color: #000;</div><div class="line">  color: #fff;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div><div class="line">.container::after &#123;</div><div class="line">  content: &apos;&apos;;</div><div class="line">  display: inline-block;</div><div class="line">  width: 0;</div><div class="line">  height: 100%;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTML结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;垂直居中&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;flexbox布局&quot;&gt;&lt;a href=&quot;#flexbox布局&quot; class=&quot;headerlink&quot; title=&quot;flexbox布局&quot;&gt;&lt;/a&gt;flexbox布局&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;align-items&lt;/span&gt;: center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;table-cell&quot;&gt;&lt;a href=&quot;#table-cell&quot; class=&quot;headerlink&quot; title=&quot;table-cell&quot;&gt;&lt;/a&gt;table-cell&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>浏览器兼容</title>
    <link href="https://www.kmac007.com/2017/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9.html"/>
    <id>https://www.kmac007.com/2017/浏览器兼容.html</id>
    <published>2017-03-10T11:15:04.000Z</published>
    <updated>2017-08-26T05:52:18.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h1><p>CSS hack由于不同厂商的浏览器，比如IE, Safari, firefox, chorme，或同一厂商不同版本，如IE6和IE7，对CSS的解析认识不完全一样，因此能够导致生成页面效果不一样，得不到所需要的效果。这个时候我们需要针对不同浏览器写不同的CSS，让它能够同时兼容不同的浏览器，能在不同浏览器中也能得到我们想要的页面效果。</p>
<h1 id="浏览器兼容的思路"><a href="#浏览器兼容的思路" class="headerlink" title="浏览器兼容的思路"></a>浏览器兼容的思路</h1><h2 id="要不要做"><a href="#要不要做" class="headerlink" title="要不要做"></a>要不要做</h2><ul>
<li>产品的角度（产品的受众、受众的浏览器比例、效果优先还是基本功能优先）</li>
<li>成本角度（有无必要做某件事情）</li>
</ul>
<h2 id="做到什么程度"><a href="#做到什么程度" class="headerlink" title="做到什么程度"></a>做到什么程度</h2><ul>
<li>让哪些浏览器支持哪些效果</li>
</ul>
<h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><ul>
<li>根据兼容需求选择技术框架/库(jquery)</li>
<li>根据兼容需求选择兼容工具(html5shiv.js、repond.js、css reset、normalize.css、Modernizr)、postCSS</li>
<li>条件注释、CSS hack、js能力检测做一些修补</li>
</ul>
<a id="more"></a>
<h1 id="列举5种以上浏览器兼容的写法"><a href="#列举5种以上浏览器兼容的写法" class="headerlink" title="列举5种以上浏览器兼容的写法"></a>列举5种以上浏览器兼容的写法</h1><ol>
<li><p>条件注释<br>条件注释（Conditional comments）对IE的版本和IE非IE有优秀的区分能力，是WEB设计中常用的hack方法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE]&gt;用于 IE &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 6]&gt;用于 IE6 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 7]&gt;用于 IE7 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;用于 IE8 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 9]&gt;用于 IE9 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gt IE 6]&gt; 用于 IE6 以上版本&lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lte IE 7]&gt; 用于 IE7或更低版本 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gte IE 8]&gt;用于 IE8 或更高版本 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;用于 IE9 以下版本&lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if !IE]&gt; --&gt;</span>用于非 IE <span class="comment">&lt;!-- &lt;![endif]--&gt;</span></div><div class="line">使用了条件注释的页面在 Windows Internet Explorer 9 中可正常工作，但在 Internet Explorer 10 中无法正常工作。 IE10不再支持条件注释</div></pre></td></tr></table></figure>
</li>
<li><p>CSS属性前缀法<br>属性前缀法(即类内部Hack)：例如 IE6能识别下划线””和星号” <em> “，IE7能识别星号” </em> “，但不能识别下划线””，IE6~IE10都认识”\9”，但firefox前述三个都不能认识</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  color: red;</div><div class="line">  _color: blue; /*ie6*/</div><div class="line">  *color: pink; /*ie67*/</div><div class="line">  color: yellow\9;  /*ie/edge 6-8*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>选择器前缀法（即选择器Hack）</p>
<p> 例如</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IE6能识别*html .class&#123;&#125;，</div><div class="line">IE7能识别*+html .class&#123;&#125;或者*:first-child+html .class&#123;&#125;。</div></pre></td></tr></table></figure>
</li>
<li><p>浏览器前缀</p>
</li>
</ol>
<ul>
<li>-webkit- ，针对safari，chrome浏览器的内核CSS写法</li>
<li>-moz-，针对firefox浏览器的内核CSS写法</li>
<li>-ms-，针对ie内核的CSS写法</li>
<li>-o-，针对Opera内核的CSS写法<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">-o-border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4-以下工具-名词是做什么的"><a href="#4-以下工具-名词是做什么的" class="headerlink" title="4. 以下工具/名词是做什么的"></a>4. 以下工具/名词是做什么的</h1><ul>
<li>条件注释<ul>
<li>条件注释 (conditional comment) 是于HTML源码中被IE有条件解释的语句。条件注释可被用来向IE提供及隐藏代码。使用了条件注释的页面在 Windows Internet Explorer 9 中可正常工作，但在 Internet Explorer 10 中无法正常工作。 IE10不再支持条件注释</li>
</ul>
</li>
<li>IE Hack<ul>
<li>针对IE浏览器编写不同的CSS以达到让IE正常解析CSS。</li>
</ul>
</li>
<li>js 能力检测<ul>
<li>识别浏览器的能力而不是识别特定的浏览器。只需根据浏览器支持的功能给出解决方案。</li>
</ul>
</li>
<li>html5shiv.js<ul>
<li>用于解决IE9以下版本浏览器对HTML5新增标签不识别，并导致CSS不起作用的问题。</li>
</ul>
</li>
<li>respond.js<ul>
<li>用于为 IE6-8 以及其它不支持 CSS3 -<br>媒体查询功能的浏览器提供媒体查询的 min-width 和 max-width 特性，实现响应式网页设计。</li>
</ul>
</li>
<li>css reset<ul>
<li>去除浏览器的默认样式。</li>
</ul>
</li>
<li>normalize.css<ul>
<li>Normalize.css 只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。</li>
</ul>
</li>
<li>Modernizr<ul>
<li>是一个用来检测浏览器功能支持情况的 JavaScript 库。通过这个库我们可以检测不同的浏览器对于HTML5特性的支持情况。</li>
</ul>
</li>
<li>postCSS<ul>
<li>它可以被理解为一个平台，可以让一些插件在上面跑，它提供了一个解析器，可以将CSS解析成抽象语法树，通过PostCSS这个平台，我们能够开发一些插件，来处理CSS。热门插件如autoprefixer，它可以帮我们处理兼容问题，只需正常写CSS，autoprefixer可以帮我的自动生成兼容性代码</li>
</ul>
</li>
</ul>
<h1 id="查询属性兼容性"><a href="#查询属性兼容性" class="headerlink" title="查询属性兼容性"></a>查询属性兼容性</h1><p><a href="http://caniuse.com/" target="_blank" rel="external">http://caniuse.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-hack&quot;&gt;&lt;a href=&quot;#CSS-hack&quot; class=&quot;headerlink&quot; title=&quot;CSS hack&quot;&gt;&lt;/a&gt;CSS hack&lt;/h1&gt;&lt;p&gt;CSS hack由于不同厂商的浏览器，比如IE, Safari, firefox, chorme，或同一厂商不同版本，如IE6和IE7，对CSS的解析认识不完全一样，因此能够导致生成页面效果不一样，得不到所需要的效果。这个时候我们需要针对不同浏览器写不同的CSS，让它能够同时兼容不同的浏览器，能在不同浏览器中也能得到我们想要的页面效果。&lt;/p&gt;
&lt;h1 id=&quot;浏览器兼容的思路&quot;&gt;&lt;a href=&quot;#浏览器兼容的思路&quot; class=&quot;headerlink&quot; title=&quot;浏览器兼容的思路&quot;&gt;&lt;/a&gt;浏览器兼容的思路&lt;/h1&gt;&lt;h2 id=&quot;要不要做&quot;&gt;&lt;a href=&quot;#要不要做&quot; class=&quot;headerlink&quot; title=&quot;要不要做&quot;&gt;&lt;/a&gt;要不要做&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;产品的角度（产品的受众、受众的浏览器比例、效果优先还是基本功能优先）&lt;/li&gt;
&lt;li&gt;成本角度（有无必要做某件事情）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;做到什么程度&quot;&gt;&lt;a href=&quot;#做到什么程度&quot; class=&quot;headerlink&quot; title=&quot;做到什么程度&quot;&gt;&lt;/a&gt;做到什么程度&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;让哪些浏览器支持哪些效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何做&quot;&gt;&lt;a href=&quot;#如何做&quot; class=&quot;headerlink&quot; title=&quot;如何做&quot;&gt;&lt;/a&gt;如何做&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据兼容需求选择技术框架/库(jquery)&lt;/li&gt;
&lt;li&gt;根据兼容需求选择兼容工具(html5shiv.js、repond.js、css reset、normalize.css、Modernizr)、postCSS&lt;/li&gt;
&lt;li&gt;条件注释、CSS hack、js能力检测做一些修补&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="兼容性" scheme="https://www.kmac007.com/categories/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    
      <category term="兼容性" scheme="https://www.kmac007.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>常见的CSS布局</title>
    <link href="https://www.kmac007.com/2017/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80.html"/>
    <id>https://www.kmac007.com/2017/CSS常见布局.html</id>
    <published>2017-03-07T09:20:34.000Z</published>
    <updated>2017-08-26T05:53:19.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五种方式实现三栏布局"><a href="#五种方式实现三栏布局" class="headerlink" title="五种方式实现三栏布局"></a>五种方式实现三栏布局</h1><p>采用五种方式实现横向左右定宽，中间自适应的三栏布局</p>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><script async src="//jsfiddle.net/kmac007/pgd5xo51/embed/css,result,html/dark/"></script>

<p>左右模块各自向左右浮动，并设置中间部分的左右margin值<br>缺点是要按照left,right,main这样的顺序写HTML。</p>
<a id="more"></a>
<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><script async src="//jsfiddle.net/kmac007/qrgnbc3u/2/embed/css,result,html/dark/"></script>

<p>实用。</p>
<h2 id="flexbox布局"><a href="#flexbox布局" class="headerlink" title="flexbox布局"></a>flexbox布局</h2><script async src="//jsfiddle.net/kmac007/smw3gh97/embed/css,result,html/dark/"></script>

<p>要考虑兼容性的问题，对于移动端我一般采用这种方式来进行三栏布局。</p>
<h2 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h2><script async src="//jsfiddle.net/kmac007/Lr4shy0y/embed/css,result,html/dark/"></script>

<p>缺点：无法设置main与两边的间隔</p>
<h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><script async src="//jsfiddle.net/kmac007/adsc5ufx/embed/css,html,result/dark/"></script>

<p>缺点：兼容性有点尴尬啊。。</p>
<h1 id="单栏布局"><a href="#单栏布局" class="headerlink" title="单栏布局"></a>单栏布局</h1><script async src="//jsfiddle.net/kmac007/4cxpeon6/embed/css,html,result/dark/"></script>


<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><script async src="//jsfiddle.net/kmac007/j4qsdtmn/embed/css,html,result/dark/"></script>

<p>main先加载，三个部分均左浮动，left和right设置负margin与main处在同一行，再通过相对定位调整位置。缺点是当页面缩小，页面结构会乱。</p>
<blockquote>
<p>对于这种方法。。有之前那么多种优秀的方法，迫不得已我是不会用的。</p>
</blockquote>
<h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><script async src="//jsfiddle.net/kmac007/5nbsL11h/embed/css,html,result/dark/"></script>

<p>给main一个包裹层，设置左右margin，三个部分均浮动，其中左右定宽，中间100%,左右通过负margin回到合适的位置。</p>
<blockquote>
<p>同样的，对于这种方法。。有之前那么多种优秀的方法，迫不得已我是不会用的。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;五种方式实现三栏布局&quot;&gt;&lt;a href=&quot;#五种方式实现三栏布局&quot; class=&quot;headerlink&quot; title=&quot;五种方式实现三栏布局&quot;&gt;&lt;/a&gt;五种方式实现三栏布局&lt;/h1&gt;&lt;p&gt;采用五种方式实现横向左右定宽，中间自适应的三栏布局&lt;/p&gt;
&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;script async src=&quot;//jsfiddle.net/kmac007/pgd5xo51/embed/css,result,html/dark/&quot;&gt;&lt;/script&gt;

&lt;p&gt;左右模块各自向左右浮动，并设置中间部分的左右margin值&lt;br&gt;缺点是要按照left,right,main这样的顺序写HTML。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
      <category term="布局" scheme="https://www.kmac007.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析浮动定位BFC边距合并</title>
    <link href="https://www.kmac007.com/2017/%E6%B5%85%E6%9E%90%E6%B5%AE%E5%8A%A8%E5%AE%9A%E4%BD%8DBFC%E8%BE%B9%E8%B7%9D%E5%90%88%E5%B9%B6.html"/>
    <id>https://www.kmac007.com/2017/浅析浮动定位BFC边距合并.html</id>
    <published>2017-03-05T07:00:55.000Z</published>
    <updated>2017-08-26T05:53:13.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响"><a href="#浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响" class="headerlink" title="浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?"></a>浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?</h1><p>浮动的特征是使元素脱离普通流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素才停下来；</p>
<p><strong>对父容器的影响:</strong> 父容器中的元素浮动后，脱离普通流会使得父容器失去高度；</p>
<p><strong>对其他浮动元素的影响：</strong> 如果是同一方向浮动，相邻的浮动元素会并列在同一行，空间不够，会换到下一行</p>
<p><strong>对普通元素的影响</strong>： 浮动元素会脱离普通流，普通元素会占据它原有的空间，从而会出现浮动元素覆盖普通元素</p>
<p><strong>对文字的影响：</strong> 文字可以感知的浮动元素的存在，文字会在浮动元素周围形成环绕效果</p>
<a id="more"></a>
<h1 id="清除浮动指什么-如何清除浮动-两种以上方法"><a href="#清除浮动指什么-如何清除浮动-两种以上方法" class="headerlink" title="清除浮动指什么? 如何清除浮动? 两种以上方法"></a>清除浮动指什么? 如何清除浮动? 两种以上方法</h1><ul>
<li>清除浮动指的是通过clear属性解决由元素浮动引起的父容器的塌陷问题。</li>
<li><p>清楚浮动的方法：</p>
<ol>
<li>方法一：父级元素定义：overflow: hidden;</li>
<li><p>方法二：使用伪元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>方法三：在父元素末尾添加一个空div,设置样式clear: both (与方法二类似)</p>
</li>
</ol>
</li>
</ul>
<h1 id="有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？"><a href="#有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？" class="headerlink" title="有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？"></a>有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？</h1><ol>
<li>static: 默认值,没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）</li>
<li>relative: 生成相对定位元素，相对于元素本身正常位置进行定位。</li>
<li>absolute: 脱离普通流，生成绝对定位的元素，相对于static定位以外的第一个祖先元素（offset parent）进行定位,元素的位置通过 left, top, right 以及 bottom 属性进行规定</li>
<li>fixed: 绝对定位，脱离普通流，相对于浏览器窗口进行定位。元素的位置通过 left, top, right 以及 bottom 属性进行规定</li>
<li>sticky: CSS3新属性，表现类似position: relative和position: fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置</li>
</ol>
<h1 id="z-index-有什么作用-如何使用"><a href="#z-index-有什么作用-如何使用" class="headerlink" title="z-index 有什么作用? 如何使用?"></a>z-index 有什么作用? 如何使用?</h1><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。元素可拥有负的 z-index 属性值。</p>
<ul>
<li>应用 ：元素脱离了普通流，覆盖了普通元素，要修改显示顺序，可以为两者添加z-index属性值，其中属性值越大，显示的越靠前。</li>
</ul>
<h1 id="position-relative和负margin都可以使元素位置发生偏移-二者有什么区别"><a href="#position-relative和负margin都可以使元素位置发生偏移-二者有什么区别" class="headerlink" title="position:relative和负margin都可以使元素位置发生偏移?二者有什么区别"></a>position:relative和负margin都可以使元素位置发生偏移?二者有什么区别</h1><ul>
<li>position: relative: 相对于自身偏移，不脱离普通流，仍占据原有空间，不影响其他元素</li>
<li>负margin: 除了让元素自身发生偏移还影响其它普通流中的元素。</li>
</ul>
<h1 id="BFC-是什么？如何生成-BFC？BFC-有什么作用？举例说明"><a href="#BFC-是什么？如何生成-BFC？BFC-有什么作用？举例说明" class="headerlink" title="BFC 是什么？如何生成 BFC？BFC 有什么作用？举例说明"></a>BFC 是什么？如何生成 BFC？BFC 有什么作用？举例说明</h1><ul>
<li>BFC(Block formatting context)直译为“块级格式化上下文 ”。BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。同时BFC任然属于文档中的普通流。</li>
<li>如何生成BFC：当一个HTML元素满足下面条件的任何一点，都可以产生Block Formatting Context<ul>
<li>float: 除了none以外的值</li>
<li>overflow除了visible意外的值（hidden, auto, scroll）</li>
<li>display(table-cell, table-caption, inline-block)</li>
<li>position(absolute, fixed)</li>
</ul>
</li>
<li>BFC的作用<ol>
<li><strong>阻止边距折叠：</strong><br> 我们知道在一般情况下，两个上下相邻的盒子会折叠它们垂直方向接触到的边距，这种情况只会发生在同一个Block Formatting Context中。换句话说，在同一个布局环境中（Block Formatting Context）是边距折叠的必要条件。这也就是为什么浮动的元素和绝对定位元素不会发生边距折叠的原因（当然还有很多种情况也不会折叠）。</li>
<li><strong>可以包含浮动元素如:</strong></li>
<li><strong>阻止元素被浮动覆盖，如:</strong></li>
</ol>
</li>
</ul>
<h1 id="在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例"><a href="#在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例" class="headerlink" title="在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例"></a>在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例</h1><ul>
<li>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。即：<strong>两个或多个毗邻的普通流中的块元素垂直方向上的 margin 会折叠</strong> 当然负margin的情况下也会出现margin合并的现象。</li>
<li>不让相邻元素外边距合并：<ol>
<li>浮动元素、inline-block元素、绝对定位元素不会和垂直方向上其他元素的margin折叠(这里指的是上下相邻的元素)</li>
<li>创建了格式化上下文的元素，不和它的子元素发生margin折叠（这里指的是BFC的元素和它的子元素不会发生折叠）</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响&quot;&gt;&lt;a href=&quot;#浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响&quot; class=&quot;headerlink&quot; title=&quot;浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?&quot;&gt;&lt;/a&gt;浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?&lt;/h1&gt;&lt;p&gt;浮动的特征是使元素脱离普通流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素才停下来；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对父容器的影响:&lt;/strong&gt; 父容器中的元素浮动后，脱离普通流会使得父容器失去高度；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对其他浮动元素的影响：&lt;/strong&gt; 如果是同一方向浮动，相邻的浮动元素会并列在同一行，空间不够，会换到下一行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对普通元素的影响&lt;/strong&gt;： 浮动元素会脱离普通流，普通元素会占据它原有的空间，从而会出现浮动元素覆盖普通元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对文字的影响：&lt;/strong&gt; 文字可以感知的浮动元素的存在，文字会在浮动元素周围形成环绕效果&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="BFC" scheme="https://www.kmac007.com/tags/BFC/"/>
    
      <category term="浮动" scheme="https://www.kmac007.com/tags/%E6%B5%AE%E5%8A%A8/"/>
    
      <category term="定位" scheme="https://www.kmac007.com/tags/%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>CSS常见样式</title>
    <link href="https://www.kmac007.com/2017/CSS%E5%B8%B8%E8%A7%81%E6%A0%B7%E5%BC%8F.html"/>
    <id>https://www.kmac007.com/2017/CSS常见样式.html</id>
    <published>2017-03-03T12:06:36.000Z</published>
    <updated>2017-08-26T05:53:32.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="块级元素和行内元素分别有哪些？"><a href="#块级元素和行内元素分别有哪些？" class="headerlink" title="块级元素和行内元素分别有哪些？"></a>块级元素和行内元素分别有哪些？</h1><ul>
<li>块级元素：div, p, h1-h6, table, form, ul, li, ol, address, article, aside, audio, blockquote, canvas,header,footer等</li>
<li>行内元素: span, a, input, button, lable, select, textarea, em, br, img, strong</li>
</ul>
<p>区别：</p>
<ol>
<li>行内元素只能容纳行内元素和文本。而块级可以容纳块级元素和行内元素。</li>
<li>块级元素可以设定宽高，而行内元素不可以。</li>
<li>块级元素独占一行，而行内元素可以与其它行内元素共同处在一行。</li>
<li>行内元素的默认宽度为内容的宽度，块级元素默认宽度与浏览器窗口宽度一致</li>
</ol>
<a id="more"></a>
<h1 id="什么是-CSS-继承-哪些属性能继承，哪些不能？"><a href="#什么是-CSS-继承-哪些属性能继承，哪些不能？" class="headerlink" title="什么是 CSS 继承? 哪些属性能继承，哪些不能？"></a>什么是 CSS 继承? 哪些属性能继承，哪些不能？</h1><blockquote>
<p>CSS继承: 子元素继承了父元素的CSS属性。</p>
<ul>
<li>不可继承属性：display, margin, border, padding, background, width, height, overflow, z-index, float, position, vertical-align</li>
<li>所有元素可继承：visibility和cursor</li>
<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。</li>
<li>块状元素可继承：text-indent和text-align。</li>
<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li>
<li>表格元素可继承：border-collapse。</li>
</ul>
</blockquote>
<h1 id="如何让块级元素水平居中？如何让行内元素水平居中"><a href="#如何让块级元素水平居中？如何让行内元素水平居中" class="headerlink" title="如何让块级元素水平居中？如何让行内元素水平居中?"></a>如何让块级元素水平居中？如何让行内元素水平居中?</h1><ul>
<li>块级元素水平居中：给块级元素设定宽高,margin: 0 auto;</li>
<li>多个块级元素可以使用inline-block和flex</li>
<li>行内元素: text-align: center;</li>
</ul>
<h1 id="用-CSS-实现一个三角形"><a href="#用-CSS-实现一个三角形" class="headerlink" title="用 CSS 实现一个三角形"></a>用 CSS 实现一个三角形</h1><script async src="//jsfiddle.net/kmac007/bsn964yt/embed/result,css,html/dark/"></script>

<h1 id="单行文本溢出加-…如何实现"><a href="#单行文本溢出加-…如何实现" class="headerlink" title="单行文本溢出加 …如何实现?"></a>单行文本溢出加 …如何实现?</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="px-em-rem-有什么区别-如何理解dpr"><a href="#px-em-rem-有什么区别-如何理解dpr" class="headerlink" title="px, em, rem 有什么区别,如何理解dpr?"></a>px, em, rem 有什么区别,如何理解dpr?</h1><ul>
<li>px: 相对长度单位。像素px是相对于显示器屏幕分辨率而言的</li>
<li>em: 指的是相对于其父级元素的大小，即倍数。</li>
<li>rem: 相对于根html元素的大小，即倍数。</li>
<li>dpr: 设备像素比。设备像素比 = 物理像素/设备独立像素(在某一方向上，x或y)，桌面端,CSS的1个像素都是对应着电脑屏幕的1个物理像素。而如果DPR为2时，CSS的1像素就会对应2物理像素。</li>
</ul>
<h1 id="解释下面代码的作用-为什么要加引号-字体里-5b8b-4f53代表什么"><a href="#解释下面代码的作用-为什么要加引号-字体里-5b8b-4f53代表什么" class="headerlink" title="解释下面代码的作用?为什么要加引号?字体里\5b8b\4f53代表什么?"></a>解释下面代码的作用?为什么要加引号?字体里\5b8b\4f53代表什么?</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> tahoma,arial,<span class="string">'Hiragino Sans GB'</span>,<span class="string">'\5b8b\4f53'</span>,sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>字体大小：12px</li>
<li>字体行距：1.5倍</li>
<li>字体选择的优先级从高到低：tahoma -&gt; … -&gt; sans-serif</li>
<li>字体描述需要加引号的情况，常见有下面几种：<ol>
<li>字体描述使用的中文</li>
<li>字体描述使用英文，中间有空格</li>
<li>字体描述使用unicode编码<br>\5b8b\4f53 是unicode编码模式，表示“宋体”</li>
</ol>
</li>
</ul>
<p>控制台中输入：escape(“字体”)将字体中文转换为unicode编码格式</p>
<h1 id="常见样式"><a href="#常见样式" class="headerlink" title="常见样式"></a>常见样式</h1><h2 id="实现按钮"><a href="#实现按钮" class="headerlink" title="实现按钮"></a>实现按钮</h2><script async src="//jsfiddle.net/kmac007/4649kayL/embed/result,html,css/"></script>

<h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><script async src="//jsfiddle.net/kmac007/7wgb0Lfp/embed/result,html,css/dark/"></script>

<h2 id="实现Card"><a href="#实现Card" class="headerlink" title="实现Card"></a>实现Card</h2><script async src="//jsfiddle.net/kmac007/xbe9xqo0/embed/result,html,css/"></script>

<h1 id="text-align-center的作用是什么，作用在什么元素上？能让什么元素水平居中"><a href="#text-align-center的作用是什么，作用在什么元素上？能让什么元素水平居中" class="headerlink" title="text-align: center的作用是什么，作用在什么元素上？能让什么元素水平居中"></a>text-align: center的作用是什么，作用在什么元素上？能让什么元素水平居中</h1><p>作用是使得元素中的文本水平居中。作用在父元素上，能让行内元素以及块级元素中display为inline和inline-block元素居中。</p>
<h1 id="IE-盒模型和W3C盒模型有什么区别"><a href="#IE-盒模型和W3C盒模型有什么区别" class="headerlink" title="IE 盒模型和W3C盒模型有什么区别?"></a>IE 盒模型和W3C盒模型有什么区别?</h1><ul>
<li>IE盒模型的宽度和高度包含border,padding和content 即：box-sizing: border-box;</li>
<li>W3C盒模型只包含content部分的宽高 默认: box-sizing: content-box;</li>
</ul>
<h1 id="box-sizing-border-box-的作用是什么？"><a href="#box-sizing-border-box-的作用是什么？" class="headerlink" title="*{ box-sizing: border-box;}的作用是什么？"></a>*{ box-sizing: border-box;}的作用是什么？</h1><p>设置为以border,padding,content为宽高的盒模型。</p>
<h1 id="line-height-2和linde-height-200-有什么区别？"><a href="#line-height-2和linde-height-200-有什么区别？" class="headerlink" title="line-height: 2和linde-height: 200%有什么区别？"></a>line-height: 2和linde-height: 200%有什么区别？</h1><p>line-height: 2 表示根据子元素自己字体的大小乘以2来计算行高，而line-height: 200% 表示根据父元素的字体大小计算行高，并且子元素会继承父元素的行高。</p>
<h1 id="inline-block有什么特性？如何去除缝隙？高度不一样的inline-block元素如何顶端对齐"><a href="#inline-block有什么特性？如何去除缝隙？高度不一样的inline-block元素如何顶端对齐" class="headerlink" title="inline-block有什么特性？如何去除缝隙？高度不一样的inline-block元素如何顶端对齐?"></a>inline-block有什么特性？如何去除缝隙？高度不一样的inline-block元素如何顶端对齐?</h1><p>inline-block使元素具有内联的特性时， 内容又具有块级元素的特性，可以设置宽高等；</p>
<p>去除缝隙有两种方法：</p>
<pre><code>1.去除两元素间的空白字符，

2.将父元素的字体大小设置为0，再分别设置它们的字体大小；
</code></pre><p>高度不一样时，对具有inline-block属性的元素使用vertical-align: top使其对其。</p>
<h1 id="CSS-sprite-是什么"><a href="#CSS-sprite-是什么" class="headerlink" title="CSS sprite 是什么?"></a>CSS sprite 是什么?</h1><p>CSS精灵，指的是将多张图片拼接在一起，通过改变background-position来改变显示出来的图片，达到减少HTTP请求，提高页面性能的效果。</p>
<h1 id="让一个元素”看不见”有几种方式？有什么区别"><a href="#让一个元素”看不见”有几种方式？有什么区别" class="headerlink" title="让一个元素”看不见”有几种方式？有什么区别?"></a>让一个元素”看不见”有几种方式？有什么区别?</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">opacity: 0;  使元素变得透明，仍处在页面上</div><div class="line">display: none; 使元素在页面上消失,不占用空间</div><div class="line">visibility: hidden; 使元素不可见，但仍在页面上占据空间</div><div class="line">background-color: rgba(0, 0, 0, 0.2) 只是背景色透明</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;块级元素和行内元素分别有哪些？&quot;&gt;&lt;a href=&quot;#块级元素和行内元素分别有哪些？&quot; class=&quot;headerlink&quot; title=&quot;块级元素和行内元素分别有哪些？&quot;&gt;&lt;/a&gt;块级元素和行内元素分别有哪些？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;块级元素：div, p, h1-h6, table, form, ul, li, ol, address, article, aside, audio, blockquote, canvas,header,footer等&lt;/li&gt;
&lt;li&gt;行内元素: span, a, input, button, lable, select, textarea, em, br, img, strong&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;行内元素只能容纳行内元素和文本。而块级可以容纳块级元素和行内元素。&lt;/li&gt;
&lt;li&gt;块级元素可以设定宽高，而行内元素不可以。&lt;/li&gt;
&lt;li&gt;块级元素独占一行，而行内元素可以与其它行内元素共同处在一行。&lt;/li&gt;
&lt;li&gt;行内元素的默认宽度为内容的宽度，块级元素默认宽度与浏览器窗口宽度一致&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
      <category term="样式" scheme="https://www.kmac007.com/tags/%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器</title>
    <link href="https://www.kmac007.com/2017/CSS%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>https://www.kmac007.com/2017/CSS选择器.html</id>
    <published>2017-03-02T11:26:31.000Z</published>
    <updated>2017-08-26T05:53:40.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="class和id的使用场景？"><a href="#class和id的使用场景？" class="headerlink" title="class和id的使用场景？"></a>class和id的使用场景？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class 用于选择页面上带相同类属性的元素，可以有多个</div><div class="line">id    它是唯一的，选择页面上唯一匹配id属性的元素</div></pre></td></tr></table></figure>
<h1 id="CSS选择器常见的有几种？"><a href="#CSS选择器常见的有几种？" class="headerlink" title="CSS选择器常见的有几种？"></a>CSS选择器常见的有几种？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1. 元素选择器 如：p, h1, span</div><div class="line">2. 类选择器 .class-name</div><div class="line">3. id选择器 #id-name</div><div class="line">4. 通配选择器 *</div><div class="line">5. 属性选择器 E[attr], E[attr=value]等</div><div class="line">6. 组合选择器  E,F 多元素选择器</div><div class="line">              E F 后代选择器</div><div class="line">              E&gt;F 子元素选择器</div><div class="line">              E+F 相邻兄弟选择器</div><div class="line">              E~F 普通相邻选择器</div><div class="line">7. 伪类选择器 E:first-child, E:hover, E:nth-child(n)等</div><div class="line">8. 伪元素选择器 E::before, E::after</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="3-选择器的优先级是怎样的-对于复杂场景如何计算优先级？"><a href="#3-选择器的优先级是怎样的-对于复杂场景如何计算优先级？" class="headerlink" title="3. 选择器的优先级是怎样的?对于复杂场景如何计算优先级？"></a>3. 选择器的优先级是怎样的?对于复杂场景如何计算优先级？</h1><p>要了解选择器的优先级，必须先知道CSS的特殊性，特殊性即CSS的优先级，而特殊性值的决定了CSS的优先级。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">选择器的特殊性值表述为4个部分，用0,0,0,0表示。</div><div class="line">1. ID选择器的特殊性值，加0,1,0,0。</div><div class="line">2. 类选择器，属性选择器的特殊性值，加0,0,1,0。</div><div class="line">3. 元素和伪元素的特殊性值, 加0,0,0,1。</div><div class="line">4. 通配选择器*对特殊性没有贡献，即0,0,0,0。</div><div class="line">5. 最后一个比较特殊一个标志!important（权重），它没有特殊性值，但它的优先级是最高的，可以用1,0,0,0表示。</div></pre></td></tr></table></figure></p>
<p>场景下，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  div a &#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">blue</span>; <span class="comment">/*这里的优先级为0,0,0,2*/</span></span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="css">  <span class="selector-class">.demo</span> <span class="selector-tag">a</span> &#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">red</span>; <span class="comment">/*这里的优先级为0,0,1,1 故这个优先级较高*/</span></span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>再者，1,0,0,0是要比0,99,99,99优先级要高的，因此我们可以得出常见的选择器的优先级为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. !important: 在属性后面使用 !important 会覆盖页面内任何位置定义的元素样式</div><div class="line">2. 内联样式</div><div class="line">3. ID选择器</div><div class="line">4. 类选择器，属性选择器</div><div class="line">5. 元素和伪元素选择器</div><div class="line">6. 通配选择器</div></pre></td></tr></table></figure></p>
<h1 id="4-a-link-a-hover-a-active-a-visited-的顺序是怎样的？-为什么？"><a href="#4-a-link-a-hover-a-active-a-visited-的顺序是怎样的？-为什么？" class="headerlink" title="4.a:link, a:hover, a:active, a:visited 的顺序是怎样的？ 为什么？"></a>4.a:link, a:hover, a:active, a:visited 的顺序是怎样的？ 为什么？</h1><blockquote>
<p>css会先查看规则的权重（!important），加了权重的优先级最高，当权重相同的时候，会比较规则的特殊性，根据（3）的优先级计算规则决定哪条规则起作用，当特殊性值也一样的时候，css规则会按顺序排序，后声明的规则优先级高</p>
</blockquote>
<p>一个链接只有访问和未访问的状态，因此 :link 与 :visited 谁前谁后都可以。要保证点击后即active有样式变化，:active必须要覆盖:hover，因此:active要在:hover之后。要保证鼠标滑过有效果，:hover必须要在:link和:visited后。因此一般的顺序为：</p>
<ol>
<li>a:link</li>
<li>a:visited</li>
<li>a:hover</li>
<li>a:active</li>
</ol>
<p>有人将这个<strong>LVHT</strong>(LoVe HAte)称为“爱恨原则”。</p>
<h1 id="5-以下选择器分别是什么意思"><a href="#5-以下选择器分别是什么意思" class="headerlink" title="5. 以下选择器分别是什么意思?"></a>5. 以下选择器分别是什么意思?</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#header&#123;             id为header的元素</div><div class="line">&#125;</div><div class="line">.header&#123;             class为header的元素</div><div class="line">&#125;</div><div class="line">.header .logo&#123;       class为header的所有class为logo的后代元素</div><div class="line">&#125;</div><div class="line">.header.mobile&#123;       class同时包含header和mobile的元素</div><div class="line">&#125;</div><div class="line">.header p, .header h3&#123;   class为header的后代元素中所有的p和h3元素</div><div class="line">&#125;</div><div class="line">#header .nav&gt;li&#123;    id为header后代元素中class为.nav的子元素li</div><div class="line">&#125;</div><div class="line">#header a:hover&#123;  id为header后代元素中a的伪类:hover</div><div class="line">&#125;</div><div class="line">#header .logo~p&#123;  id为header的后代元素中与class为logo同级的p元素</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span> <span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>&#123;</div><div class="line">&#125;  id为header后代中type="text"的input的元素</div></pre></td></tr></table></figure>
<ul>
<li>列出你知道的伪类选择器<ol>
<li>:hover</li>
<li>:link</li>
<li>:visited</li>
<li>:active</li>
<li>:focus</li>
<li>:checked</li>
<li>:enabled</li>
<li>:first-of-type</li>
<li>:first-child</li>
<li>:nth-child(n)</li>
</ol>
</li>
</ul>
<ul>
<li>div:first-child和div:first-of-type的作用和区别<ul>
<li>div:first-child 指的是当前元素父元素下的第一个子元素</li>
<li>div:first-of-type指的是当前元素父元素下拥有相同标签的第一个子元素</li>
</ul>
</li>
</ul>
<ul>
<li>运行如下代码，解析下输出样式的原因。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.item1:first-child&#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line">.item1:first-of-type&#123;</div><div class="line">  background: blue;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line"> &lt;div class=&quot;ct&quot;&gt;</div><div class="line">   &lt;p class=&quot;item1&quot;&gt;aa&lt;/p&gt;</div><div class="line">   &lt;h3 class=&quot;item1&quot;&gt;bb&lt;/h3&gt;</div><div class="line">   &lt;h3 class=&quot;item1&quot;&gt;ccc&lt;/h3&gt;</div><div class="line"> &lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>原因是: .item1:first-child匹配了类为.item1的父元素的第一个子元素;.item:first-of-type匹配了类为.item1的父元素下各种相同标签的第一个子元素，即p和h3的第一个。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;class和id的使用场景？&quot;&gt;&lt;a href=&quot;#class和id的使用场景？&quot; class=&quot;headerlink&quot; title=&quot;class和id的使用场景？&quot;&gt;&lt;/a&gt;class和id的使用场景？&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class 用于选择页面上带相同类属性的元素，可以有多个&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;id    它是唯一的，选择页面上唯一匹配id属性的元素&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;CSS选择器常见的有几种？&quot;&gt;&lt;a href=&quot;#CSS选择器常见的有几种？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器常见的有几种？&quot;&gt;&lt;/a&gt;CSS选择器常见的有几种？&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1. 元素选择器 如：p, h1, span&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. 类选择器 .class-name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3. id选择器 #id-name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. 通配选择器 *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5. 属性选择器 E[attr], E[attr=value]等&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6. 组合选择器  E,F 多元素选择器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              E F 后代选择器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              E&amp;gt;F 子元素选择器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              E+F 相邻兄弟选择器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              E~F 普通相邻选择器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7. 伪类选择器 E:first-child, E:hover, E:nth-child(n)等&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8. 伪元素选择器 E::before, E::after&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="https://www.kmac007.com/2017/CSS%E5%9F%BA%E7%A1%80.html"/>
    <id>https://www.kmac007.com/2017/CSS基础.html</id>
    <published>2017-02-27T09:27:21.000Z</published>
    <updated>2017-08-26T05:53:37.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS的全称是什么"><a href="#CSS的全称是什么" class="headerlink" title="CSS的全称是什么?"></a>CSS的全称是什么?</h1><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。</p>
<h1 id="CSS有几种引入方式-link-和-import-有什么区别"><a href="#CSS有几种引入方式-link-和-import-有什么区别" class="headerlink" title="CSS有几种引入方式? link 和@import 有什么区别?"></a>CSS有几种引入方式? link 和@import 有什么区别?</h1><ol>
<li><p>内联样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background-color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>内部样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    .demo &#123;</span></div><div class="line"><span class="undefined">        margin: 0 auto;</span></div><div class="line"><span class="undefined">        background-color: #ccc;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>外部样式<br>通过link引入外部css文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>@import引入</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">   @import url(style.css);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h3 id="link和-import的区别："><a href="#link和-import的区别：" class="headerlink" title="link和@import的区别："></a>link和@import的区别：</h3><ol>
<li><p>引入的语法不同<br> link的语法为：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p> @import语法为:</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    @import url(style.css);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>link是html标签，link标签除了可以加载CSS外，还可以做很多事情，比如定义RSS，定义rel连接属性等；而@import看作是CSS的样式，只能加载CSS。</p>
</li>
<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>
<li>link支持使用JavaScript控制DOM去改变样式；而@import不支持。</li>
<li>link是html标签，无兼容性问题；@import是在CSS2.1提出的，低版本浏览器不支持。</li>
</ol>
<h1 id="以下这几种文件路径分别用在什么地方，代表什么意思"><a href="#以下这几种文件路径分别用在什么地方，代表什么意思" class="headerlink" title="以下这几种文件路径分别用在什么地方，代表什么意思?"></a>以下这几种文件路径分别用在什么地方，代表什么意思?</h1><ul>
<li>css/a.css<ul>
<li>相对路径，当前文件夹内css文件夹内的a.css</li>
</ul>
</li>
<li>./css/a.css<ul>
<li>相对路径，同上</li>
</ul>
</li>
<li>b.css<ul>
<li>相对路径，当前文件夹下的b.css</li>
</ul>
</li>
<li>../imgs/a.png<ul>
<li>相对路径，上级目录下img文件夹下的a.png</li>
</ul>
</li>
<li>/Users/hunger/project/css/a.css<ul>
<li>绝对路径，本地文件夹内的a.css</li>
</ul>
</li>
<li>/static/css/a.css<ul>
<li>相对路径，在网站根目录的static文件夹下css文件夹下的a.css</li>
</ul>
</li>
<li><a href="http://kmac007.com/8-1.png" target="_blank" rel="external">http://kmac007.com/8-1.png</a><ul>
<li>绝对路径，指向网站上的图片</li>
</ul>
</li>
</ul>
<h1 id="如果我想在kmac007-com上展示一个图片，需要怎么操作"><a href="#如果我想在kmac007-com上展示一个图片，需要怎么操作" class="headerlink" title="如果我想在kmac007.com上展示一个图片，需要怎么操作?"></a>如果我想在kmac007.com上展示一个图片，需要怎么操作?</h1><ol>
<li>获取图片URL</li>
<li>打开kmac007</li>
<li>在body中加入img标签，URL为图片URL</li>
<li>修改URL为相对路径</li>
</ol>
<h1 id="列出5条以上html和-css-的书写规范"><a href="#列出5条以上html和-css-的书写规范" class="headerlink" title="列出5条以上html和 css 的书写规范"></a>列出5条以上html和 css 的书写规范</h1><pre><code>1. CSS 文件使用无 BOM 的 UTF-8 编码。
2. 选择器 与 { 之间必须包含空格。
3. 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。
4. 列表型属性值 书写在单行时，, 后必须跟一个空格。
5. 属性定义后必须以分号结尾。
6. 在可以使用缩写的情况下，尽量使用属性缩写。
7. 长度为 0 时须省略单位。
8. 表示小数时，可以省略小数点前的0
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS的全称是什么&quot;&gt;&lt;a href=&quot;#CSS的全称是什么&quot; class=&quot;headerlink&quot; title=&quot;CSS的全称是什么?&quot;&gt;&lt;/a&gt;CSS的全称是什么?&lt;/h1&gt;&lt;p&gt;层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。&lt;/p&gt;
&lt;h1 id=&quot;CSS有几种引入方式-link-和-import-有什么区别&quot;&gt;&lt;a href=&quot;#CSS有几种引入方式-link-和-import-有什么区别&quot; class=&quot;headerlink&quot; title=&quot;CSS有几种引入方式? link 和@import 有什么区别?&quot;&gt;&lt;/a&gt;CSS有几种引入方式? link 和@import 有什么区别?&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;内联样式&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;background-color: red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部样式&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    .demo &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        margin: 0 auto;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        background-color: #ccc;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部样式&lt;br&gt;通过link引入外部css文件&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;index.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@import引入&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;   @import url(style.css);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
      <category term="前端面试" scheme="https://www.kmac007.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>HTML表单的用法简介</title>
    <link href="https://www.kmac007.com/2017/HTML%E8%A1%A8%E5%8D%95%E7%9A%84%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B.html"/>
    <id>https://www.kmac007.com/2017/HTML表单的用法简介.html</id>
    <published>2017-02-26T12:14:32.000Z</published>
    <updated>2017-08-26T05:53:44.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签用于用户输入创建HTML表单"><a href="#标签用于用户输入创建HTML表单" class="headerlink" title="标签用于用户输入创建HTML表单"></a><form>标签用于用户输入创建HTML表单</form></h1><blockquote>
<p>表单能够包含 input 元素，比如文本字段、复选框、单选框、提交按钮等等。表单还可以包含 menus、textarea、fieldset和label元素。</p>
</blockquote>
<p>表单用于向服务器传输数据</p>
<h2 id="属性"><a href="#属性" class="headerlink" title=" 属性"></a><form> 属性</form></h2><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>action</td>
<td>URL</td>
<td>规定当提交表单时向何处发送表单数据</td>
</tr>
<tr>
<td>autocomplete</td>
<td>on off</td>
<td>规定是否启用表单的自动完成功能</td>
</tr>
<tr>
<td>method</td>
<td>get post</td>
<td>规定用于发送form-data的HTTP方法</td>
</tr>
<tr>
<td>name</td>
<td>form_name</td>
<td>规定表单名称</td>
</tr>
<tr>
<td>enctype</td>
<td>application/x-www-form-urlencoded ; multipart/form-data ; text/plain</td>
<td>规定在发送表单数据之前如何对其进行编码。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><h3 id="text-password-submit"><a href="#text-password-submit" class="headerlink" title="text, password, submit"></a>text, password, submit</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_action.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_action.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    汽车: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"Car"</span>&gt;</span></div><div class="line">    飞机: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"Plane"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_action.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    男：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span></div><div class="line">    女: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"guangzhou"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shenzhen"</span> <span class="attr">selected</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"30"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标签用于用户输入创建HTML表单&quot;&gt;&lt;a href=&quot;#标签用于用户输入创建HTML表单&quot; class=&quot;headerlink&quot; title=&quot;标签用于用户输入创建HTML表单&quot;&gt;&lt;/a&gt;&lt;form&gt;标签用于用户输入创建HTML表单&lt;/form&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;表单能够包含 input 元素，比如文本字段、复选框、单选框、提交按钮等等。表单还可以包含 menus、textarea、fieldset和label元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表单用于向服务器传输数据&lt;/p&gt;
&lt;h2 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot; 属性&quot;&gt;&lt;/a&gt;&lt;form&gt; 属性&lt;/form&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;action&lt;/td&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;规定当提交表单时向何处发送表单数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autocomplete&lt;/td&gt;
&lt;td&gt;on off&lt;/td&gt;
&lt;td&gt;规定是否启用表单的自动完成功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;method&lt;/td&gt;
&lt;td&gt;get post&lt;/td&gt;
&lt;td&gt;规定用于发送form-data的HTTP方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;form_name&lt;/td&gt;
&lt;td&gt;规定表单名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enctype&lt;/td&gt;
&lt;td&gt;application/x-www-form-urlencoded ; multipart/form-data ; text/plain&lt;/td&gt;
&lt;td&gt;规定在发送表单数据之前如何对其进行编码。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://www.kmac007.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://www.kmac007.com/tags/HTML/"/>
    
      <category term="表单" scheme="https://www.kmac007.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://www.kmac007.com/2017/HTML.html"/>
    <id>https://www.kmac007.com/2017/HTML.html</id>
    <published>2017-02-26T09:34:53.000Z</published>
    <updated>2017-08-26T05:53:47.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML、XML、XHTML-有什么区别"><a href="#HTML、XML、XHTML-有什么区别" class="headerlink" title="HTML、XML、XHTML 有什么区别"></a>HTML、XML、XHTML 有什么区别</h1><ul>
<li>HTML：超文本标记语言（HyperText Markup Language）,是一种用于创建网页的标准标记语言，被涉及用来显示数据。</li>
<li>XML：可扩展标记语言（Extensible Markuo Language）,它被涉及用来传输和存储数据。它是对超文本标记语言的补充，是各种应用程序之间进行数据传输的常用工具。由于标签没有被预定义，使用者可以自行定义标签。</li>
<li>XHTML：可扩展的超文本标记语言（Extensible HyperText Markup Language）,HTML4 和XML1.0 重组而成。改进了HTML定义不规范，结构不严谨的缺点。它的语法更加严格，相对HTML的兼容性也不差。</li>
</ul>
<a id="more"></a>
<h1 id="怎样理解-HTML-语义化"><a href="#怎样理解-HTML-语义化" class="headerlink" title="怎样理解 HTML 语义化"></a>怎样理解 HTML 语义化</h1><h2 id="什么是语义化"><a href="#什么是语义化" class="headerlink" title="什么是语义化?"></a>什么是语义化?</h2><p>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p>
<h2 id="为什么要语义化"><a href="#为什么要语义化" class="headerlink" title="为什么要语义化?"></a>为什么要语义化?</h2><ol>
<li>在没有CSS的情况下，页面也能呈现合理的结构</li>
<li>良好的用户体验，例如title、alt用于解释名词或解释图片信息</li>
<li>有利于SEO：有利于爬虫抓取更多的有效信息，爬虫依赖于标签来确定上下文和各个关键字的权重</li>
<li>用HTML开发特殊设备的网页时，有助于这些设备解析（如屏幕阅读器、盲人阅读器、移动设备等），使其能以合理的结构呈现</li>
<li>便于团队开发和维护，语义化更具可读性。</li>
</ol>
<h1 id="内容与样式分离的原则"><a href="#内容与样式分离的原则" class="headerlink" title="内容与样式分离的原则"></a>内容与样式分离的原则</h1><ul>
<li>HTML 仅处理内容，只考虑 HTML 的结构和语义化，避免出现内联样式。</li>
<li>写 JS 的时候，尽量不使用 JS直接操作样式。</li>
<li>页面展现的所有样式，都由CSS来负责实现。</li>
</ul>
<h1 id="常见的meta标签"><a href="#常见的meta标签" class="headerlink" title="常见的meta标签"></a>常见的meta标签</h1><blockquote>
<p><meta> 标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>
</blockquote>
<ul>
<li><p><strong>页面关键字</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"your tags"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>页面描述</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"150 words"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>声明文件编码</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>viewport</strong>:能优化移动浏览器显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>优先使用IE最新版本和Chrome</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 关于X-UA-Compatible --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=6"</span> &gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span> &gt;</span><span class="comment">&lt;!-- 使用IE7 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=8"</span> &gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>浏览器内核控制</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="文档声明的作用-严格模式和混杂模式指什么-lt-DOCTYPE-html-gt-的作用"><a href="#文档声明的作用-严格模式和混杂模式指什么-lt-DOCTYPE-html-gt-的作用" class="headerlink" title="文档声明的作用?严格模式和混杂模式指什么?&lt;!DOCTYPE html&gt; 的作用?"></a>文档声明的作用?严格模式和混杂模式指什么?&lt;!DOCTYPE html&gt; 的作用?</h1><p>  <strong>文档声明</strong>声明文档的解析类型(document.compatMode)，避免浏览器的混杂模式。</p>
<ul>
<li>严格模式：浏览器使用W3C的标准解析渲染页面</li>
<li>混杂模式：浏览器使用自身的方式解析渲染页面</li>
<li>&lt;!DOCTYPE html&gt;的作用是声明该页面的HTML版本为HTML5<br>如果没有&lt;!DOCTYPE html&gt;，那么compatMode默认是BackCompat，即为混杂模式，浏览器按照自己的方式解析渲染页面，那么在不同的浏览器下就会到显示不同的样式。而添加了&lt;!DOCTYPE html&gt;，浏览器就会遵循W3C标准来解析渲染页面。</li>
</ul>
<h1 id="浏览器乱码的原因是什么？如何解决"><a href="#浏览器乱码的原因是什么？如何解决" class="headerlink" title="浏览器乱码的原因是什么？如何解决"></a>浏览器乱码的原因是什么？如何解决</h1><p>页面的编码方式与浏览器的解码方式不匹配；解决方法为在<head>中加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"文档编码方式"</span>&gt;</span></div></pre></td></tr></table></figure></head></p>
<h1 id="常见浏览器及其内核"><a href="#常见浏览器及其内核" class="headerlink" title="常见浏览器及其内核"></a>常见浏览器及其内核</h1><table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE</td>
<td>Trident</td>
</tr>
<tr>
<td>Chrome</td>
<td>WebKit</td>
</tr>
<tr>
<td>Safari</td>
<td>WebKit</td>
</tr>
<tr>
<td>Firefox</td>
<td>Gecko</td>
</tr>
<tr>
<td>Opera</td>
<td>Presto</td>
</tr>
</tbody>
</table>
<p>其中国内的浏览器一般为WebKit/Trident的双内核，如360浏览器，QQ浏览器等</p>
<h1 id="常见标签及其使用场景"><a href="#常见标签及其使用场景" class="headerlink" title="常见标签及其使用场景"></a>常见标签及其使用场景</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--...--&gt;</span>：注释</div><div class="line"><span class="meta">&lt;!DOCTYPE&gt;</span>：定义文档类型</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>： 定义 HTML 文档</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>：定义关于文档的信息</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>： 定义文档的主体</div><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>：定义了文档的头部区域</div><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>：<span class="tag">&lt;<span class="name">section</span>&gt;</span> 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>：定义 section 或 body的页脚。</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>： 定义文档中的节</div><div class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span>：定义关于 HTML 文档的元信息。</div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>：定义文档的标题。</div><div class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>：定义文档与外部资源的关系</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">：定义客户端脚本。</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>：定义导航链接的部分</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>：定义页面的侧边栏内容</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>：定义超文本链接</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span>： 定义换行</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>： 定义一个点击按钮</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span>：定义图形,绘图</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span>：定义了HTML文档的表单</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>：定义 HTML 标题</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>：定义内联框架</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span>&gt;</span>：定义图像</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span>&gt;</span>：定义输入控件</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>：定义 input 元素的标注</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>：定义列表的项目</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">object</span>&gt;</span>：定义内嵌对象</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">param</span>&gt;</span>：定义对象的参数。</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>： 定义有序列表。</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>： 定义段落。</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span>&gt;</span>：定义选择列表（下拉列表）。</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>：定义选择列表中的选项。</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">：定义文档的样式信息。</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span>： 定义表格。</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML、XML、XHTML-有什么区别&quot;&gt;&lt;a href=&quot;#HTML、XML、XHTML-有什么区别&quot; class=&quot;headerlink&quot; title=&quot;HTML、XML、XHTML 有什么区别&quot;&gt;&lt;/a&gt;HTML、XML、XHTML 有什么区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTML：超文本标记语言（HyperText Markup Language）,是一种用于创建网页的标准标记语言，被涉及用来显示数据。&lt;/li&gt;
&lt;li&gt;XML：可扩展标记语言（Extensible Markuo Language）,它被涉及用来传输和存储数据。它是对超文本标记语言的补充，是各种应用程序之间进行数据传输的常用工具。由于标签没有被预定义，使用者可以自行定义标签。&lt;/li&gt;
&lt;li&gt;XHTML：可扩展的超文本标记语言（Extensible HyperText Markup Language）,HTML4 和XML1.0 重组而成。改进了HTML定义不规范，结构不严谨的缺点。它的语法更加严格，相对HTML的兼容性也不差。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://www.kmac007.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://www.kmac007.com/tags/HTML/"/>
    
      <category term="语义化" scheme="https://www.kmac007.com/tags/%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    
      <category term="meta" scheme="https://www.kmac007.com/tags/meta/"/>
    
  </entry>
  
</feed>
