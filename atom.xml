<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kmac007</title>
  <subtitle>kmac007&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kmac007.com/"/>
  <updated>2017-09-05T13:48:09.778Z</updated>
  <id>https://www.kmac007.com/</id>
  
  <author>
    <name>kmac007</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB与Mongoose学习总结</title>
    <link href="https://www.kmac007.com/2017/MongoDB%E4%B8%8EMongoose%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.kmac007.com/2017/MongoDB与Mongoose学习总结.html</id>
    <published>2017-08-25T15:02:31.000Z</published>
    <updated>2017-09-05T13:48:09.778Z</updated>
    
    <content type="html"><![CDATA[<p>为了能够使用Node.js实现前后端分离，MongoDB是必学的，Mongodb是基于文档的非关系型数据库，文档是按BSON（JSON的轻量化二进制格式）存储的，增删改查等管理数据库的命令和JavaScript语法很像。以下是我的学习笔记。</p>
<h1 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h1><blockquote>
<p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。</p>
</blockquote>
<p>优点:</p>
<ul>
<li>高可扩展性</li>
<li>分布式计算</li>
<li>低成本</li>
<li>架构的灵活性，半结构化数据</li>
<li>没有复杂的关系</li>
</ul>
<p>缺点:</p>
<ul>
<li>没有标准化</li>
<li>有限的查询功能（到目前为止）</li>
<li>最终一致是不直观的程序</li>
</ul>
<h1 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h1><blockquote>
<p>MongoDB是NoSQL数据库的一种<br>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
</blockquote>
<a id="more"></a>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li>
<li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li>
<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>
<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>
<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>
<li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>
<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>
<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>
<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>
<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>
<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>
<li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>
<li>MongoDB安装简单。</li>
</ul>
<h2 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h2><ol>
<li>设置dbpath参数值为自定义的目录路径，如:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath=C:/data/db</div></pre></td></tr></table></figure>
<ol>
<li>在test文件夹中新建一个mongod.conf文件，在这个文件中设置mongodb启动的配置参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mongod.conf</span></div><div class="line">dbpath = data</div><div class="line">logpath = log/mongod.log</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod -f conf/mongod.conf</div></pre></td></tr></table></figure>
<p>执行后命令行工具中没有任何提示，记录保存到日志文件中，mongodb服务已正常开启</p>
<ol>
<li>windows用户可以直接执行mongod.exe可执行文件来直接启动服务器</li>
</ol>
<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>启动好服务器时，保证命令行工具不关闭，重新开一个命令行工具，通过以下方式连接数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo 127.0.0.1/<span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<p>其中test为数据库名称</p>
<h2 id="关闭服务器"><a href="#关闭服务器" class="headerlink" title="关闭服务器"></a>关闭服务器</h2><p>切换到admin数据库，执行db.shutdownServer()命令来关闭，如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">db.shutdownServer()</div></pre></td></tr></table></figure></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>MongoDB中默认的数据库为test，如果没有创建新的数据库，集合将存放在test数据中</p>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>使用show dbs来查看数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show dbs</div></pre></td></tr></table></figure></p>
<h3 id="创建-切换"><a href="#创建-切换" class="headerlink" title="创建/切换"></a>创建/切换</h3><p>使用use命令来切换/创建数据库，use db_name，当使用show dbs时，会发现新创建的数据库不在列表中，要使其显示，则需要向数据库插入一些数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use db_name</div></pre></td></tr></table></figure></p>
<h3 id="显示当前数据库"><a href="#显示当前数据库" class="headerlink" title="显示当前数据库"></a>显示当前数据库</h3><p>使用db命令来显示当前数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db</div></pre></td></tr></table></figure></p>
<h3 id="将数据库写入集合中"><a href="#将数据库写入集合中" class="headerlink" title="将数据库写入集合中"></a>将数据库写入集合中</h3><p>使用db.集合名.insert(文档)来将文档的数据写入集合中，文档的格式为JSON。而所有存储在集合中的数据都是BSON格式。BSON是一种类JSON 的二进制形式的存储格式。简称Binary JSON。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection_name.insert(&#123;<span class="string">'name'</span>: <span class="string">'dk'</span>&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h3><p>使用show collections命令可以查看当前数据库中的所有集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show collections</div></pre></td></tr></table></figure></p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure>
<p>将删除当前所选的数据库</p>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>集合类似于SQL数据库中的数据表，标识为collection</p>
<h3 id="查看集合-1"><a href="#查看集合-1" class="headerlink" title="查看集合"></a>查看集合</h3><p>可以使用命令show collections检查所创建的集合<br><strong>注: 也可以使用show tables来查看集合</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show collections</div><div class="line">//or</div><div class="line">show tables</div></pre></td></tr></table></figure></p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>通过db.createCollection(‘collection_name’)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createCollection(name, &#123;capped: &lt;Boolean&gt;, autoIndexId: &lt;Boolean&gt;, size: &lt;number&gt;, max &lt;number&gt;&#125; )</div></pre></td></tr></table></figure></p>
<ul>
<li>name:集合的名字</li>
<li>capped:是否启用集合限制，如果开启需要制定一个限制条件，默认为不启用，这个参数没有实际意义</li>
<li>max:集合中最大条数限制，默认为没有限制</li>
<li>size:限制集合使用空间的大小，默认为没有限制，size的优先级比max要高</li>
<li>autoIndexId:是否使用_id作为索引，默认为使用(true或false)</li>
</ul>
<p><strong>注意： 向集合中插入文档时，若集合不存在，则会自动创建集合</strong></p>
<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p>通过db.collection_name.drop()用于数据库中删除集合。如果选定的集合成功删除，drop()方法将返回true，否则返回false<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.drop()</div></pre></td></tr></table></figure></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">类型        数字          备注</div><div class="line">Double        1         双精度浮点数 - 此类型用于存储浮点值</div><div class="line">String        2         字符串 - 这是用于存储数据的最常用的数据类型。MongoDB中的字符串必须为UTF-8</div><div class="line">Object        3         对象 - 此数据类型用于嵌入式文档</div><div class="line">Array         4         数组 - 此类型用于将数组或列表或多个值存储到一个键中</div><div class="line">Binary data   5         二进制数据 - 此数据类型用于存储二进制数据</div><div class="line">Undefined     6         已废弃</div><div class="line">Object id     7         对象ID - 此数据类型用于存储文档的ID</div><div class="line">Boolean       8         布尔类型 - 此类型用于存储布尔值(true / false)值</div><div class="line">Date          9         日期 - 此数据类型用于以UNIX时间格式存储当前日期或时间。可以通过创建日期对象并将日，月，年的日期进行指定自己需要的日期时间</div><div class="line">Null          10        Null - 此类型用于存储Null值</div><div class="line">Regular       11        正则表达式 - 此数据类型用于存储正则表达式</div><div class="line">JavaScript    13        代码 - 此数据类型用于将JavaScript代码存储到文档中</div><div class="line">Symbol        14        符号 - 该数据类型与字符串相同；但是，通常保留用于使用特定符号类型的语言</div><div class="line">JavaScript (with scope)  15     代码 - 此数据类型用于将带作用域的JavaScript代码存储到文档中</div><div class="line">32-bit integer           16     32位整型 - 此类型用于存储数值</div><div class="line">Timestamp                17     时间戳 - 当文档被修改或添加时，可以方便地进行录制</div><div class="line">64-bit integer           18     64位整型 - 此类型用于存储数值</div><div class="line">Min key                  255    最小键 - 此类型用于将值与最小BSON元素进行比较</div><div class="line">Max key                  127    最大键 - 此类型用于将值与最大BSON元素进行比较</div></pre></td></tr></table></figure>
<h3 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h3><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="查找值类型为数字的x，数字的-type为1"><a href="#查找值类型为数字的x，数字的-type为1" class="headerlink" title="查找值类型为数字的x，数字的$type为1"></a>查找值类型为数字的x，数字的$type为1</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="string">"x"</span>:&#123;<span class="variable">$type</span>:1&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div></pre></td></tr></table></figure>
<h4 id="查找值类型为字符串的x，字符串的-type为2"><a href="#查找值类型为字符串的x，字符串的-type为2" class="headerlink" title="查找值类型为字符串的x，字符串的$type为2"></a>查找值类型为字符串的x，字符串的$type为2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="string">"x"</span>:&#123;<span class="variable">$type</span>:2&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="查找值类型为布尔值的x，布尔值的-type为8"><a href="#查找值类型为布尔值的x，布尔值的-type为8" class="headerlink" title="查找值类型为布尔值的x，布尔值的$type为8"></a>查找值类型为布尔值的x，布尔值的$type为8</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="string">"x"</span>:&#123;<span class="variable">$type</span>:8&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><p>这部分将介绍MongoDB数据库文档的增删改查</p>
<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p>要将数据插入到MongoDB集合中，需要使用MongoDB的insert()或save()方法，还有insertOne()和insertMany()方法</p>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.insert(document)</div></pre></td></tr></table></figure>
<p>插入文档时若不指定_id参数，那么MongoDB会为此文档分配一个唯一的ObjectId。_id为集合中每个文档唯一的12个字节的十六进制数。</p>
<ul>
<li>_id，又称为ObjectId是一个12字节的BSON类型字符串。按照字节顺序依次代表：</li>
<li>4字节：UNIX时间戳</li>
<li>3字节：表示运行MongoDB的机器</li>
<li>2字节：表示生成此_id的进程</li>
<li>3字节：由一个随机数开始的计数器生成的值</li>
</ul>
<p>如果数据库中不存在集合，则MongoDB将创建此集合，然后将文档插入到该集合中</p>
<p>可以使用js语法，插入多个文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">for</span>(var i = 0; i &lt; 3; i++)db.p.insert(&#123;y: i&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h4><p>插入文档也可以使用<code>db.p.save(document)</code>。如果不再文档中指定_id，那么save()方法将同insert()方法一样，会自动分配id。</p>
<p>save()方法可以复写和修改，而insert()方法不可以</p>
<h4 id="insertOne"><a href="#insertOne" class="headerlink" title="insertOne()"></a>insertOne()</h4><p>单个文档插入</p>
<h4 id="insertMany"><a href="#insertMany" class="headerlink" title="insertMany()"></a>insertMany()</h4><p>多个文档插入，参数为数组</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>从MongoDB集合查询数据，使用find()方法，默认返回前20条文档，输入”it”显示接下来的20条文档。<br>find()命令基本语法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find(document)</div></pre></td></tr></table></figure></p>
<p>限定查询条件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find(&#123;x:1&#125;)</div></pre></td></tr></table></figure></p>
<p>可以通过find的第二个参数来指定返回的值，值为1或者true表示显示该键，值为0或false表示不显示该键。如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(null, &#123;x:1&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div><div class="line">&gt; db.p.find(null, &#123;x:0&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>) &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>) &#125;</div><div class="line">&gt; db.p.find(null, &#123;_id:0&#125;)</div><div class="line">&#123; <span class="string">"x"</span> : 1 &#125;</div><div class="line">&#123; <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>可以通过count()方法显示符合条件的文档数量:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;x:1&#125;).count()</div><div class="line">1</div></pre></td></tr></table></figure></p>
<h4 id="findOne"><a href="#findOne" class="headerlink" title="findOne()"></a>findOne()</h4><p>findOne()只返回最早添加的那个文档</p>
<h4 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">小于    　　  &#123;&lt;key&gt;:&#123;<span class="variable">$lt</span>:&lt;value&gt;&#125;&#125;</div><div class="line">小于或等于    &#123;&lt;key&gt;:&#123;<span class="variable">$lte</span>:&lt;value&gt;&#125;&#125;</div><div class="line">大于    　　  &#123;&lt;key&gt;:&#123;<span class="variable">$gt</span>:&lt;value&gt;&#125;&#125;</div><div class="line">大于或等于    &#123;&lt;key&gt;:&#123;<span class="variable">$gte</span>:&lt;value&gt;&#125;&#125;</div><div class="line">不等于    　　&#123;&lt;key&gt;:&#123;<span class="variable">$ne</span>:&lt;value&gt;&#125;&#125;</div><div class="line">等于     　　 &#123;&lt;key&gt;:&#123;<span class="variable">$eq</span>:&lt;value&gt;&#125;&#125;</div></pre></td></tr></table></figure>
<p>取x小于3的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find(&#123;x: &#123;<span class="variable">$lt</span>: 3&#125;&#125;)</div></pre></td></tr></table></figure></p>
<p>以此类推</p>
<h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><p>$and、$or 代表与或<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.p.find(&#123;<span class="variable">$and</span>:[&#123;x:1&#125;,&#123;y:2&#125;]&#125;)</div><div class="line">db.p.find(&#123;<span class="variable">$or</span>:[&#123;x:1&#125;,&#123;y:2&#125;]&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>文档查询可以使用正则表达式，但只支持字符串类型的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;x:/a/&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div><div class="line">&gt; db.p.find(&#123;x:/1/&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="where"><a href="#where" class="headerlink" title="$where"></a>$where</h4><p>可以使用任意的JavaScript作为查询条件<br>使用字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="variable">$where</span>: <span class="string">"this.x===1"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div><div class="line">&gt; db.p.find(&#123;<span class="variable">$where</span>: <span class="string">"obj.x===1"</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div></pre></td></tr></table></figure></p>
<p>使用函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.find(&#123;<span class="variable">$where</span>: <span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> this.x === 1&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 1 &#125;</div></pre></td></tr></table></figure></p>
<h4 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h4><p>如果需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的limit()方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。<br>默认返回前20条文档，输入”it”显示接下来的20条文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find().<span class="built_in">limit</span>(NUMBER)</div></pre></td></tr></table></figure></p>
<h4 id="skit"><a href="#skit" class="headerlink" title="skit()"></a>skit()</h4><p>跳过指定数量的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.skip(NUMBER)</div></pre></td></tr></table></figure></p>
<h4 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 sort()"></a>排序 sort()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.find().sort(&#123;KEY: 1&#125;)</div></pre></td></tr></table></figure>
<p>其中1为升序排序，而-1是用于降序排列</p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>使用updata()或save()方法来更新集合中的文档</p>
<h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><p>update()方法用于更新已存在的文档。语法格式如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.update(&lt;query&gt;,&lt;update&gt;,&#123;upsert:&lt;boolean&gt;, multi: &lt;boolean&gt;,writeConcern:&lt;document&gt;&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>query : update的查询条件，类似sql update查询内where后面的</li>
<li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql - update查询内set后面的</li>
<li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入- objNew,true为插入，默认是false，不插入</li>
<li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新</li>
<li>writeConcern :可选，抛出异常的级别</li>
</ul>
<p>默认只更新找到第一条记录： 将x:1  改为x:10<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; db.p.update(&#123;x:1&#125;,&#123;<span class="variable">$set</span>:&#123;x:10&#125;&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</div><div class="line">&gt; db.p.find()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07b96d43ce69e75b278a"</span>), <span class="string">"x"</span> : 10 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07bc6d43ce69e75b278b"</span>), <span class="string">"x"</span> : 2 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07c26d43ce69e75b278c"</span>), <span class="string">"x"</span> : <span class="literal">true</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07ca6d43ce69e75b278d"</span>), <span class="string">"x"</span> : <span class="literal">false</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07d66d43ce69e75b278e"</span>), <span class="string">"x"</span> : <span class="string">"abc"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59ae07da6d43ce69e75b278f"</span>), <span class="string">"x"</span> : <span class="string">"a"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>如果不使用$set，则将文档的内容替换为x:10</p>
<p>更新全部记录，将x:10，更新为x:1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.p.update(&#123;x:10&#125;,&#123;<span class="variable">$set</span>:&#123;x:1&#125;,<span class="literal">false</span>,<span class="literal">true</span>&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="save-1"><a href="#save-1" class="headerlink" title="save()"></a>save()</h4><p>save()方法可以插入或更新文档，如果参数中的文档_id与集合中所存在的_id不同，则插入，如果相同，则更新</p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>使用remove()方法来移除集合中的数据</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>默认地，mongodb删除符合条件的所有文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.collection.remove(&lt;query&gt;,&#123;justOne: &lt;boolean&gt;, writeConcern: &lt;document&gt;&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>query :删除的文档的条件。</li>
<li>justOne : （可选）如果设为 true 或 1，则只删除一个文档。</li>
<li>writeConcern :（可选）抛出异常的级别</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//删除符合条件的第一个文档</div><div class="line">db.p.remove(&#123;x:1&#125;,1)</div><div class="line">//删除符合的所有文档</div><div class="line">db.p.remove(&#123;x:1&#125;)</div></pre></td></tr></table></figure>
<h1 id="Mongoose基础"><a href="#Mongoose基础" class="headerlink" title="Mongoose基础"></a>Mongoose基础</h1><h2 id="什么是Mongoose"><a href="#什么是Mongoose" class="headerlink" title="什么是Mongoose"></a>什么是Mongoose</h2><p>Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具。下面将介绍如何使用Mongoose来操作MongoDB</p>
<h2 id="Node-js驱动"><a href="#Node-js驱动" class="headerlink" title="Node.js驱动"></a>Node.js驱动</h2><p>在介绍Mongoose之前，首先介绍使用Node.js操作MongoDB的方法。<br>如果使用程序操作数据库，就要使用MongoDB驱动。MongoDB驱动实际上就是为应用程序提供一个接口，不同语言对应不同的驱动，Node.js驱动不能应用在其他后端语言中。</p>
<h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mongodb</div></pre></td></tr></table></figure>
<p>然后使用require()方法引入mongodb数据库，通过MongoClient对象的connect()方法连接mongodb，最后通过node来对mongodb进行异步的增删改差操作。</p>
<p>在MongoDB数据库中建立db1数据库，然后通过如下代码，即可在集合’col’ 中插入{‘a’:1}文档,如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">'mongodb'</span>)</div><div class="line">mongodb.MongoClient.connect(<span class="string">"mongdb://localhost/db1"</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!err) &#123;</div><div class="line">    db.collection(<span class="string">"col"</span>).insert(&#123;</div><div class="line">      <span class="string">"a"</span>: <span class="number">1</span></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(result)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  result: &#123; ok: 1, n: 1 &#125;,</div><div class="line">  ops: [ &#123; a: 1, _id: 59ae5283ff6e2d21503d0bc3 &#125; ],</div><div class="line">  insertedCount: 1,</div><div class="line">  insertedIds: [ 59ae5283ff6e2d21503d0bc3 ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Mongoose是基于Node.js的MongoDB对象模型工具，有以下两个特点：</p>
<ol>
<li>通过关系型数据库思想来设计非关系型数据库</li>
<li>基于mongodb驱动，简化操作<br><img src="http://ovdfwd2hf.bkt.clouddn.com/Mongoose.jpg" alt="Mongoose"></li>
</ol>
<p>Mongoose中，有三个比较重要的概念，分别是Schema、Model、Entity。他们关系是： Schema生成Model，Model创造Document，Model和Document都可对数据库操作造成影响，但Model比Document更具操作性。</p>
<p>Schema用于定义数据库的结构。类似创建表时的数据定义（不仅仅可以定义文档的结构和属性，还可以定义文档的实例方法、静态模型方法、复合索引等），每个Schema会映射到mongodb中的一个collection，Schema不具备操作数据库的能力。</p>
<p>Model是由Schema编译而成的构造器，具有抽象属性和行为，可以对数据库进行增删改差。Model的每个实例(instance)就是一个文档document。</p>
<p>Document是由Model创建的实体，它的操作也会影响数据库。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装nodejs和mongodb之后，使用npm安装mongoose<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mongoose</div></pre></td></tr></table></figure></p>
<p>安装成功后通过require(‘mongoose’)来使用</p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>通过require引入mongoose后，通过connect()方法即可连接到数据库</p>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(url)</div></pre></td></tr></table></figure>
<p>如果还需要传递用户名、密码，则可以使用如下方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(<span class="string">'mongodb://username:password@host:port/database?options...'</span>)</div></pre></td></tr></table></figure></p>
<p>connect()方法还接受一个选项对象options，该对象将传递给底层驱动程序。这里所包含的所有选项优先于连接字符创中传递的选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(uri，options)</div></pre></td></tr></table></figure></p>
<p>options可用选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db            -数据库设置</div><div class="line">server        -服务器设置</div><div class="line">replset       -副本集设置</div><div class="line">user          -用户名</div><div class="line">pass          -密码</div><div class="line">auth          -鉴权选项</div><div class="line">mongos        -连接多个数据库</div><div class="line">promiseLibrary</div></pre></td></tr></table></figure></p>
<p>如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  db: &#123; <span class="attr">native_parser</span>: <span class="literal">true</span> &#125;,</div><div class="line">  server: &#123; <span class="attr">poolSize</span>: <span class="number">5</span> &#125;,</div><div class="line">  replset: &#123; <span class="attr">rs_name</span>: <span class="string">'myReplicaSetName'</span> &#125;,</div><div class="line">  user: <span class="string">'myUserName'</span>,</div><div class="line">  pass: <span class="string">'myPassword'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">mongoose.connect(uri, options)</div></pre></td></tr></table></figure></p>
<p>如果要连接多个数据库，只需要设置多个url以逗号隔开，同时设置mongos为true<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(<span class="string">'urlA, urlB'</span>,&#123;</div><div class="line">  mongos: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>connect()方法还接受一个回调函数作为参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(uri, options, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect()"></a>disconnect()</h3><p>通过mongoose.disconnect() 方法可以断开连接</p>
<h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>Schema主要用于定义MongoDB中集合Collection里文档document的结构<br>定义Schema非常简单,指定字段名和类型即可，支持的类型包括以下8种。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String      字符串</div><div class="line">Number      数字</div><div class="line">Date        日期</div><div class="line">Buffer      二进制</div><div class="line">Boolean     布尔值</div><div class="line">Mixed       混合类型</div><div class="line">ObjectId    对象ID</div><div class="line">Array       数组</div></pre></td></tr></table></figure></p>
<p>通过mongoose.Schema来调用Schema，然后用new方法创建schema对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">var</span> mySchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  title: <span class="built_in">String</span>,</div><div class="line">  author: <span class="built_in">String</span>,</div><div class="line">  body: <span class="built_in">String</span>,</div><div class="line">  comments: [&#123; <span class="attr">body</span>: <span class="built_in">String</span>, <span class="attr">date</span>: <span class="built_in">Date</span> &#125;],</div><div class="line">  date: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</div><div class="line">  hidden: <span class="built_in">Boolean</span>,</div><div class="line">  meta: &#123;</div><div class="line">    votes: <span class="built_in">Number</span>,</div><div class="line">    favs: <span class="built_in">Number</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>注意：创建Schema对象时，声明字段类型有两种方法，一种是首字母大写的字段类型，另一种是引号包含的小写字段类型</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mySchema = <span class="keyword">new</span> Schema(&#123; <span class="attr">title</span>: <span class="built_in">String</span>, <span class="attr">author</span>: <span class="built_in">String</span> &#125;)</div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="keyword">var</span> mySchema = <span class="keyword">new</span> Schema(&#123;<span class="attr">title</span>: <span class="string">'string'</span>, <span class="attr">author</span>: <span class="string">'string'</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>如需在Schema定义后添加其他字段，可以使用add()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var mySchema = new Schema</div><div class="line">mySchema.add(&#123; name: String, color: String &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>模型Model是根据Schema编译出的构造器，或者称之为类，通过Model可以实例化出文档对象document<br>文档document的创建和检索都需要通过模型Model来处理</p>
<h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoose.model()</div></pre></td></tr></table></figure>
<p>使用model()方法，将Schema编译为Model。model()方法的第一个参数是模型名称</p>
<p><strong>注意：一定要将model()方法的第一个参数和其要赋值的变量设置为相同的值，否则会出现不可预知的结果</strong></p>
<p>Mongoose会将集合名称设置为模版名称的小写版。如果名称的最后一个字符是字母，则会变成复数；如果名称的最后一个字符是数字，则不变；如果名称的最后一个字符为数字，则不变。例如： 如果Model名称为<code>MyModel</code>,则集合名称为<code>mymodels</code>；如果Model名称为<code>Model1</code>，则集合名称为<code>model1</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">num</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span>, <span class="attr">size</span>: <span class="built_in">String</span> &#125;)</div><div class="line"><span class="keyword">var</span> MyModel = mongoose.model(<span class="string">'MyModel'</span>, schema)</div></pre></td></tr></table></figure></p>
<h3 id="实例化文档document"><a href="#实例化文档document" class="headerlink" title="实例化文档document"></a>实例化文档document</h3><p>通过new方法，实例化Model1，获得实例化后的document对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.connect(<span class="string">'mongodb://user:123456@localhost/db1'</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, (err)=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'连接成功'</span>)</div><div class="line">     <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">num</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span>, <span class="attr">size</span>: <span class="built_in">String</span> &#125;)</div><div class="line">     <span class="keyword">var</span> MyModel = mongoose.model(<span class="string">'MyModel'</span>, schema)</div><div class="line">     <span class="keyword">var</span> doc1 = <span class="keyword">new</span> MyModel(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;)</div><div class="line">     <span class="built_in">console</span>.log(doc1.size) <span class="comment">//'small'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="文档保存"><a href="#文档保存" class="headerlink" title="文档保存"></a>文档保存</h3><p>通过<code>new Model1()</code>创建的文档doc1，必须通过save()方法，才能将创建的文档保存到数据库的集合中，集合名称为模型名称的小写复数</p>
<p>回调函数是可选的，第一个参数为err，第二个参数为保存的文档对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">doc1.save((err, doc)=&gt;&#123;</div><div class="line">	console.log(doc)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;)</div><div class="line">mongoose.connect(&quot;mongodb://user:123456@localhost/db1&quot;,&#123;useMongoClient: true&#125;, (err)=&gt;&#123;</div><div class="line">  if(!err)&#123;</div><div class="line">    var schema = new mongoose.Schema(&#123; num:Number, name: String, size: String &#125;)</div><div class="line">    var MyModel = mongoose.model(&apos;MyModel&apos;, schema)</div><div class="line">    var doc1 = new MyModel(&#123;size: &apos;small&apos;&#125;)</div><div class="line">    doc1.save((err, doc)=&gt;&#123;</div><div class="line">      console.log(doc)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="文档新增"><a href="#文档新增" class="headerlink" title="文档新增"></a>文档新增</h3><p>文档新增有三种方法，一种是save()方法，另一种是使用模型model的create()方法，最后一种是模型的model的insertMany()方法</p>
<h4 id="save-2"><a href="#save-2" class="headerlink" title="save()"></a>save()</h4><p>新增{age: 10, name: ‘save’}文档并保存<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://user:123456@localhost/db1"</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, (err)=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(!err)&#123;</div><div class="line">    <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;<span class="attr">age</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span>&#125;)</div><div class="line">    <span class="keyword">var</span> temp = mongoose.model(<span class="string">'temp'</span>, schema)</div><div class="line">    <span class="keyword">new</span> temp(&#123;<span class="attr">age</span>: <span class="number">10</span>, <span class="attr">name</span>: save&#125;).save(<span class="function">(<span class="params">err, doc</span>)=&gt;</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(doc)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="creat"><a href="#creat" class="headerlink" title="creat()"></a>creat()</h4><p>使用save()方法，需要将文档实例化，再使用save方法来保存文档。而create()方法，则直接在模型Model上操作，并且可以同时新增多个文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.create(doc(s), callback)</div></pre></td></tr></table></figure></p>
<p>新增{name: ‘dk’}，{name: ‘kmac007’}这两个文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;)</div><div class="line">mongoose.connect(&quot;mongodb://user:123456@localhost/db1&quot;, &#123;useMongoClient: true&#125;, (err)=&gt;&#123;</div><div class="line">  if(!err)&#123;</div><div class="line">    var schema = new mongoose.Schema(&#123;age:Number, name:String&#125;)</div><div class="line">    var temp = mongoose.model(&apos;temp&apos;, schema)</div><div class="line">    temp.create(&#123;name: &apos;dk&apos;&#125;,&#123;name: &apos;kmac007&apos;&#125;,(err, doc1, doc2)=&gt;&#123;</div><div class="line">	  console.log(doc1)</div><div class="line">	  console.log(doc2)</div><div class="line">	&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="insertMany-1"><a href="#insertMany-1" class="headerlink" title="insertMany()"></a>insertMany()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.insertMany(doc(s), [options], [callback])</div></pre></td></tr></table></figure>
<p>新增{name: ‘dk’}，{name: ‘kmac007’}这两个文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://user:123456@localhost/db1"</span>, &#123;<span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;, (err)=&gt;&#123;</div><div class="line">  <span class="keyword">if</span>(!err)&#123;</div><div class="line">    <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;<span class="attr">age</span>:<span class="built_in">Number</span>, <span class="attr">name</span>:<span class="built_in">String</span>&#125;)</div><div class="line">    <span class="keyword">var</span> temp = mongoose.model(<span class="string">'temp'</span>, schema)</div><div class="line">    temp.insertMany([&#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'kmac007'</span>&#125;],(err, doc1, doc2)=&gt;&#123;</div><div class="line">	  <span class="built_in">console</span>.log(doc1)</div><div class="line">	  <span class="built_in">console</span>.log(doc2)</div><div class="line">	&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h3><p>使用mongoose查询有以下三种方法</p>
<ol>
<li>find()</li>
<li>findById()</li>
<li>findOne()</li>
</ol>
<h4 id="find-1"><a href="#find-1" class="headerlink" title="find()"></a>find()</h4><p>第一个参数表示查询条件，第二个参数用于控制返回的字段，第三个参数用于配置查询参数，第四个参数是回调函数，形如function(err, docs){}<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.find(conditions, [projection], [options], [callback])</div></pre></td></tr></table></figure></p>
<p>数据库demo下有如下数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//数据库demo</div><div class="line">&gt; db.users.find()</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9882f91085939b189a63"</span>), <span class="attr">"name"</span> : <span class="string">"dk"</span>, <span class="attr">"age</span></div><div class="line"><span class="attr">"</span> : <span class="number">18</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae988cf91085939b189a64"</span>), <span class="attr">"name"</span> : <span class="string">"kmac008"</span>,</div><div class="line"> <span class="attr">"age"</span> : <span class="number">28</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9892f91085939b189a65"</span>), <span class="attr">"name"</span> : <span class="string">"robb"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">20</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae989bf91085939b189a66"</span>), <span class="attr">"name"</span> : <span class="string">"robin"</span>, <span class="attr">"</span></div><div class="line"><span class="attr">age"</span> : <span class="number">38</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae98a5f91085939b189a67"</span>), <span class="attr">"name"</span> : <span class="string">"dark"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">45</span> &#125;</div></pre></td></tr></table></figure></p>
<p>现在用find()方法找出所有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;);</div><div class="line">mongoose.connect(&apos;mongodb://localhost/demo&apos;, &#123;useMongoClient: true&#125;,(err)=&gt; &#123;</div><div class="line">  if (!err) &#123;</div><div class="line">    var schema = new mongoose.Schema(&#123; age: Number, name: String &#125;);</div><div class="line">    var users = mongoose.model(&apos;users&apos;, schema);</div><div class="line">    users.find(function(err, docs) &#123;</div><div class="line">      console.log(docs);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>注意，Mongoose4.11.0以上的版本中，连接数据库的逻辑变动，需要在connect参数options中加上{useMongoClient: true}option</strong></p>
<p>找出年龄大于20的数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">users.find(&#123;<span class="attr">age</span>: $gt:<span class="number">20</span>&#125;, (err, docs)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(docs)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>找出年龄大于20且名字里存在’dk’的数据:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">users.find(&#123;<span class="attr">name</span>: <span class="regexp">/dk/</span>, <span class="attr">age</span>: &#123;<span class="attr">$gt</span>:<span class="number">20</span>&#125;, (err, docs)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(docs)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>找出名字里带有’d’的数据，且只输出’name’字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">users.find(&#123;<span class="attr">name</span>: <span class="regexp">/d/</span>&#125;, name, (err, docs)=&gt;&#123;</div><div class="line">  <span class="built_in">console</span>.log(docs)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="findById"><a href="#findById" class="headerlink" title="findById()"></a>findById()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.findById(id, [projection], [options], [callback])</div></pre></td></tr></table></figure>
<p> 显示第0个元素的所有字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> idArr = []</div><div class="line">users.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">  docs.forEach(<span class="function">(<span class="params">item, index, arr</span>)=&gt;</span>&#123;</div><div class="line">    idArr.push(item._id)</div><div class="line">  &#125;)</div><div class="line">  users.findById(idArr[<span class="number">0</span>],(err, doc)=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(doc)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="findOne-1"><a href="#findOne-1" class="headerlink" title="findOne()"></a>findOne()</h4><p>返回查找到所有实例的第一个</p>
<h4 id="常用的查询条件"><a href="#常用的查询条件" class="headerlink" title="常用的查询条件"></a>常用的查询条件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$or　　　　或关系</div><div class="line">$nor　　　 或关系取反</div><div class="line">$gt　　　　大于</div><div class="line">$gte　　　 大于等于</div><div class="line">$lt　　　　小于</div><div class="line">$lte　　　 小于等于</div><div class="line">$ne　　　　不等于</div><div class="line">$in　　　　在多个值范围内</div><div class="line">$nin　　　 不在多个值范围内</div><div class="line">$all　　　 匹配数组中多个值</div><div class="line">$regex　　 正则，用于模糊查询</div><div class="line">$size　　　匹配数组大小</div><div class="line">$maxDistance　范围查询，距离（基于LBS）</div><div class="line">$mod　　　　取模运算</div><div class="line">$near　　　 邻域查询，查询附近的位置（基于LBS）</div><div class="line">$exists　　 字段是否存在</div><div class="line">$elemMatch　匹配内数组内的元素</div><div class="line">$within　　　范围查询（基于LBS）</div><div class="line">$box　　　　 范围查询，矩形范围（基于LBS）</div><div class="line">$center　　　范围醒询，圆形范围（基于LBS）</div><div class="line">$centerSphere　范围查询，球形范围（基于LBS）</div><div class="line">$slice　　　　查询字段集合中的元素（比如从第几个之后，第N到第M个元素</div></pre></td></tr></table></figure>
<h4 id="where-1"><a href="#where-1" class="headerlink" title="$where"></a>$where</h4><p>如MongoDB中的使用方法相同，可以使用字符串和函数为条件</p>
<h3 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h3><p>文档更新可以使用以下几种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">update()</div><div class="line">updateMany()</div><div class="line">find() + save()</div><div class="line">updateOne()</div><div class="line">findOne() + save()</div><div class="line">findByIdAndUpdate()</div><div class="line">fingOneAndUpdate()</div></pre></td></tr></table></figure></p>
<h4 id="update-1"><a href="#update-1" class="headerlink" title="update()"></a>update()</h4><p>第一个参数conditions为查询条件，第二个参数doc为所需要的修改的数据，第三个参数options为控制选项，第四个参数是回调函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.update(conditions, doc, [options], [callback])</div></pre></td></tr></table></figure></p>
<p>options有如下选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">safe (boolean)： 默认为true。安全模式。</div><div class="line">upsert (boolean)： 默认为false。如果不存在则创建新记录。</div><div class="line">multi (boolean)： 默认为false。是否更新多个查询记录。</div><div class="line">runValidators： 如果值为true，执行Validation验证。</div><div class="line">setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。</div><div class="line">strict (boolean)： 以strict模式进行更新。</div><div class="line">overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。</div></pre></td></tr></table></figure></p>
<p>数据库demo下有如下数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//数据库demo</div><div class="line">&gt; db.users.find()</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9882f91085939b189a63"</span>), <span class="attr">"name"</span> : <span class="string">"dk"</span>, <span class="attr">"age</span></div><div class="line"><span class="attr">"</span> : <span class="number">18</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae988cf91085939b189a64"</span>), <span class="attr">"name"</span> : <span class="string">"kmac008"</span>,</div><div class="line"> <span class="attr">"age"</span> : <span class="number">28</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae9892f91085939b189a65"</span>), <span class="attr">"name"</span> : <span class="string">"robb"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">20</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae989bf91085939b189a66"</span>), <span class="attr">"name"</span> : <span class="string">"robin"</span>, <span class="attr">"</span></div><div class="line"><span class="attr">age"</span> : <span class="number">38</span> &#125;</div><div class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"59ae98a5f91085939b189a67"</span>), <span class="attr">"name"</span> : <span class="string">"dark"</span>, <span class="attr">"a</span></div><div class="line"><span class="attr">ge"</span> : <span class="number">45</span> &#125;</div></pre></td></tr></table></figure></p>
<p>现在用update()方法查询age大于20的数据，将其年龄更改为100<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/demo'</span>, &#123; <span class="attr">useMongoClient</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></div><div class="line"><span class="function"><span class="params">  err</span></span></div><div class="line"><span class="function"><span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!err) &#123;</div><div class="line">    <span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">age</span>: <span class="built_in">Number</span>, <span class="attr">name</span>: <span class="built_in">String</span> &#125;);</div><div class="line">    <span class="keyword">var</span> users = mongoose.model(<span class="string">'users'</span>, schema);</div><div class="line">    users.update(&#123; <span class="attr">age</span>: &#123; <span class="attr">$gt</span>: <span class="number">20</span> &#125; &#125;, &#123; <span class="attr">age</span>: <span class="number">100</span> &#125;, (err, doc) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(doc);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样只会改变找到的第一个数据</p>
<p>要同时更新多个记录，需要设置options里的multi为true。</p>
<p>如果设置的查找条件，数据库里的数据并不满足，默认什么都不会发生。当设置options里的upsert参数为true，若没有符合查询条件的文档，mongo将会综合第一第二个参数，向集合中插入一个新的文档。</p>
<p><strong>注意：update()方法中的回调函数不能省略，否则数据不会被更新。如果回调函数没有什么有用的信息，可用exec()简化代码</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">users.update(&#123;<span class="attr">name</span>: <span class="regexp">/d/</span>&#125;, &#123;<span class="attr">upsert</span>: <span class="literal">true</span>&#125;).exec()</div></pre></td></tr></table></figure>
<h4 id="updateMany"><a href="#updateMany" class="headerlink" title="updateMany()"></a>updateMany()</h4><p>updateMany()与update()方法唯一的区别就是默认更新多个文档，即使设置{multi: false}也无法只更新第一个文档</p>
<h4 id="find-save"><a href="#find-save" class="headerlink" title="find() + save()"></a>find() + save()</h4><p>如果需要更新的操作比较复杂，可以使用find() + save()方法来处理，先找到与条件匹配的文档，再通过forEach遍历，然后通过save()方法更新数据</p>
<h4 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne()"></a>updateOne()</h4><p>默认更新一个文档，即使设置{multi: true}也无法更新多个</p>
<h4 id="findOne-save"><a href="#findOne-save" class="headerlink" title="findOne()+save()"></a>findOne()+save()</h4><h4 id="findOneAndUpdate"><a href="#findOneAndUpdate" class="headerlink" title="findOneAndUpdate()"></a>findOneAndUpdate()</h4><h4 id="findByIdAndUpdate"><a href="#findByIdAndUpdate" class="headerlink" title="findByIdAndUpdate"></a>findByIdAndUpdate</h4><h3 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h3><p>有三种方法用于文档删除</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">remove()</div><div class="line">findOneAndRemove()</div><div class="line">findByIdAndRemove()</div></pre></td></tr></table></figure>
<h4 id="remove-1"><a href="#remove-1" class="headerlink" title="remove()"></a>remove()</h4><p>remove()有两种形式，一种是文档的remove()方法，一种是Model的remove()方法</p>
<ol>
<li>Model的remove()方法<br>该方法的第一个参数conditions为查询条件，第二个参数回调函数的形式如下function(err){}</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.remove(conditions, [callback])</div></pre></td></tr></table></figure>
<p><strong>注意：remove()方法中的回调函数不能省略，否则数据不会被删除。当然，可以使用exec()方法来简写代码</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.remove(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;).exec()</div></pre></td></tr></table></figure>
<ol>
<li>文档的remove()方法<br>该方法的参数回调函数的形式如下function(err, doc){}</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.remove([callback])</div><div class="line"><span class="comment">//这里的callback可以省略</span></div></pre></td></tr></table></figure>
<h4 id="findOneAndRemove"><a href="#findOneAndRemove" class="headerlink" title="findOneAndRemove()"></a>findOneAndRemove()</h4><h4 id="findByIdAndRemove"><a href="#findByIdAndRemove" class="headerlink" title="findByIdAndRemove()"></a>findByIdAndRemove()</h4><h1 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h1><ol>
<li><a href="http://mongoosejs.com/index.html" target="_blank" rel="external">mongoose docs</a></li>
<li><a href="http://www.cnblogs.com/xiaohuochai/p/7215067.html" target="_blank" rel="external">Mongoose入门基础</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了能够使用Node.js实现前后端分离，MongoDB是必学的，Mongodb是基于文档的非关系型数据库，文档是按BSON（JSON的轻量化二进制格式）存储的，增删改查等管理数据库的命令和JavaScript语法很像。以下是我的学习笔记。&lt;/p&gt;
&lt;h1 id=&quot;NoSQL简介&quot;&gt;&lt;a href=&quot;#NoSQL简介&quot; class=&quot;headerlink&quot; title=&quot;NoSQL简介&quot;&gt;&lt;/a&gt;NoSQL简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高可扩展性&lt;/li&gt;
&lt;li&gt;分布式计算&lt;/li&gt;
&lt;li&gt;低成本&lt;/li&gt;
&lt;li&gt;架构的灵活性，半结构化数据&lt;/li&gt;
&lt;li&gt;没有复杂的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有标准化&lt;/li&gt;
&lt;li&gt;有限的查询功能（到目前为止）&lt;/li&gt;
&lt;li&gt;最终一致是不直观的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MongoDB-简介&quot;&gt;&lt;a href=&quot;#MongoDB-简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 简介&quot;&gt;&lt;/a&gt;MongoDB 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MongoDB是NoSQL数据库的一种&lt;br&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。&lt;br&gt;在高负载的情况下，添加更多的节点，可以保证服务器性能。&lt;br&gt;MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;br&gt;MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.kmac007.com/categories/MongoDB/"/>
    
    
      <category term="数据库" scheme="https://www.kmac007.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="https://www.kmac007.com/tags/MongoDB/"/>
    
      <category term="Mongoose" scheme="https://www.kmac007.com/tags/Mongoose/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化规范CommonJS,AMD,CMD浅析</title>
    <link href="https://www.kmac007.com/2017/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%B5%85%E6%9E%90.html"/>
    <id>https://www.kmac007.com/2017/前端模块化规范浅析.html</id>
    <published>2017-04-30T07:24:31.000Z</published>
    <updated>2017-08-29T08:30:26.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用模块化"><a href="#为什么使用模块化" class="headerlink" title="为什么使用模块化"></a>为什么使用模块化</h1><p>在多人合作的项目中，如果每个人都定义全局变量，难免会出现命名冲突的问题，这是难以维护的。同时分工合作的过程中，如果一人写一个js文件，我的js又需要依赖于另一个js文件，当文件多了，依赖关系变得十分混乱。而模块化编程正好可以解决这些问题。</p>
<h2 id="模块化的目的"><a href="#模块化的目的" class="headerlink" title="模块化的目的"></a>模块化的目的</h2><ul>
<li>解决命名冲突</li>
<li>依赖管理</li>
<li>提高代码的可读性</li>
<li>代码解耦，提高复用性</li>
</ul>
<h1 id="立即执行函数写一个模块"><a href="#立即执行函数写一个模块" class="headerlink" title="立即执行函数写一个模块"></a>立即执行函数写一个模块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> _count = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    m1: m1,</div><div class="line">    m2: m2</div><div class="line">  &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>这种方法达到了不暴露私有成员的目的</p>
<a id="more"></a>
<h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。Node.js首先采用了js模块化的概念。</p>
<p>在CommonJS中，有一个全局方法require(),用于加载模块。假如有一个math.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num++</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num--</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  add: add,</div><div class="line">  reduce: reduce</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>引入math.js模块并调用模块的方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>)</div><div class="line"><span class="built_in">console</span>.log(math.add(<span class="number">1</span>)) <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(math.reduce(<span class="number">1</span>)) <span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>CommonJS定义的模块分为:{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p>
<p>require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。</p>
<p>CommonJS加载模块是同步的，所以加载完成后才能执行后面的操作。而Node.js用于服务端，加载模块已经存在本地磁盘，不用考虑异步加载方式，所以CommonJS比较适用。而在浏览器中，如果同步加载js会阻塞整个页面，这对用户是相当不友好的。而AMD、CMD规范则是解决这个问题的。</p>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>AMD(Asynchronous Module Definition，异步模块定义)指定一种机制，它采用异步方式加载模块，模块的加载不会影响后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成后，这个回调函数才会运行，这对浏览器的异步加载尤其适用。</p>
<p>实现AMD规范的库有require.js和curl.js等。</p>
<p>语法：</p>
<h2 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory)</div></pre></td></tr></table></figure>
<ul>
<li>第一个参数id为字符串类型，表示了模块标识，为可选参数。若不存在标识应该默认定义为在加载器中被请求脚本的标识。如果存在,那么模块标识必须为顶层的或者一个绝对的标识。</li>
<li>第二个参数denpendencies，是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。</li>
<li>第三个参数factory，是一个需要进行实例化的函数或者一个对象</li>
</ul>
<h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback)</div></pre></td></tr></table></figure>
<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。</p>
<h2 id="AMD规范的实现，require-js"><a href="#AMD规范的实现，require-js" class="headerlink" title="AMD规范的实现，require.js"></a>AMD规范的实现，require.js</h2><h3 id="require-js要解决什么问题"><a href="#require-js要解决什么问题" class="headerlink" title="require.js要解决什么问题"></a>require.js要解决什么问题</h3><p>最早的时候，所有Javascript代码都写在一个文件里，只要加载一个文件就够了，随着项目的庞大，需要加载多个js文件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"d.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种写法有很大的缺点，首先，加载JS文件的时候，浏览器会停止渲染，加载文件越多，网页失去响应的时间也越长；另外，由于依赖关系，我们必须按照a,b,c,d的顺序来依次写script标签，这不利于依赖管理，代码的编写和维护会变得难以处理。</p>
<p>require.js就是为了解决这两个问题的：</p>
<ol>
<li>实现js文件的异步加载，避免网页失去响应</li>
<li>管理模块之间的依赖性，便于代码的编写和维护</li>
</ol>
<h3 id="require-js加载"><a href="#require-js加载" class="headerlink" title="require.js加载"></a>require.js加载</h3><p>假定我们自己的代码文件是main.js，放在js目录下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"js/main"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>data-main属性的作用是，指定网页程序的主模块，如main.js，由于require.js默认文件后缀名是js，所有可以把main.js简写成main</p>
<h3 id="主模块的写法"><a href="#主模块的写法" class="headerlink" title="主模块的写法"></a>主模块的写法</h3><p>主模块依赖于其他模块，这时要使用AMD规范定义的require()函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'moduleA'</span>, <span class="string">'moduleB'</span>, <span class="string">'moculeC'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleA, moduleB, moduleC</span>)</span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>require()函数接受两个参数，第一个参数是一个数组，表示依赖的模块，moduleA、moduleB、moduleC，即主模块依赖这三个模块；第二个参数是一个回到函数，表示当前三个模块加载成功后，回调函数将被调用</p>
<h3 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h3><p>可以通过require.config()方法对模块的加载行为进行自定义。require.config()就写在主模块main.js的头部。参数是一个对象，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  baseUrl: <span class="string">""</span>,</div><div class="line">  paths: &#123;</div><div class="line">    <span class="comment">//如: "jquery": "jquery.min"</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="AMD-模块的写法"><a href="#AMD-模块的写法" class="headerlink" title="AMD 模块的写法"></a>AMD 模块的写法</h3><p>require.js加载的模块，采用AMD规范。</p>
<p>模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。如:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num++</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num--</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    add: add,</div><div class="line">    reduce: reduce</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>加载方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'math'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(math.add(num))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果模块依赖于其他模块，那么define()函数的第一个参数必须是数组，指明模块的依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">define([<span class="string">'caculate'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">caculate</span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    caculate.doSomething()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    foo: foo</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当require()函数加载math.js时，会先加载caculate.js</p>
<h3 id="加载非规范的模块"><a href="#加载非规范的模块" class="headerlink" title="加载非规范的模块"></a>加载非规范的模块</h3><p>加载非规范的模块要在用require()加载之前，要先用require.config()方法，定义它们的一些特征。</p>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>CMD是SeaJS在推广过程中对模块定义的规范,CMD则是依赖就近，用的时候再require。它写起来是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CMD</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>) <span class="comment">//依赖可以就近书写</span></div><div class="line">  math.add()</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//AMD默认推荐</span></div><div class="line">define([<span class="string">'a'</span>,<span class="string">'b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123; <span class="comment">//依赖必须一开始就写好</span></div><div class="line">  a.doSomething()</div><div class="line">  b.doSomething()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>AMD与CMD两者皆为异步加载模块，区别是对依赖模块的执行时机不同。</p>
<p>AMD依赖前置，JS可以方便的知道依赖是谁，立即加载；而CMD就近依赖，需要使用模块时在require()</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a><br><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a><br><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么使用模块化&quot;&gt;&lt;a href=&quot;#为什么使用模块化&quot; class=&quot;headerlink&quot; title=&quot;为什么使用模块化&quot;&gt;&lt;/a&gt;为什么使用模块化&lt;/h1&gt;&lt;p&gt;在多人合作的项目中，如果每个人都定义全局变量，难免会出现命名冲突的问题，这是难以维护的。同时分工合作的过程中，如果一人写一个js文件，我的js又需要依赖于另一个js文件，当文件多了，依赖关系变得十分混乱。而模块化编程正好可以解决这些问题。&lt;/p&gt;
&lt;h2 id=&quot;模块化的目的&quot;&gt;&lt;a href=&quot;#模块化的目的&quot; class=&quot;headerlink&quot; title=&quot;模块化的目的&quot;&gt;&lt;/a&gt;模块化的目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解决命名冲突&lt;/li&gt;
&lt;li&gt;依赖管理&lt;/li&gt;
&lt;li&gt;提高代码的可读性&lt;/li&gt;
&lt;li&gt;代码解耦，提高复用性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;立即执行函数写一个模块&quot;&gt;&lt;a href=&quot;#立即执行函数写一个模块&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数写一个模块&quot;&gt;&lt;/a&gt;立即执行函数写一个模块&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    m1: m1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    m2: m2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法达到了不暴露私有成员的目的&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="模块化" scheme="https://www.kmac007.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="CommonJS" scheme="https://www.kmac007.com/tags/CommonJS/"/>
    
      <category term="AMD" scheme="https://www.kmac007.com/tags/AMD/"/>
    
      <category term="CMD" scheme="https://www.kmac007.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>面向对象以及几种继承的实现方式</title>
    <link href="https://www.kmac007.com/2017/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%87%A0%E7%A7%8D%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html"/>
    <id>https://www.kmac007.com/2017/面向对象以及几种继承的实现方式.html</id>
    <published>2017-04-23T11:14:31.000Z</published>
    <updated>2017-08-29T02:31:06.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p>OOP指的是Object oriented programming指的是面向对象的程序设计。其中最重要的概念是类和对象</p>
<ul>
<li>类：具备某些属性和方法的模型。</li>
<li>对象：把类实例化就是一个个对象。</li>
</ul>
<p>面向对象编程有以下三个特性：</p>
<ol>
<li><p>继承性：子类继承父类的属性和方法，并可以添加新的属性和方法，或者对部分属性和方法进行重写。继承增加了代码的可重用性。</p>
</li>
<li><p>封装性：把类的属性的方法封装起来，暴露接口，使用方便</p>
</li>
<li><p>多态性：子类继承了父类的属性和方法，同时子类的方法可以进行重写。</p>
</li>
</ol>
<a id="more"></a>
<h1 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h1><ol>
<li>对象字面量</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>()</div></pre></td></tr></table></figure>
<ol>
<li>构造函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'dk'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo()</div></pre></td></tr></table></figure>
<ol>
<li>Object.create()</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> P = &#123;<span class="attr">name</span>: <span class="string">'dk'</span>&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(P)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">** Object.create()传递两个参数,第一个参数指定新创建对象的prototype,第二个属性可选。包含一个或多个属性描述符的 JavaScript 对象。如writable、enumerable和configurable</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h1 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"name"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="class声明"><a href="#class声明" class="headerlink" title="class声明"></a>class声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal2</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"name"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Animal()</div><div class="line"><span class="keyword">new</span> Animal2()</div></pre></td></tr></table></figure>
<h1 id="继承的几种实现方式"><a href="#继承的几种实现方式" class="headerlink" title="继承的几种实现方式"></a>继承的几种实现方式</h1><h2 id="一、借助构造函数实现继承"><a href="#一、借助构造函数实现继承" class="headerlink" title="一、借助构造函数实现继承"></a>一、借助构造函数实现继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">&#125;</div><div class="line">Parent.prototype.age = <span class="number">23</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child1"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<p>缺点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xiaoming.__proto__.__proto__ === Parent.prototype <span class="comment">//false</span></div><div class="line">xiaoming.__proto__.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>这个方法只继承的Parent构造函数中的属性，Parent.prototype上的属性与方法并不能被Child继承(这种方式会导致实例的原型链并不能指向Parent.prototype)</p>
<h2 id="二、借助原型链实现继承"><a href="#二、借助原型链实现继承" class="headerlink" title="二、借助原型链实现继承"></a>二、借助原型链实现继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"xiaoming"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent()</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> xiaoming2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaoming.__proto__.__proto__ === Parent.prototype <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>缺点:<br>父类增加新的属性，那么所有的实例也会同时发生改变。如上所示，由于实例xiaoming1与xiaoming2的<code>__proto__</code>属性指向同一个原型对象，因此，如果改变Parent中的arr，那么xiaoming1和xiaoming2的arr会同时改变，这是我们不想要的。(子类实例没有自己的属性)</p>
<h2 id="三、组合继承"><a href="#三、组合继承" class="headerlink" title="三、组合继承"></a>三、组合继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent()</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<p>缺点：<br>父对象执行了两次，这没有必要，并且无法区分实例对象是Child的直接实例还是Parent的实例</p>
<h2 id="四、组合继承优化1"><a href="#四、组合继承优化1" class="headerlink" title="四、组合继承优化1"></a>四、组合继承优化1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line">Child.prototype = Parent.prototype</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<p>缺点:<br>实例的constructor指向的是Parent，无法区分实例是Parent的实例还是Child的直接实例</p>
<h2 id="五、组合继承优化2"><a href="#五、组合继承优化2" class="headerlink" title="五、组合继承优化2"></a>五、组合继承优化2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Parent.call(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">"child"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.ptototype)</div><div class="line">Child.prototype.constructor = Child</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<h2 id="ES6-class继承"><a href="#ES6-class继承" class="headerlink" title="ES6 class继承"></a>ES6 class继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"parent"</span></div><div class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">super</span>()</div><div class="line">    <span class="keyword">this</span>.type=<span class="string">"child"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Child()</div></pre></td></tr></table></figure>
<h1 id="面向对象组件"><a href="#面向对象组件" class="headerlink" title="面向对象组件"></a>面向对象组件</h1><h2 id="jQuery轮播组件的面向对象写法"><a href="#jQuery轮播组件的面向对象写法" class="headerlink" title="jQuery轮播组件的面向对象写法"></a>jQuery轮播组件的面向对象写法</h2><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><script async src="//jsfiddle.net/kmac007/9mycbzdo/embed/result,js,html,css/dark/"></script>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-2.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 15px auto;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">      overflow: hidden;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">      content: '';</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      clear: both;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      right: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span><span class="selector-pseudo">:hover</span>,</span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.9</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">      bottom: 15px;</span></div><div class="line"><span class="undefined">      left: 50%;</span></div><div class="line"><span class="undefined">      margin-left: -60px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 10px;</span></div><div class="line"><span class="undefined">      height: 10px;</span></div><div class="line"><span class="undefined">      border-radius: 100%;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin: 0 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 传入轮播图的信息</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> infoList = [&#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img13.360buyimg.com/da/jfs/t6523/341/824411132/107598/9e0c0471/5944e2a2N1dbd6ab0.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img10.360buyimg.com/da/jfs/t5605/218/3703527351/96712/8d910da2/594204e7Necf27dfe.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img12.360buyimg.com/da/jfs/t6052/341/2742126351/72451/b5aa6d7/5945252bN141eed38.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;,</span></div><div class="line"><span class="undefined">      &#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'#'</span>,</span></div><div class="line"><span class="javascript">        imgSrc: <span class="string">"https://img12.360buyimg.com/da/jfs/t5779/306/3761419882/121798/e8b4bb9c/59421ed2Ne982edad.jpg"</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    ]</span></div><div class="line"><span class="javascript">    <span class="comment">// Carousel可传如两个参数，$ct为容器，infoList为轮播图信息（url与img.src）</span></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Carousel</span>(<span class="params">$ct, infoList</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct = $ct</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.pageIndex = <span class="number">0</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.render(infoList)</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.init()</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.bind()</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.autoPlay()</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 渲染dom节点</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">infoList</span>) </span>&#123;</span></div><div class="line"><span class="xml">      var arr = ['<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel"</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"img-ct"</span>&gt;</span>']</span></div><div class="line"><span class="javascript">      $.each(infoList, <span class="function"><span class="keyword">function</span> (<span class="params">index, info</span>) </span>&#123;</span></div><div class="line"><span class="xml">        arr.push('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"' + info.url + '"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"' + info.imgSrc + '"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>')</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      arr.push(<span class="string">'&lt;/ul&gt;&lt;div class = "playPre"&gt;&lt;&lt;/div&gt;&lt;div class="playNext"&gt;&gt;&lt;/div&gt;&lt;ul class="bullet"&gt;'</span>)</span></div><div class="line"><span class="javascript">      $.each(infoList, <span class="function"><span class="keyword">function</span> (<span class="params">idx, info</span>) </span>&#123;</span></div><div class="line"><span class="xml">        arr.push("<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>")</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="xml">      arr.push("<span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>")</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> renderDom = arr.join(<span class="string">''</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.append($(renderDom))</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".bullet li"</span>).eq(<span class="number">0</span>).addClass(<span class="string">"active"</span>)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">//初始化参数</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> $imgCt = <span class="keyword">this</span>.ct.find(<span class="string">'.img-ct'</span>),</span></div><div class="line"><span class="javascript">        $imgs = <span class="keyword">this</span>.ct.find(<span class="string">'.img-ct li'</span>),</span></div><div class="line"><span class="undefined">        imgsCount = $imgs.length,</span></div><div class="line"><span class="undefined">        imgWidth = $imgs.eq(0).width()</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      $imgCt.append($imgs.eq(0).clone())</span></div><div class="line"><span class="undefined">      $imgCt.prepend($imgs.last().clone())</span></div><div class="line"><span class="undefined">      $imgCt.width((imgsCount + 2) * imgWidth)</span></div><div class="line"><span class="undefined">      $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">        left: -imgWidth</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgCt = $imgCt</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgs = $imgs</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgsCount = imgsCount</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgWidth = imgWidth</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 绑定事件</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".playNext"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.playNext(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".playPre"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.playPre(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">".bullet li"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (index &gt; _this.pageIndex) &#123;</span></div><div class="line"><span class="undefined">          _this.playNext(index - _this.pageIndex)</span></div><div class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_this.pageIndex &gt; index) &#123;</span></div><div class="line"><span class="undefined">          _this.playPre(_this.pageIndex - index)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 向后播放</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.playNext = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">        left: <span class="string">"-="</span> + len * _this.imgWidth</span></div><div class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.pageIndex += len</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (_this.pageIndex === _this.imgsCount) &#123;</span></div><div class="line"><span class="undefined">          _this.pageIndex = 0</span></div><div class="line"><span class="undefined">          _this.imgCt.css(&#123;</span></div><div class="line"><span class="undefined">            left: -_this.imgWidth</span></div><div class="line"><span class="undefined">          &#125;)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        _this.isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">        _this.setBullet()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 向前播放</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.playPre = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">        left: <span class="string">"+="</span> + len * _this.imgWidth</span></div><div class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.pageIndex -= len</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (_this.pageIndex &lt; <span class="number">0</span>) &#123;</span></div><div class="line"><span class="undefined">          _this.pageIndex = _this.imgsCount - 1</span></div><div class="line"><span class="undefined">          _this.imgCt.css(&#123;</span></div><div class="line"><span class="undefined">            left: -_this.imgsCount * _this.imgWidth</span></div><div class="line"><span class="undefined">          &#125;)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        _this.isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">        _this.setBullet()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 设置轮播图下部导航标</span></span></div><div class="line"><span class="javascript">    Carousel.prototype.setBullet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.ct.find(<span class="string">'.bullet li'</span>).removeClass(<span class="string">'active'</span>).eq(<span class="keyword">this</span>.pageIndex).addClass(<span class="string">'active'</span>)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    Carousel.prototype.autoPlay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        _this.playNext(1)</span></div><div class="line"><span class="undefined">      &#125;, 3000)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> carousel1 = <span class="keyword">new</span> Carousel($(<span class="string">".container"</span>), infoList)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> carousel2 = <span class="keyword">new</span> Carousel($(<span class="string">".container2"</span>), infoList)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jQurey图片懒加载的面向对象写法"><a href="#jQurey图片懒加载的面向对象写法" class="headerlink" title="jQurey图片懒加载的面向对象写法"></a>jQurey图片懒加载的面向对象写法</h2><h3 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h3><script async src="//jsfiddle.net/kmac007/1xhyc8Lf/embed/result,js,html,css/dark/"></script>

<h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-2.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>lazyLoad<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 0 auto;</span></div><div class="line"><span class="undefined">      width: 800px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    img &#123;</span></div><div class="line"><span class="undefined">      width: 350px;</span></div><div class="line"><span class="undefined">      height: 200px;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=6"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=7"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=9"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=10"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=11"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=13"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=14"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=15"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=16"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=17"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=18"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=19"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=20"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=21"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=22"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=23"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> LazyLoad = <span class="function"><span class="keyword">function</span> (<span class="params">img</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.target = img</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.bind()</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.check(<span class="keyword">this</span>.target)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">// 绑定滚动事件</span></span></div><div class="line"><span class="javascript">    LazyLoad.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span></div><div class="line"><span class="javascript">      $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (_this.check(_this.target)) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">var</span> dataSrc = _this.target.attr(<span class="string">'data-src'</span>)</span></div><div class="line"><span class="javascript">          _this.target.attr(<span class="string">'src'</span>, dataSrc)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript">    <span class="comment">//判断目标图片是否在可视范围内</span></span></div><div class="line"><span class="javascript">    LazyLoad.prototype.check = <span class="function"><span class="keyword">function</span> (<span class="params">$node</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log($node)</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop(),</span></div><div class="line"><span class="javascript">        windowHeight = $(<span class="built_in">window</span>).height(),</span></div><div class="line"><span class="undefined">        offsetTop = $node.offset().top,</span></div><div class="line"><span class="javascript">        nodeHeight = $node.outerHeight(<span class="literal">true</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (scrollTop + windowHeight &gt; offsetTop &amp;&amp; scrollTop &lt; offsetTop + nodeHeight) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 遍历给每个图片绑定事件</span></span></div><div class="line"><span class="javascript">    $(<span class="string">'.wrap img'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">new</span> LazyLoad($(<span class="keyword">this</span>))</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OOP&quot;&gt;&lt;a href=&quot;#OOP&quot; class=&quot;headerlink&quot; title=&quot;OOP&quot;&gt;&lt;/a&gt;OOP&lt;/h1&gt;&lt;p&gt;OOP指的是Object oriented programming指的是面向对象的程序设计。其中最重要的概念是类和对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类：具备某些属性和方法的模型。&lt;/li&gt;
&lt;li&gt;对象：把类实例化就是一个个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向对象编程有以下三个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;继承性：子类继承父类的属性和方法，并可以添加新的属性和方法，或者对部分属性和方法进行重写。继承增加了代码的可重用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;封装性：把类的属性的方法封装起来，暴露接口，使用方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多态性：子类继承了父类的属性和方法，同时子类的方法可以进行重写。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="https://www.kmac007.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="https://www.kmac007.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>原型链、this与new操作符</title>
    <link href="https://www.kmac007.com/2017/%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81this%E4%B8%8Enew%E6%93%8D%E4%BD%9C%E7%AC%A6.html"/>
    <id>https://www.kmac007.com/2017/原型链、this与new操作符.html</id>
    <published>2017-04-20T07:10:32.000Z</published>
    <updated>2017-08-29T01:18:36.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h1><p>首先如下代码所示，声明一个构造函数，并实例化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"kmac007"</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div></pre></td></tr></table></figure></p>
<p>如上作为构造函数Person的实例person<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person.name <span class="comment">//kmac007</span></div></pre></td></tr></table></figure></p>
<p>person实例上并没有这个属性，而这个属性从何而来呢?<br>很明显，这个属性来自Person.prototype</p>
<p>每个函数都有一个prototype属性，就是上面看到的prototype,Person.prototype则表示实例的原型</p>
<p>那么person这个实例与Person.prototype的关系又是怎么样的呢，接下来就有了<code>__proto__</code></p>
<a id="more"></a>
<h1 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h1><p>每个JavaScript对象（除了null）都有一个隐式原型属性<code>__proto__</code>,这个属性指向创建该对象构造函数的prototype,而构造函数原型的constructor属性指向构造函数本身<br>如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"kmac007"</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">person.__proto__ === Person.prototype <span class="comment">//true</span></div><div class="line">Person.prototype.constructor === Person <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>那么Person.prototype对象的<code>__proto__</code>又是什么呢<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>由上可知实例对象通过<code>__proto__</code>与原型对象一层一层的连接<br>当我们使用person.toString()方法时，实例对象本身没有，因此通过<code>person.__proto__</code>向它的原型对象查找，如再找不到，则继续往它原型对象的原型对象查找<code>person.__proto__.__proto__</code>，最终在Object.prototype上找到了toString()方法。</p>
<p>而这种由<code>__proto__</code>相互关联的原型组成的链式结构就称作原型链。如下蓝色线条所示。</p>
<p><img src="http://ovdfwd2hf.bkt.clouddn.com/prototypeprototype.png" alt="prototye" style="margin: 0 auto;"></p>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="全局this"><a href="#全局this" class="headerlink" title="全局this"></a>全局this</h2><p>浏览器环境下this指向window对象，在任何情况下，创建变量时没有加上var或let相当于创建了一个全局变量。</p>
<p>Node命令行中，this===global  true</p>
<p>在命令行中进行求值会赋值在this上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo = <span class="string">"bar"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">//bar</span></div><div class="line"><span class="built_in">console</span>.log(global.foo) <span class="comment">//bar</span></div></pre></td></tr></table></figure></p>
<p>在Node环境中执行JS脚本，有所不同。this其实是个空对象，有别于global</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.js</span></div><div class="line">foo = <span class="string">"bar"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(global.foo) <span class="comment">//bar</span></div></pre></td></tr></table></figure>
<h2 id="函数或方法里的this"><a href="#函数或方法里的this" class="headerlink" title="函数或方法里的this"></a>函数或方法里的this</h2><p>函数被调用时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = obj.foo</div><div class="line">obj.foo()  <span class="comment">//obj</span></div><div class="line">bar() <span class="comment">//window</span></div></pre></td></tr></table></figure></p>
<p>函数的调用过程如下:</p>
<blockquote>
<p>func.call(context) context即调用时的上下文</p>
</blockquote>
<p>因此上面的调用过程如下:<br>obj.foo() 相当于 obj.foo.call(obj) this指向obj<br>bar() 相当于 bar.call(undefind) 而在浏览器环境中undefined默认指向window(注意：在严格模式下undefined并不指向window)</p>
<h2 id="个人了解的this的使用场景"><a href="#个人了解的this的使用场景" class="headerlink" title="个人了解的this的使用场景"></a>个人了解的this的使用场景</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  a: <span class="number">1</span>,</div><div class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>作为对象调用时，obj.b(); // 指向obj</li>
<li>作为函数调用, var b = obj.b; b(); // 指向全局window</li>
<li>作为构造函数调用 var b = new Fun(); // this指向当前实例对象</li>
<li>作为call与apply调用 obj.b.apply(object, []); // this指向当前的object</li>
</ol>
<h1 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call,apply,bind"></a>call,apply,bind</h1><p>call()和apply()的作用是改变函数的执行上下文，改变this的指向，第一部分参数是要指定的执行上下文，第二部分则是传入的参数。二者的区别在于传入参数的形式的不同，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func.apply(Obj, [argArray])</div><div class="line">func.call(Obj, arg1, arg2, arg3)</div></pre></td></tr></table></figure></p>
<p>bind()是ES5的方法，它是用来实现上下文的绑定，与call相似，可接受的参数部分分为两部分，第一个参数都是作为执行时函数上下文中的this的对象，但是bind的返回值是函数，call是改变上下文并执行函数。(bind()返回一个新的函数)</p>
<h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">instanceof</span>运算符用来测试一个对象在其原型链中是否存在一个构造函数的prototype属性。可以检测某个对象是不是另一个对象的实例。</div></pre></td></tr></table></figure>
<p>内部逻辑：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> A <span class="keyword">instanceof</span> B,</div><div class="line">判断规则是:</div><div class="line">先沿着A的__proto__链向上查找，</div><div class="line">同时查找B.prototype，</div><div class="line">一旦二者相等，</div><div class="line">则返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</div></pre></td></tr></table></figure>
<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><blockquote>
<p>MDN<br>当new Foo(…)执行时：</p>
<ol>
<li>一个新对象被创建。它继承自Foo.prototype</li>
<li>构造函数Foo被执行。执行的时候，相应的参数会被传入，同时上下文(this)会被指定为这个新实例。new Foo等同于new Foo()，只能用在不传递任何参数的情况。</li>
<li>如果构造函数返回了一个“对象”，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那么new出来的结果为步骤1创建的对象。</li>
</ol>
</blockquote>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>当new调用一个构造函数Foo时:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 创建一个对象</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;</div><div class="line"><span class="comment">//2. 设置原型链</span></div><div class="line">o.__proto__ = Foo.prototype</div><div class="line"><span class="comment">//3. 将Foo的this指向实例o并执行Foo</span></div><div class="line"><span class="keyword">var</span> k = Foo.call(o)</div><div class="line"><span class="comment">//4. 判断F的返回值类型：如果是值类型，就丢弃它，返回o；如果是引用类型，返回引用类型的这个对象，替换掉o</span></div></pre></td></tr></table></figure></p>
<p>new的代码实现思路如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> new2 = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(func.prototype)</div><div class="line">  <span class="keyword">var</span> k = func.call(o)</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> k === <span class="string">'object'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> k</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> o</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="external">JavaScript深入之从原型到原型链</a><br><a href="https://zhuanlan.zhihu.com/p/23090041?refer=study-fe" target="_blank" rel="external">「每日一题」什么是 JS 原型链？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;首先如下代码所示，声明一个构造函数，并实例化&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.name = &lt;span class=&quot;string&quot;&gt;&quot;kmac007&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上作为构造函数Person的实例person&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;person.name &lt;span class=&quot;comment&quot;&gt;//kmac007&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;person实例上并没有这个属性，而这个属性从何而来呢?&lt;br&gt;很明显，这个属性来自Person.prototype&lt;/p&gt;
&lt;p&gt;每个函数都有一个prototype属性，就是上面看到的prototype,Person.prototype则表示实例的原型&lt;/p&gt;
&lt;p&gt;那么person这个实例与Person.prototype的关系又是怎么样的呢，接下来就有了&lt;code&gt;__proto__&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="原型链" scheme="https://www.kmac007.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="this" scheme="https://www.kmac007.com/tags/this/"/>
    
      <category term="new" scheme="https://www.kmac007.com/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>jQuery轮播的两种实现</title>
    <link href="https://www.kmac007.com/2017/jQuery%E8%BD%AE%E6%92%AD%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://www.kmac007.com/2017/jQuery轮播的两种实现.html</id>
    <published>2017-04-17T06:20:14.000Z</published>
    <updated>2017-08-28T08:26:35.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="轮播图的原理"><a href="#轮播图的原理" class="headerlink" title="轮播图的原理"></a>轮播图的原理</h1><ul>
<li>方法一：通过一个容器将图片存放在一行上，设置一个窗口，并使其属性overflow: hidden，通过改变图片的水平偏移量达到视觉上的轮播效果。另外通过将最后一位图片拷贝一份放至最前，将第一位拷贝一份放置最后，当在第一位向前播放时，显示的是最后一位图片，并实际立刻跳转到最后一位，欺骗了用户，达到了无限轮播的效果。</li>
<li>方法二：容器中有许多图片，将图片所有初始的属性都设为display:none，通过jquery的fadeIn(),和fadeOut()方法，只显示第一张，改变图片的display属性达到渐变轮播的效果</li>
</ul>
<p>接口：</p>
<ul>
<li>playNext() 向后跳转</li>
<li>playPre()  向前跳转</li>
<li>play(index) 向某索引index跳转</li>
</ul>
<h1 id="预览及代码"><a href="#预览及代码" class="headerlink" title="预览及代码"></a>预览及代码</h1><h2 id="滑动轮播"><a href="#滑动轮播" class="headerlink" title="滑动轮播"></a>滑动轮播</h2><script async src="//jsfiddle.net/kmac007/Lwhjfg6h/1/embed/result,js,html,css/dark/"></script>

<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-Hans"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 15px auto;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">      overflow: hidden;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">      content: '';</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      clear: both;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      right: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span><span class="selector-pseudo">:hover</span>,</span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.9</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">      bottom: 15px;</span></div><div class="line"><span class="undefined">      left: 50%;</span></div><div class="line"><span class="undefined">      margin-left: -60px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 10px;</span></div><div class="line"><span class="undefined">      height: 10px;</span></div><div class="line"><span class="undefined">      border-radius: 100%;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin: 0 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"img-ct"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img13.360buyimg.com/da/jfs/t6523/341/824411132/107598/9e0c0471/5944e2a2N1dbd6ab0.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img10.360buyimg.com/da/jfs/t5605/218/3703527351/96712/8d910da2/594204e7Necf27dfe.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t6052/341/2742126351/72451/b5aa6d7/5945252bN141eed38.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t5779/306/3761419882/121798/e8b4bb9c/59421ed2Ne982edad.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playPre"</span>&gt;</span></div><div class="line">      &lt;&lt;/div&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playNext"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bullet"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> $imgCt = $(<span class="string">'.img-ct'</span>),</span></div><div class="line"><span class="javascript">        $imgs = $(<span class="string">'.img-ct li'</span>),</span></div><div class="line"><span class="undefined">        imgsCount = $imgs.length,</span></div><div class="line"><span class="undefined">        imgWidth = $imgs.eq(0).width(),</span></div><div class="line"><span class="undefined">        pageIndex = 0,</span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      $imgCt.append($imgs.eq(0).clone())</span></div><div class="line"><span class="undefined">      $imgCt.prepend($imgs.last().clone())</span></div><div class="line"><span class="undefined">      $imgCt.width((imgsCount + 2) * imgWidth)</span></div><div class="line"><span class="undefined">      $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">        left: -imgWidth</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      $(<span class="string">'.playNext'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      $(<span class="string">'.playPre'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playPre(1)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      $(<span class="string">'.bullet li'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (index &gt; pageIndex) &#123;</span></div><div class="line"><span class="undefined">          playNext(index - pageIndex)</span></div><div class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pageIndex &gt; index) &#123;</span></div><div class="line"><span class="undefined">          playPre(pageIndex - index)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playNext</span>(<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        $imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">          left: <span class="string">"-="</span> + len * imgWidth</span></div><div class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">          pageIndex += len</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (pageIndex === imgsCount) &#123;</span></div><div class="line"><span class="undefined">            pageIndex = 0</span></div><div class="line"><span class="undefined">            $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">              left: -imgWidth</span></div><div class="line"><span class="undefined">            &#125;)</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">          setBullet()</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playPre</span>(<span class="params">len</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        $imgCt.animate(&#123;</span></div><div class="line"><span class="javascript">          left: <span class="string">'+='</span> + len * imgWidth</span></div><div class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">          pageIndex -= len</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (pageIndex &lt; <span class="number">0</span>) &#123;</span></div><div class="line"><span class="undefined">            pageIndex = imgsCount - 1</span></div><div class="line"><span class="undefined">            $imgCt.css(&#123;</span></div><div class="line"><span class="undefined">              left: -imgsCount * imgWidth</span></div><div class="line"><span class="undefined">            &#125;)</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">          setBullet()</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">setBullet</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        $(<span class="string">'.bullet li'</span>).removeClass(<span class="string">'active'</span>).eq(pageIndex).addClass(<span class="string">'active'</span>)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext(1)</span></div><div class="line"><span class="undefined">      &#125;, 3000)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="渐变轮播"><a href="#渐变轮播" class="headerlink" title="渐变轮播"></a>渐变轮播</h2><script async src="//jsfiddle.net/kmac007/8zxuojdd/embed/result,js,html,css/dark/"></script>

<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-Hans"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span> &#123;</span></div><div class="line"><span class="undefined">      margin: 15px auto;</span></div><div class="line"><span class="undefined">      position: relative;</span></div><div class="line"><span class="undefined">      overflow: hidden;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#carousel</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">      content: '';</span></div><div class="line"><span class="undefined">      display: block;</span></div><div class="line"><span class="undefined">      clear: both;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.img-ct</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">      width: 790px;</span></div><div class="line"><span class="undefined">      height: 340px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      left: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      right: 0;</span></div><div class="line"><span class="undefined">      top: 50%;</span></div><div class="line"><span class="undefined">      height: 50px;</span></div><div class="line"><span class="undefined">      margin-top: -25px;</span></div><div class="line"><span class="undefined">      width: 30px;</span></div><div class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></div><div class="line"><span class="undefined">      line-height: 50px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      font-size: 20px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.playPre</span><span class="selector-pseudo">:hover</span>,</span></div><div class="line"><span class="css">    <span class="selector-class">.playNext</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.9</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span> &#123;</span></div><div class="line"><span class="undefined">      position: absolute;</span></div><div class="line"><span class="undefined">      z-index: 1;</span></div><div class="line"><span class="undefined">      bottom: 15px;</span></div><div class="line"><span class="undefined">      left: 50%;</span></div><div class="line"><span class="undefined">      margin-left: -60px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">      width: 10px;</span></div><div class="line"><span class="undefined">      height: 10px;</span></div><div class="line"><span class="undefined">      border-radius: 100%;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">      float: left;</span></div><div class="line"><span class="undefined">      margin: 0 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.bullet</span>&gt;<span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"img-ct"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img13.360buyimg.com/da/jfs/t6523/341/824411132/107598/9e0c0471/5944e2a2N1dbd6ab0.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img10.360buyimg.com/da/jfs/t5605/218/3703527351/96712/8d910da2/594204e7Necf27dfe.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t6052/341/2742126351/72451/b5aa6d7/5945252bN141eed38.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img12.360buyimg.com/da/jfs/t5779/306/3761419882/121798/e8b4bb9c/59421ed2Ne982edad.jpg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playPre"</span>&gt;</span></div><div class="line">      &lt;&lt;/div&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playNext"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bullet"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> $imgCt = $(<span class="string">'.img-ct'</span>),</span></div><div class="line"><span class="javascript">        $imgs = $(<span class="string">'.img-ct li'</span>),</span></div><div class="line"><span class="undefined">        imgsCount = $imgs.length,</span></div><div class="line"><span class="undefined">        pageIndex = 0,</span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      play(0)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      $(<span class="string">'.playNext'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="javascript">      $(<span class="string">'.playPre'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playPre()</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      $(<span class="string">'.bullet li'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span></div><div class="line"><span class="undefined">        play(index)</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">index</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (isAnimate) <span class="keyword">return</span></span></div><div class="line"><span class="javascript">        isAnimate = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        $imgs.eq(pageIndex).fadeOut(500)</span></div><div class="line"><span class="javascript">        $imgs.eq(index).fadeIn(<span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">          isAnimate = <span class="literal">false</span></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">        pageIndex = index</span></div><div class="line"><span class="undefined">        setBullet()</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playNext</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        play((pageIndex + 1) % imgsCount)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playPre</span>(<span class="params">index</span>) </span>&#123;</span></div><div class="line"><span class="undefined">        play((imgsCount + pageIndex - 1) % imgsCount)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">setBullet</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        $(<span class="string">'.bullet li'</span>).removeClass(<span class="string">'active'</span>).eq(pageIndex).addClass(<span class="string">'active'</span>)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        playNext()</span></div><div class="line"><span class="undefined">      &#125;, 3000)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;轮播图的原理&quot;&gt;&lt;a href=&quot;#轮播图的原理&quot; class=&quot;headerlink&quot; title=&quot;轮播图的原理&quot;&gt;&lt;/a&gt;轮播图的原理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;方法一：通过一个容器将图片存放在一行上，设置一个窗口，并使其属性overflow: hidden，通过改变图片的水平偏移量达到视觉上的轮播效果。另外通过将最后一位图片拷贝一份放至最前，将第一位拷贝一份放置最后，当在第一位向前播放时，显示的是最后一位图片，并实际立刻跳转到最后一位，欺骗了用户，达到了无限轮播的效果。&lt;/li&gt;
&lt;li&gt;方法二：容器中有许多图片，将图片所有初始的属性都设为display:none，通过jquery的fadeIn(),和fadeOut()方法，只显示第一张，改变图片的display属性达到渐变轮播的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;playNext() 向后跳转&lt;/li&gt;
&lt;li&gt;playPre()  向前跳转&lt;/li&gt;
&lt;li&gt;play(index) 向某索引index跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;预览及代码&quot;&gt;&lt;a href=&quot;#预览及代码&quot; class=&quot;headerlink&quot; title=&quot;预览及代码&quot;&gt;&lt;/a&gt;预览及代码&lt;/h1&gt;&lt;h2 id=&quot;滑动轮播&quot;&gt;&lt;a href=&quot;#滑动轮播&quot; class=&quot;headerlink&quot; title=&quot;滑动轮播&quot;&gt;&lt;/a&gt;滑动轮播&lt;/h2&gt;&lt;script async src=&quot;//jsfiddle.net/kmac007/Lwhjfg6h/1/embed/result,js,html,css/dark/&quot;&gt;&lt;/script&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://www.kmac007.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.kmac007.com/tags/jQuery/"/>
    
      <category term="轮播" scheme="https://www.kmac007.com/tags/%E8%BD%AE%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习使用笔记</title>
    <link href="https://www.kmac007.com/2017/jQuery%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>https://www.kmac007.com/2017/jQuery学习使用笔记.html</id>
    <published>2017-04-13T10:20:14.000Z</published>
    <updated>2017-08-28T02:38:15.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="库vs框架"><a href="#库vs框架" class="headerlink" title="库vs框架"></a>库vs框架</h1><ul>
<li>库: 对原生代码进行一个完整的封装，通过封装解决许多兼容性的问题。用户可以简易的调用API来构建项目，而不需要考虑许多兼容性问题。</li>
<li>框架：会基于自身的特点向用户提供一套完整的模版，用户需要按照框架规范来构建项目。</li>
<li>类比来说：前端库就像我们家里的工具箱，里面有锯子、锤子等工具，需要时，我们从工具箱中取工具；而框架像是房子的骨架，我们通过给房子添加建材等，使其完整。</li>
</ul>
<h1 id="jQuery的作用"><a href="#jQuery的作用" class="headerlink" title="jQuery的作用"></a>jQuery的作用</h1><p>jQuery是JavaScript的一个类库，仍是js，jQuery主要用来简化原生js的各种操作以及解决各种浏览器之间的兼容性。jQuery能办到的事情原生js都能办到。<br>通常来说jQuery有以下几个功能：</p>
<ol>
<li>方便快捷获取DOM元素</li>
<li>动态修改页面样式、动态改变DOM内容</li>
<li>解决跨浏览器兼容</li>
<li>响应用户的交互操作</li>
<li>为页面添加动态效果</li>
<li>统一Ajax操作</li>
<li>简化常见的JavaScript操作</li>
</ol>
<a id="more"></a>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p><img src="http://ovdfwd2hf.bkt.clouddn.com/image/jquery20150425QQ20150425-1@2x.png" alt="一图记录jQuery选择器" style="margin:0 auto;"></p>
<h1 id="与原生DOM对象相互转换"><a href="#与原生DOM对象相互转换" class="headerlink" title="与原生DOM对象相互转换"></a>与原生DOM对象相互转换</h1><p>DOM对象转jQuery对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)  <span class="comment">//通过$()将DOM对象包裹起来转换成jQuery对象</span></div></pre></td></tr></table></figure>
<p>jQuery对象转DOM对象</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>通过类数组下标方式转换成DOM对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".ct&gt;li"</span>)[<span class="number">0</span>]</div><div class="line">$(<span class="string">".ct&gt;li"</span>).eq(<span class="number">0</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<ul>
<li>通过get方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".ct&gt;li"</span>).get(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><p>把DOM字符串插入$方法即可返回一个jQuery对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = $(<span class="string">'&lt;div class="test"&gt;&lt;p&gt;&lt;span&gt;kmac007&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><h3 id="append-content-content-before-function"><a href="#append-content-content-before-function" class="headerlink" title=".append([content][,content]) / .before(function)"></a>.append([content][,content]) / .before(function)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.append(content[,content]) / .append(<span class="function"><span class="keyword">function</span>(<span class="params">index, html</span>))</span></div></pre></td></tr></table></figure>
<ol>
<li>可以一次添加多个内容，内容可以是DOM对象、HTML string、jQuery对象</li>
<li>如果参数是function，function可以返回DOM对象、HTML string、 jQuery对象，参数是集合中的元素位置与原来的html值</li>
</ol>
<h3 id="appendTo-target"><a href="#appendTo-target" class="headerlink" title=".appendTo(target)"></a>.appendTo(target)</h3><p>把对象插入到目标元素尾部，目标元素可以是selector, DOM对象, HTML string, 元素集合, jQuery对象;</p>
<h3 id="prependTo"><a href="#prependTo" class="headerlink" title=".prependTo"></a>.prependTo</h3><p>向对象头部追加内容，用法和append类似，内容添加到最开始</p>
<h3 id="prependTo-target"><a href="#prependTo-target" class="headerlink" title="prependTo(target)"></a>prependTo(target)</h3><p>把对象插入到目标元素头部，用法和prepend类似</p>
<h3 id="before-content-content-before-function"><a href="#before-content-content-before-function" class="headerlink" title=".before([content][,content]) / .before(function)"></a>.before([content][,content]) / .before(function)</h3><p>在对象前面(不是头部，而是外面，和对象并列同级)插入内容，参数和append类似</p>
<h3 id="insertBefore-target"><a href="#insertBefore-target" class="headerlink" title=".insertBefore(target)"></a>.insertBefore(target)</h3><p>把对象插入到target之前（同样不是头部，是同级）</p>
<h3 id="after-content-content-after-function（index）"><a href="#after-content-content-after-function（index）" class="headerlink" title=".after([content][,content]) / .after(function（index）)"></a>.after([content][,content]) / .after(function（index）)</h3><p>和before相反，在对象后面(不是尾部，而是外面，和对象并列同级)插入内容，参数和append类似</p>
<h3 id="insertAfter-target"><a href="#insertAfter-target" class="headerlink" title=".insertAfter(target)"></a>.insertAfter(target)</h3><p>和insertBefore相反，把对象插入到target之后（同样不是尾部，是同级）</p>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="remove-selector"><a href="#remove-selector" class="headerlink" title=".remove([selector])"></a>.remove([selector])</h3><p>删除被选元素(及其子元素)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div'</span>).remove()</div></pre></td></tr></table></figure></p>
<p>也可以添加一个可选的选择器参数来过滤匹配元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).remove(<span class="string">'.test'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="empty"><a href="#empty" class="headerlink" title=".empty()"></a>.empty()</h3><p>清空被选择元素内所有子元素</p>
<h3 id="detach"><a href="#detach" class="headerlink" title=".detach()"></a>.detach()</h3><p>.detach() 方法和.remove()一样, 除了 .detach()保存所有jQuery数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入DOM时，这种方法很有用。</p>
<h2 id="包裹元素"><a href="#包裹元素" class="headerlink" title="包裹元素"></a>包裹元素</h2><h3 id="wrap-wrappingElement-wrap-function-index"><a href="#wrap-wrappingElement-wrap-function-index" class="headerlink" title="wrap(wrappingElement) / .wrap(function(index))"></a>wrap(wrappingElement) / .wrap(function(index))</h3><p>为每个对象包裹一层HTML结构，可以是selector, element, HTML string, jQuery object<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>包裹元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">".inner"</span> ).wrap( <span class="string">"&lt;div class='new'&gt;&lt;/div&gt;"</span> );</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="wrapAll-wrappingElement"><a href="#wrapAll-wrappingElement" class="headerlink" title=".wrapAll(wrappingElement)"></a>.wrapAll(wrappingElement)</h3><p>把所有匹配对象包裹在同一个HTML结构中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>包裹元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">".inner"</span> ).wrapAll( <span class="string">"&lt;div class='new' /&gt;"</span>);</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="wrapInner-wrappingElement-wrapInner-function-index"><a href="#wrapInner-wrappingElement-wrapInner-function-index" class="headerlink" title=".wrapInner(wrappingElement) / .wrapInner(function(index))"></a>.wrapInner(wrappingElement) / .wrapInner(function(index))</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>包裹元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">".inner"</span> ).wrapInner( <span class="string">"&lt;div class='new'&gt;&lt;/div&gt;"</span>);</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new"</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="unwap"><a href="#unwap" class="headerlink" title=".unwap()"></a>.unwap()</h3><p>把DOM元素的parent移除<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pTags = $( <span class="string">"p"</span> ).unwrap();</div></pre></td></tr></table></figure></p>
<h2 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h2><h3 id="html-string"><a href="#html-string" class="headerlink" title="html([string])"></a>html([string])</h3><p>这是一个读写两用的方法，用于获取/修改元素的innerHTML</p>
<ol>
<li>当没有传递参数的时候，返回元素的innerHTML</li>
<li>当传递了一个string参数的时候，修改元素的innerHTML为参数值</li>
</ol>
<p>如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).html()</div><div class="line"></div><div class="line">$(<span class="string">'div'</span>).html(<span class="string">'123'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h3><p>和html方法类似，操作的是innerHTML</p>
<h1 id="属性-amp-CSS操作"><a href="#属性-amp-CSS操作" class="headerlink" title="属性&amp;CSS操作"></a>属性&amp;CSS操作</h1><h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><h3 id="val-value"><a href="#val-value" class="headerlink" title=".val([value])"></a>.val([value])</h3><p>处理input的value,无参数时表示获取，有参数时表示修改input的值为参数值</p>
<h3 id="attr-attributeName-value"><a href="#attr-attributeName-value" class="headerlink" title="attr(attributeName[,value])"></a>attr(attributeName[,value])</h3><p>传递两个参数，只有attributeName时，获取特定的属性值，有value则修改特定的属性值为value</p>
<h3 id="removeAttr"><a href="#removeAttr" class="headerlink" title="removeAttr()"></a>removeAttr()</h3><p>为匹配的元素集合移除相应属性</p>
<h2 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a>CSS相关</h2><p>与attr用法相似</p>
<h3 id="css-propertyName-css-propertyNames"><a href="#css-propertyName-css-propertyNames" class="headerlink" title="css(propertyName) / .css(propertyNames)"></a>css(propertyName) / .css(propertyNames)</h3><p>获取元素style特定property的值</p>
<h3 id="css-propertyName-value-css-propertyName-function-index-value-css-propertiesJson"><a href="#css-propertyName-value-css-propertyName-function-index-value-css-propertiesJson" class="headerlink" title=".css(propertyName,value) / .css( propertyName, function(index, value) ) / .css( propertiesJson )"></a>.css(propertyName,value) / .css( propertyName, function(index, value) ) / .css( propertiesJson )</h3><p>设置元素style特定property的值</p>
<h3 id="addClass-className-removeClass-className"><a href="#addClass-className-removeClass-className" class="headerlink" title="addClass(className) / .removeClass(className)"></a>addClass(className) / .removeClass(className)</h3><p>添加删除class,不覆盖原class,不检查重复</p>
<h3 id="removeClass-className-removeClass-function-index-class"><a href="#removeClass-className-removeClass-function-index-class" class="headerlink" title="removeClass([className]) / ,removeClass(function(index,class))"></a>removeClass([className]) / ,removeClass(function(index,class))</h3><p>移除元素单个/多个/所有class</p>
<h3 id="hasClass-className"><a href="#hasClass-className" class="headerlink" title=".hasClass(className)"></a>.hasClass(className)</h3><p>检查元素是否包含某个class，返回boolean</p>
<h3 id="toggleClass-className"><a href="#toggleClass-className" class="headerlink" title=".toggleClass(className)"></a>.toggleClass(className)</h3><p>切换class</p>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="each-function-index-Element"><a href="#each-function-index-Element" class="headerlink" title=".each( function(index, Element) )"></a>.each( function(index, Element) )</h2><p>遍历一个jQuery对象，为每个匹配元素执行一个函数</p>
<p>如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">"li"</span> ).each(<span class="function"><span class="keyword">function</span>(<span class="params"> index </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( index + <span class="string">": "</span><span class="string">" + $(this).text() );</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure></p>
<h2 id="jQuery-each-collection-callback-indexInArray-valueOfElement"><a href="#jQuery-each-collection-callback-indexInArray-valueOfElement" class="headerlink" title="jQuery.each( collection, callback(indexInArray, valueOfElement) )"></a>jQuery.each( collection, callback(indexInArray, valueOfElement) )</h2><p>一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1。其他对象通过其属性名进行迭代。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="string">"flammable"</span>: <span class="string">"inflammable"</span>,</div><div class="line">  <span class="string">"duh"</span>: <span class="string">"no duh"</span></div><div class="line">&#125;;</div><div class="line">$.each( obj, <span class="function"><span class="keyword">function</span>(<span class="params"> key, value </span>) </span>&#123;</div><div class="line">  alert( key + <span class="string">": "</span> + value );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="map-callback-index-domElement"><a href="#map-callback-index-domElement" class="headerlink" title=".map( callback(index, domElement) )"></a>.map( callback(index, domElement) )</h2><p>通过一个函数匹配当前集合中的每个元素,产生一个包含新的jQuery对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">i, ele</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="jQuery-extend-deep-target-object1-objectN"><a href="#jQuery-extend-deep-target-object1-objectN" class="headerlink" title="jQuery.extend([deep,] target [, object1 ] [, objectN ] )"></a>jQuery.extend([deep,] target [, object1 ] [, objectN ] )</h2><ol>
<li>当我们提供两个或多个对象给$.extend()，对象的所有属性都添加到目标对象（target参数）</li>
<li>如果只有一个参数提供给$.extend()，这意味着目标参数被省略。在这种情况下，jQuery对象本身被默认为目标对象。这样，我们可以在jQuery的命名空间下添加新的功能。这对于插件开发者希望向 jQuery 中添加新函数时是很有用的</li>
</ol>
<p>目标对象（第一个参数）将被修改，并且将通过$.extend()返回。然而，如果我们想保留原对象，我们可以通过传递一个空对象作为目标对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = $.extend(&#123;&#125;, object1, object2);</div></pre></td></tr></table></figure></p>
<p>如果第一个对象的属性本身是一个对象或数组，那么它将完全用第二个对象相同的key重写一个属性。这些值不会被合并。如果将 true作为该函数的第一个参数，那么会在对象上进行递归的合并。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object1 = &#123;</div><div class="line">  apple: <span class="number">0</span>,</div><div class="line">  banana: &#123; <span class="attr">weight</span>: <span class="number">52</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;,</div><div class="line">  cherry: <span class="number">97</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> object2 = &#123;</div><div class="line">  banana: &#123; <span class="attr">price</span>: <span class="number">200</span> &#125;,</div><div class="line">  durian: <span class="number">100</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Merge object2 into object1</span></div><div class="line">$.extend( object1, object2 );</div></pre></td></tr></table></figure></p>
<h2 id="clone-withDataAndEvents"><a href="#clone-withDataAndEvents" class="headerlink" title=".clone( [withDataAndEvents ] )"></a>.clone( [withDataAndEvents ] )</h2><p>.clone()方法深度复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点</p>
<h2 id="index-index-selector-index-element"><a href="#index-index-selector-index-element" class="headerlink" title=".index() / .index(selector)/ .index(element)"></a>.index() / .index(selector)/ .index(element)</h2><p>从给定集合中查找特定元素index</p>
<ol>
<li>没参数返回第一个元素index</li>
<li>如果参数是DOM对象或者jQuery对象，则返回参数在集合中的index</li>
<li>如果参数是选择器，返回第一个匹配元素index，没有找到返回-1</li>
</ol>
<h2 id="ready-handler"><a href="#ready-handler" class="headerlink" title=".ready( handler )"></a>.ready( handler )</h2><p>当DOM准备就绪时，指定一个函数来执行,如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ready'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><h2 id="on"><a href="#on" class="headerlink" title="on"></a>on</h2><p>on()为事件绑定的首选方法 在被选元素及子元素上添加一个或多个事件处理程序<br>语法: $(selector).on(event,childSelector,data,function,map)<br>参数:</p>
<ul>
<li>event:必需。规定要从被选元素添加的一个或多个事件或命名空间。由空格分隔多个事件值。必须是有效的事件</li>
<li>data:可选。规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）。</li>
<li>function:可选。规定当事件发生时运行的函数。</li>
<li>map:规定事件映射 ({event:function, event:function, …})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。</li>
</ul>
<h2 id="off"><a href="#off" class="headerlink" title="off"></a>off</h2><p>off() 方法通常用于移除通过 on() 方法添加的事件处理程序。</p>
<h2 id="使用on绑定事件使用事件代理的写法："><a href="#使用on绑定事件使用事件代理的写法：" class="headerlink" title="使用on绑定事件使用事件代理的写法："></a>使用on绑定事件使用事件代理的写法：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  $(<span class="string">".ct"</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text())</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其他事件:<br><img src="http://ovdfwd2hf.bkt.clouddn.com/20150425QQ20150425-2@2x.png" alt="一图总结jQuery事件" style="margin: 0 auto;"></p>
<h1 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>展示元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.show( duration [, easing ] [, complete ] )</div></pre></td></tr></table></figure>
<p>隐藏元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.hide([duration ] [,easing ] [,complete ])</div></pre></td></tr></table></figure>
<p>没有参数时直接等同于直接设置选中元素display属性，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.css(<span class="string">'display'</span>, <span class="string">'none'</span>)</div><div class="line"></div><div class="line">.toggle( [duration ] [, easing ] [, complete ] )</div><div class="line"><span class="comment">//用来切换元素的隐藏、显示，类似toggleClass</span></div></pre></td></tr></table></figure>
<p>参数：</p>
<ol>
<li>duration：动画持续的时间。一个字符串或数字决定动画运行的时间。（注：默认值为”400毫秒”）</li>
<li>easing：表示过渡使用哪种缓冲函数，jQuery自身提供”linear”和”swing”,默认为”swing”</li>
<li>complete：在动画完成时执行的函数<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2>.fadeIn<br>.fadeOut<br>.fadeTo<br>.fadeToggle</li>
</ol>
<h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><p>.slideDown<br>.slideUp<br>.slideToggle</p>
<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.animate( properties [, duration ] [, easing ] [, complete ] )</div></pre></td></tr></table></figure>
<p>properties是一个CSS属性和值的对象,动画将根据这组对象移动。 如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#clickme'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#book'</span>).animate(&#123;</div><div class="line">    opacity: <span class="number">0.25</span>,</div><div class="line">    left: <span class="string">'+=50'</span>,</div><div class="line">    height: <span class="string">'toggle'</span></div><div class="line">  &#125;, <span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Animation complete.</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>.animate( properties, options )</strong></p>
<p>options是一组包含动画选项的值的集合。 常用的选项:</p>
<ol>
<li>duration (default: 400)：一个字符串或者数字决定动画将运行多久。默认值: “normal”， 三种预定速度的字符串(“slow”, “normal”, 或 “fast”或表示动画时长的毫秒数值(如：1000) ）</li>
<li>easing (default: swing)：一个字符串，表示过渡使用哪种缓动函数。jQuery自身提供”linear” 和 “swing”，其他效果可以使用jQuery Easing Plugin插件</li>
<li>step：每个动画元素的每个动画属性将调用的函数。这个函数为修改Tween 对象提供了一个机会来改变设置中得属性值。</li>
<li>complete：在动画完成时执行的函数</li>
</ol>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">'xxx.js'</span>,</div><div class="line">    method: <span class="string">'GET'</span>,</div><div class="line">    data: &#123;</div><div class="line">        name: <span class="string">'kmac007'</span>,</div><div class="line">        age: <span class="number">23</span>,</div><div class="line">        sex: <span class="string">'Male'</span></div><div class="line">    &#125;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line"></div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus</span>)</span>&#123;</div><div class="line"></div><div class="line">    consloe.log(textStatus);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>参数:</p>
<ol>
<li><p>async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false</p>
</li>
<li><p>beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递</p>
</li>
<li><p>cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加”_={timestamp}”</p>
</li>
<li><p>context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象</p>
</li>
<li><p>data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据</p>
</li>
<li><p>headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖</p>
</li>
<li><p>method：HTTP 请求方法 (比如：”POST”, “GET “, “PUT”，1.9之前使用“type”)</p>
</li>
</ol>
<h2 id="serialize-serializeArray"><a href="#serialize-serializeArray" class="headerlink" title=".serialize() / serializeArray()"></a>.serialize() / serializeArray()</h2><p>用于提交表单</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;库vs框架&quot;&gt;&lt;a href=&quot;#库vs框架&quot; class=&quot;headerlink&quot; title=&quot;库vs框架&quot;&gt;&lt;/a&gt;库vs框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;库: 对原生代码进行一个完整的封装，通过封装解决许多兼容性的问题。用户可以简易的调用API来构建项目，而不需要考虑许多兼容性问题。&lt;/li&gt;
&lt;li&gt;框架：会基于自身的特点向用户提供一套完整的模版，用户需要按照框架规范来构建项目。&lt;/li&gt;
&lt;li&gt;类比来说：前端库就像我们家里的工具箱，里面有锯子、锤子等工具，需要时，我们从工具箱中取工具；而框架像是房子的骨架，我们通过给房子添加建材等，使其完整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;jQuery的作用&quot;&gt;&lt;a href=&quot;#jQuery的作用&quot; class=&quot;headerlink&quot; title=&quot;jQuery的作用&quot;&gt;&lt;/a&gt;jQuery的作用&lt;/h1&gt;&lt;p&gt;jQuery是JavaScript的一个类库，仍是js，jQuery主要用来简化原生js的各种操作以及解决各种浏览器之间的兼容性。jQuery能办到的事情原生js都能办到。&lt;br&gt;通常来说jQuery有以下几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快捷获取DOM元素&lt;/li&gt;
&lt;li&gt;动态修改页面样式、动态改变DOM内容&lt;/li&gt;
&lt;li&gt;解决跨浏览器兼容&lt;/li&gt;
&lt;li&gt;响应用户的交互操作&lt;/li&gt;
&lt;li&gt;为页面添加动态效果&lt;/li&gt;
&lt;li&gt;统一Ajax操作&lt;/li&gt;
&lt;li&gt;简化常见的JavaScript操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://www.kmac007.com/categories/jQuery/"/>
    
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
      <category term="jQuery" scheme="https://www.kmac007.com/tags/jQuery/"/>
    
      <category term="动画" scheme="https://www.kmac007.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>跨域的几种解决方案</title>
    <link href="https://www.kmac007.com/2017/%E8%B7%A8%E5%9F%9F%E7%9A%84%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>https://www.kmac007.com/2017/跨域的的几种解决方案.html</id>
    <published>2017-04-10T06:10:14.000Z</published>
    <updated>2017-08-28T02:08:12.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>浏览器出于安全方面的考虑，只允许与本域下的接口交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。<br>所谓的同源策略指的是三个相同：</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>例如:</p>
<p><a href="https://www.kmac007.com/2017/index.html">https://www.kmac007.com/2017/index.html</a> 这个网址，协议是https，域名是kmac007.com，端口是80（默认端口可以省略）<br>对于如下网址：</p>
<ul>
<li><a href="http://www.kmac007.com/2017/index.html">http://www.kmac007.com/2017/index.html</a> 不同源(协议不同)</li>
<li><a href="https://www.kmac007.com/2017/first.html">https://www.kmac007.com/2017/first.html</a> 同源</li>
<li><a href="https://kmac007.com/2017/first.html" target="_blank" rel="external">https://kmac007.com/2017/first.html</a> 不同源（域名不同）</li>
<li><a href="https://kmac007.com:8080/2017/first.html" target="_blank" rel="external">https://kmac007.com:8080/2017/first.html</a> 不同源（端口不同）</li>
</ul>
<p>同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<a id="more"></a>
<h1 id="跨域以及跨域的几种实现方式"><a href="#跨域以及跨域的几种实现方式" class="headerlink" title="跨域以及跨域的几种实现方式"></a>跨域以及跨域的几种实现方式</h1><p>跨域指的是，突破同源策略，不同源之间进行数据传输或通信。</p>
<p>跨域有如下几种实现方式：</p>
<ol>
<li>JSONP</li>
<li>document.domain</li>
<li>window.postMessage</li>
<li>CORS：跨域资源共享（Cross-origin resource sharing）<br>等</li>
</ol>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>在JS中我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。由于script标签不受同源策略的限制，可以通过script标签向服务器请求数据。而JSONP就是通过这个特性来实现的。</p>
<p>JSONP的原理是，在网页中动态添加一个script标签，src指向接口地址，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据包裹在一个指定名字的回调函数里传回来。</p>
<p>如: script标签的src指向 ‘kmac007.com/getData?callback=jsonp’,以jsonp(data)形式的返回数据，调用页面上的jsonp函数从而获取到了data</p>
<h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前端部分:</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.src = src;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    addScriptTag(<span class="string">'http://kmac007.com/getData?callback=jsonp'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data.name)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>服务器收到这个请求后，会将数据放在回调函数的参数位置返回：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后端部分：</span></div><div class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"dk"</span>,</div><div class="line">    <span class="string">"age"</span>: <span class="string">"23"</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> cb = req.query.callback</div><div class="line">  <span class="keyword">if</span> (cb) &#123;</div><div class="line">    res.send(cb + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(data) + <span class="string">')'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.send(data)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  返回：json(&#123;"name":"dk","age":"23"&#125;)</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>很好的解决了跨域通信的问题，用户传递一个callback参数给服务器，服务器根据callback返回特定的callback包裹的数据，客户端可以随意定制自己的的函数处理返回的数据。</li>
<li>兼容性非常好，在非常古老的浏览器上也能很好的实现</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>JSONP只支持get请求而不支持其他HTTP请求，参数的形式只能做url拼接，后台取值会比较繁琐</li>
<li>存在安全隐患，动态插入<code>&lt;script&gt;</code>标签其实就是一种脚本注入。</li>
</ol>
<h2 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h2><p>Cookie是服务器写入浏览器的一小段消息，只有同源的网页才能共享。但是两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享Cookie。</p>
<p>举例来说, A网页是<code>http://www1.kmac007.com/a.html</code>，B网页是<code>html://www2.kmac007.com/b.html</code>，只要设置相同的document.domain，两个网页就可以共享Cookie。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'kmac007.com'</span></div></pre></td></tr></table></figure>
<p>现在A网页中设置一个Cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"test=1"</span></div></pre></td></tr></table></figure>
<p>网页B中就可以读取这个Cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> allCookie = <span class="built_in">document</span>.cookie</div></pre></td></tr></table></figure>
<h2 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h2><p>由HTML5引入的API,postMEssage()方法允许来自不同源的脚本采用异步方式进行有限通信。这个API为 window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源。</p>
<p>postMessage方法的第一个参数是具体的信息内容，第二个参数是接收信息的窗口源（origin）,即“协议+域名+端口”。也可以设为*，表示不限制域名，向所有窗口发送。</p>
<p>即父窗口与子窗口互相发送消息，通过message事件，监听对方的消息，实现跨域。</p>
<p>父窗口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.main input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</div><div class="line">  <span class="built_in">window</span>.frames[<span class="number">0</span>].postMessage(<span class="keyword">this</span>.value, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">//向子窗口发送信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  $(<span class="string">'.main input'</span>).value = e.data</div><div class="line">  <span class="built_in">console</span>.log(e.data);</div><div class="line">  <span class="comment">//监听子窗口发送信息的变化</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>子窗口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#input'</span>).addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.parent.postMessage(<span class="keyword">this</span>.value, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">//向父窗口发送信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		$(<span class="string">'#input'</span>).value = e.data</div><div class="line">    <span class="built_in">console</span>.log(e.data);</div><div class="line">    <span class="comment">//监听父窗口的发送的信息变化</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS是一个W3C标准，全称是“跨域资源共享”(Cross-origin resource sharing)。</p>
<p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>CORS需要浏览器和服务器同时支持。目前所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>实现功能非常简单，只需要由服务器发送一个响应标头即可。它是通过客户端+服务端协作声明的方式来确保请求安全的。服务端会在HTTP请求头增加一系列HTTP请求参数（例如Acess-Control-Allow-Origin等），来限制哪些域的请求和哪些类型可以接受，而客户端在发起请求时必须声明自己的源(Origin)，否则服务器将不予处理，如果客户端不作声明，请求甚至会被浏览器直接拦截到不了服务端。服务端收到HTTP请求后会进行域的比较，只有同域的请求才会处理。</p>
<p>浏览器将CORS请求分为两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要满足以下两大条件，就属于简单请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">（1）请求方法是以下三种方法之一：</div><div class="line">- HEAD</div><div class="line">- GET</div><div class="line">- POST</div><div class="line">（2）HTTP的头信息不超过以下几种字段：</div><div class="line">- Accept</div><div class="line">- Accept-Language</div><div class="line">- Content-Language</div><div class="line">- Last-Event-ID</div><div class="line">- Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</div></pre></td></tr></table></figure></p>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理方式是不一样的。</p>
<ol>
<li>简单请求<br>对于简单请求，浏览器直接发出CORS请求。具体来说就是在头信息中，增加一个Origin字段。而Origin字段说明本次请求来自哪个源（协议+域名+端口）。服务器根据这个值，决定是否同意这次请求。如果Origin指定的源，不在许可范围内，浏览器会返回一个正常的HTTP回应。如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息 。如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http:<span class="comment">//api.kmac007.com</span></div><div class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></div><div class="line">Access-Control-Expose-Headers: showMes</div><div class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></div></pre></td></tr></table></figure>
<ol>
<li><p>非简单请求<br>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或Content-Type字段的类型是application/json。</p>
<p> 非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求。浏览器先询问服务器，当前网页所在的域名是否在服务器的虚空名单之中，一次可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就会报错。</p>
</li>
</ol>
<p>实现实例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//前端部分</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)</span></div><div class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></div><div class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span></div><div class="line"><span class="undefined">          newLi.innerText = xhr.responseText</span></div><div class="line"><span class="javascript">          <span class="built_in">document</span>.body.appendChild(newLi)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      xhr.open(<span class="string">'get'</span>, <span class="string">'http://b.kmac007.com:8080/getData'</span>, <span class="literal">true</span>)</span></div><div class="line"><span class="undefined">      xhr.send()</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后端部分</span></div><div class="line">app.get(<span class="string">'/getData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="string">"are u ok"</span></div><div class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>)</div><div class="line">  <span class="comment">// 加入响应头Access-Control-Allow-Origin</span></div><div class="line">  res.send(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h1&gt;&lt;p&gt;浏览器出于安全方面的考虑，只允许与本域下的接口交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。&lt;br&gt;所谓的同源策略指的是三个相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kmac007.com/2017/index.html&quot;&gt;https://www.kmac007.com/2017/index.html&lt;/a&gt; 这个网址，协议是https，域名是kmac007.com，端口是80（默认端口可以省略）&lt;br&gt;对于如下网址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kmac007.com/2017/index.html&quot;&gt;http://www.kmac007.com/2017/index.html&lt;/a&gt; 不同源(协议不同)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kmac007.com/2017/first.html&quot;&gt;https://www.kmac007.com/2017/first.html&lt;/a&gt; 同源&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kmac007.com/2017/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kmac007.com/2017/first.html&lt;/a&gt; 不同源（域名不同）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kmac007.com:8080/2017/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kmac007.com:8080/2017/first.html&lt;/a&gt; 不同源（端口不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
      <category term="跨域" scheme="https://www.kmac007.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://www.kmac007.com/2017/Ajax.html"/>
    <id>https://www.kmac007.com/2017/Ajax.html</id>
    <published>2017-04-07T03:10:26.000Z</published>
    <updated>2017-08-27T09:13:42.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax是什么-有何作用"><a href="#Ajax是什么-有何作用" class="headerlink" title="Ajax是什么?有何作用"></a>Ajax是什么?有何作用</h1><blockquote>
<p>AJax为“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。</p>
</blockquote>
<p>作用是：无需重新加载页面即可与服务器交换数据。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术带来了不错的用户体验。</p>
<p>而传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。</p>
<a id="more"></a>
<h1 id="用JS发起请求的几个步骤"><a href="#用JS发起请求的几个步骤" class="headerlink" title="用JS发起请求的几个步骤"></a>用JS发起请求的几个步骤</h1><h2 id="1-创建一个XMLHttpRequest对象"><a href="#1-创建一个XMLHttpRequest对象" class="headerlink" title="1. 创建一个XMLHttpRequest对象()"></a>1. 创建一个XMLHttpRequest对象()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div></pre></td></tr></table></figure>
<h2 id="2-监听请求成功后的变化"><a href="#2-监听请求成功后的变化" class="headerlink" title="2. 监听请求成功后的变化"></a>2. 监听请求成功后的变化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState== <span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xhr.responseText即服务器返回的内容（默认为字符串）</p>
<h2 id="3-设置请求参数"><a href="#3-设置请求参数" class="headerlink" title="3. 设置请求参数"></a>3. 设置请求参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"url"</span>, <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h2 id="4-发送请求"><a href="#4-发送请求" class="headerlink" title="4. 发送请求"></a>4. 发送请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send()</div></pre></td></tr></table></figure>
<p>在jQuery.ajax中对以上进行了封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="comment">//response即为响应内容</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="点击按钮，使用-ajax-获取数据，防止重复点击"><a href="#点击按钮，使用-ajax-获取数据，防止重复点击" class="headerlink" title="点击按钮，使用 ajax 获取数据，防止重复点击"></a>点击按钮，使用 ajax 获取数据，防止重复点击</h1><p>可以使用状态锁，判断数据是否到来。状态锁初始值为true，当发起一次请求后状态锁值变为false，此时，若是未获得响应的情况下重复点击，函数均被返回，等到状态码变为4即数据接收完毕，状态锁值变为true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isDataArrive = <span class="literal">true</span> <span class="comment">//默认为true</span></div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"getData"</span>)</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!isDataArrive) &#123; <span class="comment">//如果数据没有到来</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</div><div class="line">      &#125;</div><div class="line">      isDataArrive = <span class="literal">true</span> <span class="comment">// 收到响应</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.open()</div><div class="line">  xhr.send()</div><div class="line">  isDataArrive = <span class="literal">false</span> <span class="comment">//停止再次发送请求</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="简单封装一个-ajax-函数"><a href="#简单封装一个-ajax-函数" class="headerlink" title="简单封装一个 ajax 函数"></a>简单封装一个 ajax 函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">        <span class="keyword">var</span> results = <span class="built_in">JSON</span>.parse(xhr.responseText)</div><div class="line">        opts.success(results)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(xhr.status === <span class="number">404</span>)&#123;</div><div class="line">        opts.error()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> dataString = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</div><div class="line">    dataString += key + <span class="string">"="</span> + opts.data[key] + <span class="string">"&amp;"</span></div><div class="line">  &#125;</div><div class="line">  dataString = dataString.substr(<span class="number">0</span>, dataString.length - <span class="number">1</span>)</div><div class="line">  <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"get"</span>) &#123;</div><div class="line">    xhr.open(<span class="string">"get"</span>, opts.url + <span class="string">"?"</span> + dataString, <span class="literal">true</span>)</div><div class="line">    xhr.send()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"post"</span>) &#123;</div><div class="line">    xhr.open(<span class="string">"post"</span>, opts.url, <span class="literal">true</span>)</div><div class="line">    xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</div><div class="line">    xhr.send(dataString)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ajax(&#123;</div><div class="line">    url: <span class="string">'/login'</span>, <span class="comment">//接口地址</span></div><div class="line">    type: <span class="string">'get'</span>, <span class="comment">// 类型， post 或者 get,</span></div><div class="line">    data: &#123;</div><div class="line">      username: <span class="string">'kmac007'</span>,</div><div class="line">      password: <span class="string">'kmac007'</span></div><div class="line">    &#125;,</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(ret); <span class="comment">// &#123;status: 0&#125;</span></div><div class="line">    &#125;,</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'出错了'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="实现加载更多的功能，后端在本地使用server-mock来模拟数据"><a href="#实现加载更多的功能，后端在本地使用server-mock来模拟数据" class="headerlink" title="实现加载更多的功能，后端在本地使用server-mock来模拟数据"></a>实现加载更多的功能，后端在本地使用server-mock来模拟数据</h1><p>前端部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    li &#123;</span></div><div class="line"><span class="undefined">      margin: 0;</span></div><div class="line"><span class="undefined">      padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    #ct li &#123;</span></div><div class="line"><span class="undefined">      width: 100%;</span></div><div class="line"><span class="undefined">      list-style: none;</span></div><div class="line"><span class="undefined">      padding: 10px;</span></div><div class="line"><span class="undefined">      margin-top: 10px;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">      border: 1px solid #ccc;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    #ct li:hover &#123;</span></div><div class="line"><span class="undefined">      background-color: green;</span></div><div class="line"><span class="undefined">      color: #fff;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    #btn &#123;</span></div><div class="line"><span class="undefined">      border-radius: 5px;</span></div><div class="line"><span class="undefined">      text-align: center;</span></div><div class="line"><span class="undefined">      width: 80px;</span></div><div class="line"><span class="undefined">      padding: 10px;</span></div><div class="line"><span class="undefined">      margin: 10px auto;</span></div><div class="line"><span class="undefined">      border: 1px solid palevioletred;</span></div><div class="line"><span class="undefined">      color: palevioletred;</span></div><div class="line"><span class="undefined">      cursor: pointer;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line">    加载更多</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> ct = <span class="built_in">document</span>.getElementById(<span class="string">"ct"</span>)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> pageIdx = <span class="number">2</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> isDataArrive = <span class="literal">true</span></span></div><div class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="undefined">      e.preventDefault()</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (!isDataArrive) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      isDataArrive = <span class="literal">false</span></span></div><div class="line"><span class="undefined">      ajax(&#123;</span></div><div class="line"><span class="javascript">        url: <span class="string">'/loadMore'</span>, <span class="comment">//接口地址</span></span></div><div class="line"><span class="javascript">        type: <span class="string">'get'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">          index: pageIdx,</span></div><div class="line"><span class="undefined">          length: 6</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="undefined">          renderPage(results)</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"error"</span>)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;)</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">renderPage</span>(<span class="params">news</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span></div><div class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; news.length; i++) &#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">        node.innerText = news[i]</span></div><div class="line"><span class="undefined">        fragment.appendChild(node)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">      ct.appendChild(fragment)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></div><div class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> results = <span class="built_in">JSON</span>.parse(xhr.responseText)</span></div><div class="line"><span class="undefined">            opts.success(results)</span></div><div class="line"><span class="undefined">            pageIdx += 6</span></div><div class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="undefined">            opts.error()</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="javascript">          isDataArrive = <span class="literal">true</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> dataStr = <span class="string">''</span></span></div><div class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</span></div><div class="line"><span class="javascript">        dataStr += key + <span class="string">"="</span> + opts.data[key] + <span class="string">"&amp;"</span></span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">      dataStr = dataStr.substr(0, dataStr.length - 1)</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"get"</span>) &#123;</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">"get"</span>, opts.url + <span class="string">"?"</span> + dataStr, <span class="literal">true</span>)</span></div><div class="line"><span class="undefined">        xhr.send()</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">"post"</span>) &#123;</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">"post"</span>, opts.url, <span class="literal">true</span>)</span></div><div class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span></div><div class="line"><span class="undefined">        xhr.send(dataStr)</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>后端部分，采用server-mock<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载更多</span></div><div class="line">router.get(<span class="string">'/loadMore'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> curIdx = req.query.index</div><div class="line">  <span class="keyword">var</span> len = req.query.length</div><div class="line">  <span class="keyword">var</span> data = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    data.push(<span class="string">'内容'</span> + (<span class="built_in">parseInt</span>(curIdx) + i))</div><div class="line">  &#125;</div><div class="line">  res.send(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？"><a href="#前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？" class="headerlink" title="前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？"></a>前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？</h1><p>前后端开发联调需要注意的事情：</p>
<ul>
<li>约定数据：需要传输的数据及其数据类型</li>
<li>约定接口：确定接口名称及请求响应的格式，请求的参数名称、响应的数据格式</li>
<li>根据这些约定整理成接口文档</li>
</ul>
<p>如何mock数据：参照接口文档，使用假数据来验证接口和页面响应的正确性。</p>
<ul>
<li>如果有线上接口，可以根据线上接口来测试</li>
<li>可以使用mock工具来mock数据。</li>
<li>也可以通过node express搭建本地服务器，写脚本提供临时数据。</li>
<li>也可以直接将mock数据写入代码中，但缺点是联调需要做的改动较多，接口文档变化需要手动刷新。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ajax是什么-有何作用&quot;&gt;&lt;a href=&quot;#Ajax是什么-有何作用&quot; class=&quot;headerlink&quot; title=&quot;Ajax是什么?有何作用&quot;&gt;&lt;/a&gt;Ajax是什么?有何作用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;AJax为“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用是：无需重新加载页面即可与服务器交换数据。&lt;/p&gt;
&lt;p&gt;AJAX 是一种用于创建快速动态网页的技术。&lt;br&gt;通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术带来了不错的用户体验。&lt;/p&gt;
&lt;p&gt;而传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Ajax" scheme="https://www.kmac007.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>闭包、定时器与BOM</title>
    <link href="https://www.kmac007.com/2017/%E9%97%AD%E5%8C%85%E3%80%81%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8EBOM.html"/>
    <id>https://www.kmac007.com/2017/闭包、定时器与BOM.html</id>
    <published>2017-04-05T04:36:21.000Z</published>
    <updated>2017-08-27T08:21:08.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>JavaScript变量作用域有两种，分别是全局的作用域和函数作用域，JavaScript函数的局部变量可以直接读取全局变量。而函数外部变量并不能读取函数内的局部变量，但是通过闭包，可以在函数外部访问到内部的变量。</p>
<p>JavaScript作用域链：子对象会一级一级的向上查找父对象的变量，父对象的所有变量对子对象都是可见的，反之则不成立。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> local = <span class="number">1</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + local)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo(<span class="number">2</span>)</div><div class="line">bar()</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如上，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> local = <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x + local)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是一个闭包</p>
<blockquote>
<p>即闭包指的是函数和函数内部能访问到的变量的总和。</p>
</blockquote>
<p>闭包的作用：</p>
<ol>
<li>暴露一个可以访问局部变量的函数</li>
<li>隐藏一个变量，不让其他人直接访问这个变量</li>
</ol>
<h1 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h1><p>写一个函数判断是否首次加载</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断是否首次加载</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//声明一个_list，外部无法直接访问与修改_list</span></div><div class="line">  <span class="keyword">var</span> _arr = []</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_arr.indexOf(id) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      _arr.push(id)</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isFirstLoad = firstLoad()</div><div class="line"></div><div class="line">isFirstLoad(<span class="number">10</span>)</div><div class="line">isFirstLoad(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h1 id="修改代码让fnArr-i-输出-i。使用两种以上的方法"><a href="#修改代码让fnArr-i-输出-i。使用两种以上的方法" class="headerlink" title="修改代码让fnArr[i]() 输出 i。使用两种以上的方法"></a>修改代码让<code>fnArr[i]()</code> 输出 i。使用<strong>两种以上的</strong>方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">    fnArr[i] =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	    <span class="keyword">return</span> i;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">// 输出10</span></div></pre></td></tr></table></figure>
<p>代码的输出结果为10<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法一</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    fnArr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;(i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法二</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;(i));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法三</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  <span class="comment">//使用ES6的let语法</span></div><div class="line">  fnArr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]()); <span class="comment">//</span></div></pre></td></tr></table></figure>
<h1 id="封装一个汽车对象，可以通过如下方式获取汽车状态"><a href="#封装一个汽车对象，可以通过如下方式获取汽车状态" class="headerlink" title="封装一个汽车对象，可以通过如下方式获取汽车状态"></a>封装一个汽车对象，可以通过如下方式获取汽车状态</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> speed = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSpeed</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    speed = s</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(speed)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">accelerate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    speed += <span class="number">10</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decelerate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    speed &gt; <span class="number">0</span> ? speed -= <span class="number">10</span> : speed</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getStatus</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (speed &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"stop"</span>);</div><div class="line">      speed = <span class="literal">null</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (speed &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"running"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    setSpeed: setSpeed,</div><div class="line">    getSpeed: getSpeed,</div><div class="line">    accelerate: accelerate,</div><div class="line">    decelerate: decelerate,</div><div class="line">    getStatus: getStatus</div><div class="line">  &#125;</div><div class="line">&#125;)()</div><div class="line">Car.setSpeed(<span class="number">30</span>);</div><div class="line">Car.getSpeed(); <span class="comment">//30</span></div><div class="line">Car.accelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//40;</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//20</span></div><div class="line">Car.getStatus(); <span class="comment">// 'running';</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getStatus(); <span class="comment">//'stop';</span></div><div class="line"><span class="comment">//Car.speed;  //error</span></div></pre></td></tr></table></figure>
<h1 id="下面这段代码输出结果是-为什么"><a href="#下面这段代码输出结果是-为什么" class="headerlink" title="下面这段代码输出结果是? 为什么?"></a>下面这段代码输出结果是? 为什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> a ;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//2</span></div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果为1,3,2 因为setTimeout()会在程序的最后执行，前面声明a并赋值，重复声明不会改变a的值, setTimeOut异步</p>
</blockquote>
<h1 id="下面这段代码输出结果是-为什么-1"><a href="#下面这段代码输出结果是-为什么-1" class="headerlink" title="下面这段代码输出结果是? 为什么?"></a>下面这段代码输出结果是? 为什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    flag = <span class="literal">false</span>;</div><div class="line">&#125;,<span class="number">0</span>) <span class="comment">//原本会在程序的末尾执行，但由于while是个死循环，程序不会往下执行，故setTimeout也不会执行</span></div><div class="line"><span class="keyword">while</span>(flag)&#123;&#125; <span class="comment">//flag永远是true,死循环</span></div><div class="line"><span class="built_in">console</span>.log(flag); <span class="comment">//不会执行</span></div></pre></td></tr></table></figure>
<h1 id="下面这段代码输出？如何输出delayer-0-delayer-1-（使用闭包来实现）"><a href="#下面这段代码输出？如何输出delayer-0-delayer-1-（使用闭包来实现）" class="headerlink" title="下面这段代码输出？如何输出delayer: 0, delayer:1...（使用闭包来实现）"></a>下面这段代码输出？如何输出<code>delayer: 0, delayer:1...</code>（使用闭包来实现）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i);</div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出 0,1,2,3,4 delayer: 5, delayer: 5...</span></div></pre></td></tr></table></figure>
<p>修改：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;)(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出0,1,2,3,4 delayer: 0, delayer: 1, delayer: 2, delayer: 3, delayer: 4,</span></div></pre></td></tr></table></figure></p>
<h1 id="如何获取元素的真实宽高"><a href="#如何获取元素的真实宽高" class="headerlink" title="如何获取元素的真实宽高"></a>如何获取元素的真实宽高</h1><p>使用window.getComputedStyle()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var ele = doutment.getElementById(&quot;test&quot;)</div><div class="line">window.getComputedStyle(ele).width //获取id为test元素的宽</div><div class="line">window.getComputedStyle(ele).height //获取id为test元素的高</div></pre></td></tr></table></figure></p>
<h1 id="URL如何编码解码？为什么要编码？"><a href="#URL如何编码解码？为什么要编码？" class="headerlink" title="URL如何编码解码？为什么要编码？"></a>URL如何编码解码？为什么要编码？</h1><p>JavaScript提供四个URL的编码/解码方法。</p>
<ol>
<li>decodeURI()</li>
<li>decodeURIComponent()</li>
<li>encodeURI()</li>
<li>encodeURIComponent()<br>区别</li>
</ol>
<ul>
<li><p>encodeURI方法不会对下列字符编码</p>
<ol>
<li>ASCII字母</li>
<li>数字</li>
<li>~!@#$&amp;*()=:/,;?+’</li>
</ol>
</li>
<li><p>encodeURIComponent方法不会对下列字符编码</p>
<ol>
<li>ASCII字母</li>
<li>数字</li>
<li>~!*()’</li>
</ol>
</li>
</ul>
<p>所以encodeURIComponent比encodeURI编码的范围更大。<br>之所以要进行编码，是因为URL中有些字符会引起歧义。</p>
<h1 id="补全如下函数，判断用户的浏览器类型"><a href="#补全如下函数，判断用户的浏览器类型" class="headerlink" title="补全如下函数，判断用户的浏览器类型"></a>补全如下函数，判断用户的浏览器类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroid</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/Android/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIphone</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iPhone/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIpad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iPad/</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIOS</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/iOS/i</span>.test(<span class="built_in">window</span>.navigator.userAgent)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭包&lt;/h1&gt;&lt;p&gt;JavaScript变量作用域有两种，分别是全局的作用域和函数作用域，JavaScript函数的局部变量可以直接读取全局变量。而函数外部变量并不能读取函数内的局部变量，但是通过闭包，可以在函数外部访问到内部的变量。&lt;/p&gt;
&lt;p&gt;JavaScript作用域链：子对象会一级一级的向上查找父对象的变量，父对象的所有变量对子对象都是可见的，反之则不成立。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; local = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + local)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = foo(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="BOM" scheme="https://www.kmac007.com/tags/BOM/"/>
    
      <category term="闭包" scheme="https://www.kmac007.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="定时器" scheme="https://www.kmac007.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件</title>
    <link href="https://www.kmac007.com/2017/DOM%E4%BA%8B%E4%BB%B6.html"/>
    <id>https://www.kmac007.com/2017/DOM事件.html</id>
    <published>2017-04-01T02:36:21.000Z</published>
    <updated>2017-08-27T02:46:09.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM0级事件和DOM2级事件"><a href="#DOM0级事件和DOM2级事件" class="headerlink" title="DOM0级事件和DOM2级事件"></a>DOM0级事件和DOM2级事件</h1><ul>
<li>DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性。每个元素（包括window 和document）都有自己的事件处理程序属性，这些属性通常全部小写，如：onclick；同属性多次赋值的话，后面的属性会覆盖前面的属性。删除事件处理程序只需要将属性值设置为null即可，具有跨浏览器优势。这种方式添加的事件处理程序会在事件流的冒泡阶段处理。</li>
<li>DOM2级事件处理程序，定义了两个方法，用于处理指定和删除事件处理程序：addEventListener(), removeEventListener()。都接受3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值（默认为false）。最后一个布尔参数如果是true，表示在捕获阶段调用处理程序，而false表示在冒泡阶段调用事件处理程序。可以添加多个事件处理程序。但IE8及更早的版本不支持。</li>
</ul>
<a id="more"></a>
<h1 id="attachEvent与addEventListener的区别？"><a href="#attachEvent与addEventListener的区别？" class="headerlink" title="attachEvent与addEventListener的区别？"></a>attachEvent与addEventListener的区别？</h1><p>区别如下：</p>
<ol>
<li>attachEvent()接受两个参数：事件处理程序名称与事件处理程序函数；而     addEventListener()接受三个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值（默认值为false可忽略）。</li>
<li>事件处理程序的执行顺序不同：通过attachEvent()给某元素添加多个对于同一事件的处理程序时，它们的执行顺序是按照最后添加的先执行。 对于addEventListener()的事件处理程序则是按照添加顺序执行。</li>
<li>由于IE8及更早版本只支持事件冒泡，所用通过attachEvent()添加的事件处理程序都会被添加到冒泡阶段，而addEventListener()可以通过第三个参数布尔值来确定处理程序是在捕获阶段还是冒泡阶段调用。</li>
<li>作用域: 使用attachEvent()，事件处理程序会在全局作用域中运行，因此this等于window; 而addEventListener()的作用域是元素本身，this是指的是触发元素。</li>
<li>第一个参数不同：attachEvent()第一个参数为”on”+事件名，而addEventListener()的第一个参数为事件名。</li>
</ol>
<h1 id="IE事件冒泡与DOM2事件"><a href="#IE事件冒泡与DOM2事件" class="headerlink" title="IE事件冒泡与DOM2事件"></a>IE事件冒泡与DOM2事件</h1><h2 id="IE事件冒泡"><a href="#IE事件冒泡" class="headerlink" title="IE事件冒泡"></a>IE事件冒泡</h2><p><img style="margin: auto;" src="http://7xpvnv.com2.z0.glb.qiniucdn.com/4bc08396-78b0-48e3-a8bb-f846e86e9d73" alt="IE事件冒泡"></p>
<p>对于IE事件冒泡：即事件开始时由最具体的元素接受，然后逐级向上传播到较为不具体的节点。<br>如图，如果单击了页面中的<div>元素，那么click事件就会按照图中1、2、3、4的顺序传播。</div></p>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p><img style="margin: auto;" src="http://7xpvnv.com2.z0.glb.qiniucdn.com/8ddedb2e-f55e-4872-bd36-79c44b71d3f1" alt="DOM事件流"></p>
<p>对于DOM事件流：“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件作出响应。当点击<div>元素时，会按照如上图所示的顺序触发事件。</div></p>
<h1 id="阻止事件冒泡与阻止默认事件"><a href="#阻止事件冒泡与阻止默认事件" class="headerlink" title="阻止事件冒泡与阻止默认事件"></a>阻止事件冒泡与阻止默认事件</h1><ul>
<li>标准浏览器<ul>
<li>阻止冒泡: e.stopPropagation()</li>
<li>阻止默认事件：e.preventDefault()</li>
</ul>
</li>
<li>IE浏览器<ul>
<li>阻止冒泡：event.cancelBubble = true</li>
<li>阻止默认事件：event.returnValue = false</li>
</ul>
</li>
</ul>
<h1 id="有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"><a href="#有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容" class="headerlink" title="有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"></a>有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"ct"</span>&gt;</div><div class="line">    &lt;li&gt;这里是&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;kmac007&lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;小站&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">&lt;/u</span>l&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//todo ...</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myLi = <span class="built_in">document</span>.querySelector(<span class="string">".ct"</span>);</div><div class="line">myLi.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(event.target.innerText);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="补全代码，要求："><a href="#补全代码，要求：" class="headerlink" title="补全代码，要求："></a>补全代码，要求：</h1><ul>
<li>当点击按钮开头添加时在</li><li>这里是</li>元素前添加一个新元素，内容为用户输入的非空字符串；当点击结尾添加时在最后一个 li 元素后添加用户输入的非空字符串.
<li>当点击每一个元素li时控制台展示该元素的文本内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>kmac007<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>小站<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt-add-content"</span> <span class="attr">placeholder</span>=<span class="string">"添加内容"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-start"</span>&gt;</span>开头添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-end"</span>&gt;</span>结尾添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">//你的代码</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> ct = $(<span class="string">".ct"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btnStart = $(<span class="string">"#btn-add-start"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btnEnd = $(<span class="string">"#btn-add-end"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> iptContent = $(<span class="string">".ipt-add-content"</span>)</span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(e.target.innerText)</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  btnStart.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (!iptContent.value) &#123;</span></div><div class="line"><span class="javascript">      alert(<span class="string">"请输入内容"</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">      newLi.innerText = iptContent.value</span></div><div class="line"><span class="undefined">      ct.insertBefore(newLi, ct.childNodes[0])</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  btnEnd.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (!iptContent.value) &#123;</span></div><div class="line"><span class="javascript">      alert(<span class="string">"请输入内容"</span>)</span></div><div class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></div><div class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>)</span></div><div class="line"><span class="undefined">      newLi.innerText = iptContent.value</span></div><div class="line"><span class="undefined">      ct.appendChild(newLi)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"><a href="#补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。" class="headerlink" title="补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"></a>补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/Mourinho.png"</span>&gt;</span>鼠标放置查看图片1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/ibr.png"</span>&gt;</span>鼠标放置查看图片2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"https://kmac007.github.io/demos/test/manutd/img/rooney.png"</span>&gt;</span>鼠标放置查看图片3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">//你的代码</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> ct = $(<span class="string">".ct"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> pre = $(<span class="string">".img-preview"</span>)</span></div><div class="line"><span class="javascript">  <span class="comment">//鼠标移入事件</span></span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span></div><div class="line"><span class="javascript">      img.src = e.target.getAttribute(<span class="string">"data-img"</span>)</span></div><div class="line"><span class="undefined">      pre.appendChild(img)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="javascript">  <span class="comment">//鼠标移出事件</span></span></div><div class="line"><span class="javascript">  ct.addEventListener(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></div><div class="line"><span class="javascript">      pre.innerHTML = <span class="string">''</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM0级事件和DOM2级事件&quot;&gt;&lt;a href=&quot;#DOM0级事件和DOM2级事件&quot; class=&quot;headerlink&quot; title=&quot;DOM0级事件和DOM2级事件&quot;&gt;&lt;/a&gt;DOM0级事件和DOM2级事件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DOM0级事件处理程序是将一个函数赋值给一个事件处理程序属性。每个元素（包括window 和document）都有自己的事件处理程序属性，这些属性通常全部小写，如：onclick；同属性多次赋值的话，后面的属性会覆盖前面的属性。删除事件处理程序只需要将属性值设置为null即可，具有跨浏览器优势。这种方式添加的事件处理程序会在事件流的冒泡阶段处理。&lt;/li&gt;
&lt;li&gt;DOM2级事件处理程序，定义了两个方法，用于处理指定和删除事件处理程序：addEventListener(), removeEventListener()。都接受3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值（默认为false）。最后一个布尔参数如果是true，表示在捕获阶段调用处理程序，而false表示在冒泡阶段调用事件处理程序。可以添加多个事件处理程序。但IE8及更早的版本不支持。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="DOM" scheme="https://www.kmac007.com/tags/DOM/"/>
    
      <category term="事件" scheme="https://www.kmac007.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>DOM操作</title>
    <link href="https://www.kmac007.com/2017/DOM%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/DOM操作.html</id>
    <published>2017-03-29T06:26:31.000Z</published>
    <updated>2017-08-26T14:06:36.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM对象的innerText和innerHTML有什么区别？"><a href="#DOM对象的innerText和innerHTML有什么区别？" class="headerlink" title="DOM对象的innerText和innerHTML有什么区别？"></a>DOM对象的innerText和innerHTML有什么区别？</h1><ul>
<li><p>innerText返回元素内所包含的文本内容，在多层次的时候会按照元素的深浅顺序拼接其内容</p>
</li>
<li><p>innerHTML返回的是元素的HTML结构</p>
</li>
</ul>
<h1 id="elem-children和elem-childNodes的区别"><a href="#elem-children和elem-childNodes的区别" class="headerlink" title="elem.children和elem.childNodes的区别"></a>elem.children和elem.childNodes的区别</h1><p>elem.children与elem.childNodes 两者都是返回子节点；前者返回的是节点集合后者返回指定节点的子节点的节点集合包括元素、文本、注释等</p>
<a id="more"></a>
<h1 id="查询元素有几种常见的方法？ES5的元素选择方法是什么"><a href="#查询元素有几种常见的方法？ES5的元素选择方法是什么" class="headerlink" title="查询元素有几种常见的方法？ES5的元素选择方法是什么?"></a>查询元素有几种常见的方法？ES5的元素选择方法是什么?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">常见的方法有：</div><div class="line"></div><div class="line"><span class="number">1</span>、getElementById()</div><div class="line"><span class="number">2</span>、getElementsByTagName()</div><div class="line"><span class="number">3</span>、getElementsByClassName()</div><div class="line"><span class="number">4</span>、getElementsByName()</div><div class="line"></div><div class="line">ES5的元素选择方法是：</div><div class="line"></div><div class="line"><span class="number">1.</span> querySelector()</div><div class="line"><span class="number">2.</span> querySelectorAll()</div></pre></td></tr></table></figure>
<h1 id="如何创建一个元素？如何给元素设置属性？如何删除属性"><a href="#如何创建一个元素？如何给元素设置属性？如何删除属性" class="headerlink" title="如何创建一个元素？如何给元素设置属性？如何删除属性"></a>如何创建一个元素？如何给元素设置属性？如何删除属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>) <span class="comment">//创建元素</span></div><div class="line">s.setAttribute(<span class="string">"name"</span>,<span class="string">"DK"</span>) <span class="comment">// 设置属性</span></div><div class="line">s.removeAttribute(<span class="string">"name"</span>) <span class="comment">//删除属性</span></div></pre></td></tr></table></figure>
<h1 id="如何给页面元素添加子元素？如何删除页面元素下的子元素"><a href="#如何给页面元素添加子元素？如何删除页面元素下的子元素" class="headerlink" title="如何给页面元素添加子元素？如何删除页面元素下的子元素?"></a>如何给页面元素添加子元素？如何删除页面元素下的子元素?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">element.appendChild() <span class="comment">//给element添加子元素</span></div><div class="line">element.removeChild(child) <span class="comment">//删除element元素下的子元素child</span></div></pre></td></tr></table></figure>
<h1 id="element-classList有哪些方法？如何判断一个元素的-class-列表中是包含某个-class？如何添加一个class？如何删除一个class"><a href="#element-classList有哪些方法？如何判断一个元素的-class-列表中是包含某个-class？如何添加一个class？如何删除一个class" class="headerlink" title="element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?"></a>element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">add(class1, class2, ...) <span class="comment">//在元素中添加一个或多个类名，如指定的类名已存在，则不会添加</span></div><div class="line">contains(<span class="class"><span class="keyword">class</span>) //返回布尔值，判断指定的类名是否存在</span></div><div class="line"><span class="class"><span class="title">item</span>(<span class="title">index</span>) //返回类名在元素中的索引</span></div><div class="line"><span class="class"><span class="title">remove</span>(<span class="title">class1</span>, <span class="title">class2</span>, ...) //移除元素中的一个或多个类名，移除不存在的类名不会报错</span></div><div class="line"><span class="class"><span class="title">toggle</span>(<span class="title">class</span>, <span class="title">true</span>|<span class="title">false</span>) //在元素中切换类名，第一个参数为要在元素中移除的类名，并返回<span class="title">false</span>。如果类名不存在则会在元素中添加类名，并返回<span class="title">true</span>。第二个是可选参数，是个布尔值用于设置元素是否强制添加或移除类，不管类名是否存在。</span></div></pre></td></tr></table></figure>
<p>利用contains()判断是否包含某个class,用add()和remove()添加和删除class</p>
<h1 id="如何选中如下代码所有的li元素？-如何选中btn元素？"><a href="#如何选中如下代码所有的li元素？-如何选中btn元素？" class="headerlink" title="如何选中如下代码所有的li元素？ 如何选中btn元素？"></a>如何选中如下代码所有的li元素？ 如何选中btn元素？</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-tabs"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list1<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list2<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>list3<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>选中所有的li:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)</div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</div></pre></td></tr></table></figure></p>
<p>选中btn元素:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>]</div><div class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"btn"</span>)[<span class="number">0</span>]</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</div><div class="line">doucument.querySelectorAll(<span class="string">".btn"</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM对象的innerText和innerHTML有什么区别？&quot;&gt;&lt;a href=&quot;#DOM对象的innerText和innerHTML有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;DOM对象的innerText和innerHTML有什么区别？&quot;&gt;&lt;/a&gt;DOM对象的innerText和innerHTML有什么区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;innerText返回元素内所包含的文本内容，在多层次的时候会按照元素的深浅顺序拼接其内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;innerHTML返回的是元素的HTML结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;elem-children和elem-childNodes的区别&quot;&gt;&lt;a href=&quot;#elem-children和elem-childNodes的区别&quot; class=&quot;headerlink&quot; title=&quot;elem.children和elem.childNodes的区别&quot;&gt;&lt;/a&gt;elem.children和elem.childNodes的区别&lt;/h1&gt;&lt;p&gt;elem.children与elem.childNodes 两者都是返回子节点；前者返回的是节点集合后者返回指定节点的子节点的节点集合包括元素、文本、注释等&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="DOM" scheme="https://www.kmac007.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>引用类型及对象拷贝</title>
    <link href="https://www.kmac007.com/2017/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D.html"/>
    <id>https://www.kmac007.com/2017/引用类型及对象拷贝.html</id>
    <published>2017-03-25T05:36:21.000Z</published>
    <updated>2017-08-26T13:58:53.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用类型与非引用类型"><a href="#引用类型与非引用类型" class="headerlink" title="引用类型与非引用类型"></a>引用类型与非引用类型</h1><p>非引用类型：Undefined, Null, Number, String, Boolean</p>
<p>引用类型有: Function, Object, Array, Date, RegExp</p>
<h1 id="如下代码输出什么？为什么"><a href="#如下代码输出什么？为什么" class="headerlink" title="如下代码输出什么？为什么"></a>如下代码输出什么？为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj1 == obj2);  <span class="comment">//false 这里是判断obj1与obj2是否指向相同的对象</span></div><div class="line"><span class="built_in">console</span>.log(obj1 = obj2);  <span class="comment">//&#123;a:1, b:2&#125; 使obj1的指针指向obj2</span></div><div class="line"><span class="built_in">console</span>.log(obj1 == obj2);  <span class="comment">//true 由于obj1, obj2指向相同的对象，所以为true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="如下代码输出什么-为什么"><a href="#如下代码输出什么-为什么" class="headerlink" title="如下代码输出什么? 为什么"></a>如下代码输出什么? 为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span></div><div class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</div><div class="line"><span class="keyword">var</span> d = [a, b, c]</div><div class="line"></div><div class="line"><span class="keyword">var</span> aa = a</div><div class="line"><span class="keyword">var</span> bb = b</div><div class="line"><span class="keyword">var</span> cc = c</div><div class="line"><span class="keyword">var</span> dd = d</div><div class="line"></div><div class="line">a = <span class="number">11</span></div><div class="line">b = <span class="number">22</span></div><div class="line">c.name = <span class="string">'hello'</span></div><div class="line">d[<span class="number">2</span>][<span class="string">'age'</span>] = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(aa)  <span class="comment">//1, 将a的值赋予aa</span></div><div class="line"><span class="built_in">console</span>.log(bb)  <span class="comment">//2, 将b的值赋予bb</span></div><div class="line"><span class="built_in">console</span>.log(cc)  <span class="comment">//&#123; name: 'hello', age: 3 &#125;, cc与c指向同一个对象,改变c与会使cc改变</span></div><div class="line"><span class="built_in">console</span>.log(dd)  <span class="comment">// [1, 2, &#123; name: 'hello', age: 3 &#125;], dd与d指向同一个对象,改变d同样会使dd改变</span></div></pre></td></tr></table></figure>
<h1 id="如下代码输出什么-为什么-1"><a href="#如下代码输出什么-为什么-1" class="headerlink" title="如下代码输出什么? 为什么"></a>如下代码输出什么? 为什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">'dk'</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  ++n</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  ++obj.age</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1(a)</div><div class="line">f2(c)</div><div class="line">f1(c.age)</div><div class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1, 因为f1是按值传递，仅是将值传递进去，不会改变全局变量a</span></div><div class="line"><span class="built_in">console</span>.log(c)  <span class="comment">//&#123; name: 'dk', age: 3 &#125;, f2(c)是引用传递，变量指针指向obj, 会改变c中的值，而f1(c.age)为值传递，同理不会改变c</span></div></pre></td></tr></table></figure>
<h1 id="过滤如下数组，只保留正数，直接在原数组上操作"><a href="#过滤如下数组，只保留正数，直接在原数组上操作" class="headerlink" title="过滤如下数组，只保留正数，直接在原数组上操作"></a>过滤如下数组，只保留正数，直接在原数组上操作</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &lt;= <span class="number">0</span>) &#123;</div><div class="line">      arr.splice(i, <span class="number">1</span>);</div><div class="line">      filter(arr);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">filter(arr)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [3,1,2]</span></div></pre></td></tr></table></figure>
<h1 id="过滤如下数组，只保留正数，原数组不变，生成新数组"><a href="#过滤如下数组，只保留正数，原数组不变，生成新数组" class="headerlink" title="过滤如下数组，只保留正数，原数组不变，生成新数组"></a>过滤如下数组，只保留正数，原数组不变，生成新数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = []</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">      newArr.push(arr[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr2 = filter(arr)</div><div class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// [3,1,2]</span></div><div class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [3,1,0,-1,-2,2,-5]</span></div></pre></td></tr></table></figure>
<h1 id="对象深拷贝的几种方式"><a href="#对象深拷贝的几种方式" class="headerlink" title="对象深拷贝的几种方式"></a>对象深拷贝的几种方式</h1><blockquote>
<p>注意，ES6中Object.assign为浅拷贝</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">"robert"</span>,</div><div class="line">  age: <span class="number">3</span>,</div><div class="line">  child: &#123;</div><div class="line">    name: <span class="string">"bob"</span>,</div><div class="line">    age: <span class="number">3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*方法一*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy1</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newObj = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] !== <span class="string">'object'</span>) &#123;</div><div class="line">        newObj[key] = obj[key]</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newObj[key] = deepCopy1(obj[key])</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newObj</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj2 = deepCopy1(obj)</div><div class="line"><span class="built_in">console</span>.log(obj2)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*方法二*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy2</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</div><div class="line">  <span class="keyword">return</span> newObj</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引用类型与非引用类型&quot;&gt;&lt;a href=&quot;#引用类型与非引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型与非引用类型&quot;&gt;&lt;/a&gt;引用类型与非引用类型&lt;/h1&gt;&lt;p&gt;非引用类型：Undefined, Null, Number, String, Boolean&lt;/p&gt;
&lt;p&gt;引用类型有: Function, Object, Array, Date, RegExp&lt;/p&gt;
&lt;h1 id=&quot;如下代码输出什么？为什么&quot;&gt;&lt;a href=&quot;#如下代码输出什么？为什么&quot; class=&quot;headerlink&quot; title=&quot;如下代码输出什么？为什么&quot;&gt;&lt;/a&gt;如下代码输出什么？为什么&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 == obj2);  &lt;span class=&quot;comment&quot;&gt;//false 这里是判断obj1与obj2是否指向相同的对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 = obj2);  &lt;span class=&quot;comment&quot;&gt;//&amp;#123;a:1, b:2&amp;#125; 使obj1的指针指向obj2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1 == obj2);  &lt;span class=&quot;comment&quot;&gt;//true 由于obj1, obj2指向相同的对象，所以为true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="引用类型" scheme="https://www.kmac007.com/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="对象拷贝" scheme="https://www.kmac007.com/tags/%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.kmac007.com/2017/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>https://www.kmac007.com/2017/正则表达式.html</id>
    <published>2017-03-22T11:36:21.000Z</published>
    <updated>2017-08-26T10:53:08.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式常用字符及其含义"><a href="#正则表达式常用字符及其含义" class="headerlink" title="正则表达式常用字符及其含义"></a>正则表达式常用字符及其含义</h2><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>数字字符</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，字母、数字下划线</td>
</tr>
<tr>
<td>\s</td>
<td>空白符</td>
</tr>
<tr>
<td>[a-zA-Z0-9]]</td>
<td>任意字母a-z,A-Z和数字</td>
</tr>
<tr>
<td>\b</td>
<td>单词边界</td>
</tr>
<tr>
<td>.</td>
<td>除了回车符和换行符之外的所有字符</td>
</tr>
<tr>
<td>*</td>
<td>出现零次或多次（任意次）</td>
</tr>
<tr>
<td>+</td>
<td>出现一次或多次（至少出现一次）</td>
</tr>
<tr>
<td>?</td>
<td>出现零次或一次（最多出现一次）</td>
</tr>
<tr>
<td>x{3}</td>
<td>x出现3次</td>
</tr>
<tr>
<td>^</td>
<td>以XXX开头</td>
</tr>
<tr>
<td>$</td>
<td>以XXX结尾</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="写一个函数trim-str-，去除字符串两边的空白字符"><a href="#写一个函数trim-str-，去除字符串两边的空白字符" class="headerlink" title="写一个函数trim(str)，去除字符串两边的空白字符"></a>写一个函数trim(str)，去除字符串两边的空白字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isEmail-str-，判断用户输入的是不是邮箱"><a href="#写一个函数isEmail-str-，判断用户输入的是不是邮箱" class="headerlink" title="写一个函数isEmail(str)，判断用户输入的是不是邮箱"></a>写一个函数isEmail(str)，判断用户输入的是不是邮箱</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+$/</span></div><div class="line">  <span class="keyword">return</span> reg.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isPhoneNum-str-，判断用户输入的是不是手机号"><a href="#写一个函数isPhoneNum-str-，判断用户输入的是不是手机号" class="headerlink" title="写一个函数isPhoneNum(str)，判断用户输入的是不是手机号"></a>写一个函数isPhoneNum(str)，判断用户输入的是不是手机号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPhoneNum</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^1[35789]\d&#123;9&#125;$/</span></div><div class="line">  <span class="keyword">return</span> reg.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"><a href="#写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）" class="headerlink" title="写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"></a>写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidUsername</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,20&#125;$/</span></div><div class="line">  <span class="keyword">return</span> reg.test(str)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）"><a href="#写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）" class="headerlink" title="写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）"></a>写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidPassword</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(str.length&lt;<span class="number">6</span>||str.length&gt;<span class="number">20</span>||<span class="regexp">/[\W]/</span>.test(str)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[a-z]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[A-Z]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[0-9]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/[_]/</span>.test(str)) count++</div><div class="line">    <span class="keyword">if</span>(count&gt;=<span class="number">2</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个正则表达式，得到如下字符串里所有的颜色"><a href="#写一个正则表达式，得到如下字符串里所有的颜色" class="headerlink" title="写一个正则表达式，得到如下字符串里所有的颜色"></a>写一个正则表达式，得到如下字符串里所有的颜色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/#[a-fA-F0-9]&#123;6&#125;/g</span></div><div class="line"><span class="keyword">var</span> subj = <span class="string">"color: #121212; background-color: #AA00ef; width: 12px; bad-colors: f#fddee "</span></div><div class="line"><span class="built_in">console</span>.log( subj.match(reg) )  <span class="comment">// ['#121212', '#AA00ef']</span></div></pre></td></tr></table></figure>
<h2 id="下面代码输出什么-为什么-改写代码，让其输出-“”hunger””-“”world””"><a href="#下面代码输出什么-为什么-改写代码，让其输出-“”hunger””-“”world””" class="headerlink" title="下面代码输出什么? 为什么? 改写代码，让其输出[“”hunger””, “”world””]."></a>下面代码输出什么? 为什么? 改写代码，让其输出[“”hunger””, “”world””].</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello  "hunger" , hello "world"'</span>;</div><div class="line"><span class="keyword">var</span> pat =  <span class="regexp">/".*"/g</span>;</div><div class="line">str.match(pat);<span class="comment">//[""hunger" , hello "world""]</span></div><div class="line"><span class="comment">//原因是贪婪模式，量词在默认下尽可能多的匹配</span></div><div class="line"><span class="comment">//修改如下：</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'hello  "hunger" , hello "world"'</span>;</div><div class="line"><span class="keyword">var</span> pat =  <span class="regexp">/".*?"/g</span>;</div><div class="line">str.match(pat);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式常用字符及其含义&quot;&gt;&lt;a href=&quot;#正则表达式常用字符及其含义&quot; class=&quot;headerlink&quot; title=&quot;正则表达式常用字符及其含义&quot;&gt;&lt;/a&gt;正则表达式常用字符及其含义&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;单词字符，字母、数字下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-zA-Z0-9]]&lt;/td&gt;
&lt;td&gt;任意字母a-z,A-Z和数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;单词边界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;除了回车符和换行符之外的所有字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;出现零次或多次（任意次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;出现一次或多次（至少出现一次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;出现零次或一次（最多出现一次）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x{3}&lt;/td&gt;
&lt;td&gt;x出现3次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;以XXX开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;以XXX结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="正则表达式" scheme="https://www.kmac007.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Math数组及Date相关操作</title>
    <link href="https://www.kmac007.com/2017/Math%E6%95%B0%E7%BB%84%E5%8F%8ADate%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/Math数组及Date相关操作.html</id>
    <published>2017-03-20T10:56:51.000Z</published>
    <updated>2017-08-26T10:44:56.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="写一个函数，返回从min到max之间的随机整数，包括min不包括max"><a href="#写一个函数，返回从min到max之间的随机整数，包括min不包括max" class="headerlink" title="写一个函数，返回从min到max之间的随机整数，包括min不包括max"></a>写一个函数，返回从min到max之间的随机整数，包括min不包括max</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(min + <span class="built_in">Math</span>.random() * (max - min))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数，返回从min都max之间的-随机整数，包括min包括max"><a href="#写一个函数，返回从min都max之间的-随机整数，包括min包括max" class="headerlink" title="写一个函数，返回从min都max之间的 随机整数，包括min包括max"></a>写一个函数，返回从min都max之间的 随机整数，包括min包括max</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(min + <span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="写一个函数，生成一个长度为-n-的随机字符串，字符串字符的取值范围包括0到9，a到-z，A到Z。"><a href="#写一个函数，生成一个长度为-n-的随机字符串，字符串字符的取值范围包括0到9，a到-z，A到Z。" class="headerlink" title="写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z。"></a>写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldStr = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandStr</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="comment">//补全函数</span></div><div class="line">  <span class="keyword">var</span> strArr = oldStr.split(<span class="string">''</span>)</div><div class="line">  <span class="keyword">var</span> randStr = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> strKey = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * oldStr.length)</div><div class="line">    randStr += strArr[strKey]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> randStr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = getRandStr(<span class="number">10</span>); <span class="comment">// 0a3iJiRZap</span></div></pre></td></tr></table></figure>
<h2 id="写一个函数，生成一个随机-IP-地址，一个合法的-IP-地址为-0-0-0-0-255-255-255-255"><a href="#写一个函数，生成一个随机-IP-地址，一个合法的-IP-地址为-0-0-0-0-255-255-255-255" class="headerlink" title="写一个函数，生成一个随机 IP 地址，一个合法的 IP 地址为 0.0.0.0~255.255.255.255"></a>写一个函数，生成一个随机 IP 地址，一个合法的 IP 地址为 0.0.0.0~255.255.255.255</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandIp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ipArr = []</div><div class="line">  <span class="keyword">var</span> len = <span class="number">4</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    ipArr[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">255</span> + <span class="number">1</span>))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ipArr.join(<span class="string">'.'</span>)</div><div class="line">  &#125;</div><div class="line">  getRandIp()</div></pre></td></tr></table></figure>
<h2 id="写一个函数，生成一个随机颜色字符串，合法的颜色为-000000-ffffff"><a href="#写一个函数，生成一个随机颜色字符串，合法的颜色为-000000-ffffff" class="headerlink" title="写一个函数，生成一个随机颜色字符串，合法的颜色为#000000~ #ffffff"></a>写一个函数，生成一个随机颜色字符串，合法的颜色为#000000~ #ffffff</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">"ABCDEF0123456789"</span></div><div class="line">  <span class="keyword">var</span> colorArr = str.split(<span class="string">''</span>)</div><div class="line">  <span class="keyword">var</span> len = <span class="number">6</span></div><div class="line">  <span class="keyword">var</span> colorStr = <span class="string">''</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    colorStr += colorArr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (colorArr.length))]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">'#'</span> + colorStr</div><div class="line">&#125;</div><div class="line">getRandColor()</div></pre></td></tr></table></figure>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用-splice函数分别实现push、pop、shift、unshift方法"><a href="#数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用-splice函数分别实现push、pop、shift、unshift方法" class="headerlink" title="数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用 splice函数分别实现push、pop、shift、unshift方法"></a>数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用 splice函数分别实现push、pop、shift、unshift方法</h2><p>push: 向数组的末尾添加一个或更多元素，并返回新的数组长度。</p>
<p>pop: 删除并返回数组的最后一个元素</p>
<p>shift: 删除并返回数组的第一个元素</p>
<p>unshift: 向数组的开头添加一个或更多元素，并返回新的长度。</p>
<p>join: 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</p>
<p>splice: 删除元素，并向数组添加新元素。</p>
<p>用splice实现push:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(arr.length,<span class="number">0</span>,item)</div></pre></td></tr></table></figure></p>
<p>用splice实现pop:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(arr.length<span class="number">-1</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>用slice实现unshift:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(<span class="number">0</span>,<span class="number">0</span>,item)</div></pre></td></tr></table></figure></p>
<p>用slice实现shift:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<h2 id="写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作"><a href="#写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作" class="headerlink" title="写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作"></a>写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">squareArr</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    arr[i] = arr[i] * arr[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</div><div class="line">squareArr(arr)</div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [4, 16, 36]</span></div></pre></td></tr></table></figure>
<h2 id="写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变"><a href="#写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变" class="headerlink" title="写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变"></a>写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterPositive</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = []</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] === <span class="string">"number"</span> &amp;&amp; arr[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">      newArr.push(arr[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="string">'hello'</span>, <span class="literal">true</span>]</div><div class="line"><span class="keyword">var</span> newArr = filterPositive(arr)</div><div class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">//[3, 2]</span></div><div class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//[3, -1,  2,  'hello', true]</span></div></pre></td></tr></table></figure>
<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><h2 id="写一个函数getChIntv，获取从当前时间到指定日期的间隔时间"><a href="#写一个函数getChIntv，获取从当前时间到指定日期的间隔时间" class="headerlink" title="写一个函数getChIntv，获取从当前时间到指定日期的间隔时间"></a>写一个函数getChIntv，获取从当前时间到指定日期的间隔时间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timeStr = getChIntv(<span class="string">"2017-05-01"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChIntv</span>(<span class="params">timeStr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> targetTime = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr).getTime() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">8</span></div><div class="line">  <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now()</div><div class="line">  <span class="keyword">var</span> offsetTime = targetTime - currentTime</div><div class="line">  <span class="keyword">var</span> days = <span class="built_in">parseInt</span>(offsetTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>))</div><div class="line">  <span class="keyword">var</span> hours = <span class="built_in">parseInt</span>(offsetTime % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>))</div><div class="line">  <span class="keyword">var</span> mins = <span class="built_in">parseInt</span>(offsetTime % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">1000</span> * <span class="number">60</span>))</div><div class="line">  <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>(offsetTime % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) % (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) % (<span class="number">1000</span> * <span class="number">60</span>) / <span class="number">1000</span>)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">"距五一还有:"</span> + days + <span class="string">"天"</span> + hours + <span class="string">"小时"</span> + mins + <span class="string">"分"</span> + seconds + <span class="string">"秒"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(timeStr); <span class="comment">// 距五一还有:11天7小时26分28秒</span></div></pre></td></tr></table></figure>
<h2 id="把hh-mm-dd格式数字日期改成中文日期"><a href="#把hh-mm-dd格式数字日期改成中文日期" class="headerlink" title="把hh-mm-dd格式数字日期改成中文日期"></a>把hh-mm-dd格式数字日期改成中文日期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = getChsDate(<span class="string">'2015-01-08'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChsDate</span>(<span class="params">timeStr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dist = [<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>, <span class="string">"十"</span>, <span class="string">"十一"</span>, <span class="string">"十二"</span>, <span class="string">"十三"</span>, <span class="string">"十四"</span>, <span class="string">"十五"</span>, <span class="string">"十六"</span>, <span class="string">"十七"</span>, <span class="string">"十八"</span>, <span class="string">"十九"</span>, <span class="string">"二十"</span>, <span class="string">"二十一"</span>, <span class="string">"二十二"</span>, <span class="string">"二十三"</span>, <span class="string">"二十四"</span>, <span class="string">"二十五"</span>, <span class="string">"二十六"</span>, <span class="string">"二十七"</span>, <span class="string">"二十八"</span>, <span class="string">"二十九"</span>, <span class="string">"三十"</span>, <span class="string">"三十一"</span>];</div><div class="line">  <span class="keyword">var</span> arr = timeStr.split(<span class="string">'-'</span>)</div><div class="line">  <span class="keyword">var</span> year = arr[<span class="number">0</span>]</div><div class="line">  <span class="keyword">var</span> month = arr[<span class="number">1</span>]</div><div class="line">  <span class="keyword">var</span> day = arr[<span class="number">2</span>]</div><div class="line">  <span class="keyword">var</span> chYear = dist[<span class="built_in">parseInt</span>(year[<span class="number">0</span>])] + dist[<span class="built_in">parseInt</span>(year[<span class="number">1</span>])] + dist[<span class="built_in">parseInt</span>(year[<span class="number">2</span>])] + dist[<span class="built_in">parseInt</span>(year[<span class="number">3</span>])]</div><div class="line">  <span class="keyword">var</span> chMonth = dist[<span class="built_in">parseInt</span>(month)]</div><div class="line">  <span class="keyword">var</span> chDay = dist[<span class="built_in">parseInt</span>(day)]</div><div class="line">  <span class="keyword">return</span> chYear + <span class="string">"年"</span> + chMonth + <span class="string">"月"</span> + chDay + <span class="string">"日"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 二零一五年一月八日</span></div></pre></td></tr></table></figure>
<h2 id="写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串"><a href="#写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串" class="headerlink" title="写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串:"></a>写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">friendlyDate</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> now = <span class="built_in">Date</span>.now()</div><div class="line">  <span class="keyword">var</span> offsetTime = (now - time) / <span class="number">1000</span> / <span class="number">60</span></div><div class="line">  <span class="keyword">if</span> (offsetTime &lt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime * <span class="number">60</span>) + <span class="string">"刚刚"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">1</span> &amp;&amp; offsetTime &lt; <span class="number">60</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime) + <span class="string">"分钟前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> &amp;&amp; offsetTime &lt; <span class="number">60</span> * <span class="number">24</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span>) + <span class="string">"小时前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> * <span class="number">24</span> &amp;&amp; offsetTime &lt; <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span> / <span class="number">24</span>) + <span class="string">"天前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> &amp;&amp; offsetTime &lt; <span class="number">60</span> * <span class="number">24</span> * <span class="number">39</span> * <span class="number">12</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span> / <span class="number">24</span> / <span class="number">30</span>) + <span class="string">"月前"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetTime &gt;= <span class="number">60</span> * <span class="number">24</span> * <span class="number">39</span> * <span class="number">12</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(offsetTime / <span class="number">60</span> / <span class="number">24</span> / <span class="number">30</span> / <span class="number">12</span>) + <span class="string">"年前"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = friendlyDate(<span class="string">'1492593606284'</span>) <span class="comment">//  1分钟前</span></div><div class="line"><span class="keyword">var</span> str2 = friendlyDate(<span class="string">'1422583606284'</span>) <span class="comment">//2年前</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;&gt;&lt;/a&gt;Math&lt;/h1&gt;&lt;h2 id=&quot;写一个函数，返回从min到max之间的随机整数，包括min不包括max&quot;&gt;&lt;a href=&quot;#写一个函数，返回从min到max之间的随机整数，包括min不包括max&quot; class=&quot;headerlink&quot; title=&quot;写一个函数，返回从min到max之间的随机整数，包括min不包括max&quot;&gt;&lt;/a&gt;写一个函数，返回从min到max之间的随机整数，包括min不包括max&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRandom&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;min, max&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(min + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * (max - min))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;写一个函数，返回从min都max之间的-随机整数，包括min包括max&quot;&gt;&lt;a href=&quot;#写一个函数，返回从min都max之间的-随机整数，包括min包括max&quot; class=&quot;headerlink&quot; title=&quot;写一个函数，返回从min都max之间的 随机整数，包括min包括max&quot;&gt;&lt;/a&gt;写一个函数，返回从min都max之间的 随机整数，包括min包括max&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRandom&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;min, max&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(min + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * (max - min + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="Math" scheme="https://www.kmac007.com/tags/Math/"/>
    
      <category term="Date" scheme="https://www.kmac007.com/tags/Date/"/>
    
      <category term="数组" scheme="https://www.kmac007.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>字符串与JSON相关操作</title>
    <link href="https://www.kmac007.com/2017/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8EJSON%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.kmac007.com/2017/字符串与JSON相关操作.html</id>
    <published>2017-03-20T08:28:55.000Z</published>
    <updated>2017-08-26T10:10:16.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用数组拼接出如下字符串"><a href="#使用数组拼接出如下字符串" class="headerlink" title="使用数组拼接出如下字符串"></a>使用数组拼接出如下字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;&lt;dl class=&quot;product&quot;&gt;&lt;dt&gt;女装&lt;/dt&gt;&lt;dd&gt;短款&lt;/dd&gt;&lt;dd&gt;冬季&lt;/dd&gt;&lt;dd&gt;春装&lt;/dd&gt;&lt;/dl&gt;&quot;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prod = &#123;</div><div class="line">  name: <span class="string">'女装'</span>,</div><div class="line">  styles: [<span class="string">'短款'</span>, <span class="string">'冬季'</span>, <span class="string">'春装'</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTplStr</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = []</div><div class="line">  arr.push(<span class="string">'&lt;dl class="product"&gt;'</span>)</div><div class="line">  arr.push(<span class="string">'&lt;dt&gt;'</span> + data.name + <span class="string">'&lt;/dt&gt;'</span>)</div><div class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> data[<span class="string">'styles'</span>]) &#123;</div><div class="line">    arr.push(<span class="string">'&lt;dd&gt;'</span> + data[<span class="string">'styles'</span>][key] + <span class="string">'&lt;/dd&gt;'</span>)</div><div class="line">  &#125;</div><div class="line">  arr.push(<span class="string">"&lt;/dl&gt;"</span>)</div><div class="line">  <span class="keyword">return</span> arr.join(<span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = getTplStr(prod) <span class="comment">//result拼接后的字符串</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="写出两种以上声明多行字符串的方法"><a href="#写出两种以上声明多行字符串的方法" class="headerlink" title="写出两种以上声明多行字符串的方法"></a>写出两种以上声明多行字符串的方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*使用\n转义字符回车*/</span></div><div class="line"><span class="keyword">var</span> str1 = <span class="string">"line1\nline2\nline3\n"</span></div><div class="line"><span class="built_in">console</span>.log(str1)</div><div class="line"></div><div class="line"><span class="comment">/*使用反斜杠转义*/</span></div><div class="line"><span class="keyword">var</span> str2 = <span class="string">"line1\</span></div><div class="line"><span class="string">            line2\</span></div><div class="line"><span class="string">            line3\</span></div><div class="line"><span class="string">"</span></div><div class="line"><span class="built_in">console</span>.log(str2)</div><div class="line"></div><div class="line"><span class="comment">/*连接运算符(+)*/</span></div><div class="line"><span class="keyword">var</span> str3 = <span class="string">"line1"</span></div><div class="line">  + <span class="string">"line2"</span></div><div class="line">  + <span class="string">"line3"</span></div><div class="line"><span class="built_in">console</span>.log(str3)</div><div class="line"></div><div class="line"><span class="comment">/*使用多行注释，生成多行字符串*/</span></div><div class="line"><span class="keyword">var</span> str4 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*</span></div><div class="line"><span class="comment">  line1</span></div><div class="line"><span class="comment">  line2</span></div><div class="line"><span class="comment">  line3</span></div><div class="line"><span class="comment">*/</span>&#125;).toString().split(<span class="string">'\n'</span>).slice(<span class="number">1</span>,<span class="number">-1</span>).join(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="comment">/*使用ES6的字符串扩展*/</span></div><div class="line"><span class="keyword">var</span> str5 = <span class="string">`</span></div><div class="line"><span class="string">  line1</span></div><div class="line"><span class="string">  line2</span></div><div class="line"><span class="string">  line3</span></div><div class="line"><span class="string">`</span></div><div class="line"><span class="built_in">console</span>.log(str5)</div></pre></td></tr></table></figure>
<h1 id="写一个函数，判断一个字符串是回文字符串，如-abcdcba是回文字符串-abcdcbb不是"><a href="#写一个函数，判断一个字符串是回文字符串，如-abcdcba是回文字符串-abcdcbb不是" class="headerlink" title="写一个函数，判断一个字符串是回文字符串，如 abcdcba是回文字符串, abcdcbb不是"></a>写一个函数，判断一个字符串是回文字符串，如 abcdcba是回文字符串, abcdcbb不是</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">"string"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> newStr = str.toLowerCase().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">    <span class="keyword">if</span>(newStr === str.toLowerCase()) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"是回文"</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"不是回文"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="写一个函数，统计字符串里出现出现频率最多的字符"><a href="#写一个函数，统计字符串里出现出现频率最多的字符" class="headerlink" title="写一个函数，统计字符串里出现出现频率最多的字符"></a>写一个函数，统计字符串里出现出现频率最多的字符</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMost</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dict = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(dict[str[i]]) &#123;</div><div class="line">      ++dict[str[i]]</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      dict[str[i]] = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> maxValue</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> dict)&#123;</div><div class="line">    <span class="keyword">if</span>(dict[key] &gt; count)&#123;</div><div class="line">      maxValue = key</div><div class="line">      count = dict[key]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//如果出现次数最多的字符不止一个，则加多一层循环</span></div><div class="line">  <span class="keyword">return</span> maxValue + <span class="string">":"</span> + count</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如"><a href="#写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如" class="headerlink" title="写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如"></a>写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">camelize(<span class="string">"background-color"</span>) == <span class="string">'backgroundColor'</span></div><div class="line">camelize(<span class="string">"list-style-image"</span>) == <span class="string">'listStyleImage'</span></div></pre></td></tr></table></figure>
<p>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = str.toLowerCase().split(<span class="string">'-'</span>)</div><div class="line">  <span class="keyword">var</span> newStr = arr[<span class="number">0</span>]</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    newStr += (arr[i].charAt(<span class="number">0</span>).toUpperCase() + arr[i].substring(<span class="number">1</span>))</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newStr</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="写一个-ucFirst函数，返回第一个字母为大写的字符"><a href="#写一个-ucFirst函数，返回第一个字母为大写的字符" class="headerlink" title="写一个 ucFirst函数，返回第一个字母为大写的字符"></a>写一个 ucFirst函数，返回第一个字母为大写的字符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ucFirst(&quot;hunger&quot;) == &quot;Hunger&quot;</div></pre></td></tr></table></figure>
<p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function ucFirst(str) &#123;</div><div class="line">  return str.charAt(0).toUpperCase() + str.substring(1)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如"><a href="#写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如" class="headerlink" title="写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如"></a>写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">truncate(<span class="string">"hello, my name is kmac007"</span>, <span class="number">10</span>) == <span class="string">"hello, thi..."</span>;</div><div class="line">truncate(<span class="string">"hello world"</span>, <span class="number">20</span>) == <span class="string">"hello world"</span></div></pre></td></tr></table></figure>
<p>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, maxlength</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (str.length &gt; maxlength) &#123;</div><div class="line">    <span class="keyword">return</span> str.substring(<span class="number">0</span>, maxlength) + <span class="string">"..."</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> str</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于JavaScript（Standard ECMA-262 3rd Edition - December 1999）的一个子集.JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(网络传输速度)。</p>
<p>严格的JavaScript对象表示法表示结构化的数据。具体写法是：数据在名称/值对中；数据由逗号分隔；花括号保存对象；方括号保存数组</p>
<p>JSON 数据的书写格式是：名称/值对，名称/值对组合中的名称写在前面（在双引号中），值对写在后面(同样在双引号中)，中间用冒号隔开：<br>值（value）可以是双引号括起来的字符串（string）、数值(number)、boolean、 null、对象（object）或者数组（array）。这些结构可以嵌套。</p>
<p>window.JSON是浏览器内置对象<br>其中JSON.parse()表示把字符串解析为JSON对象，而JSON.stringify()表示将JSON对象解析为字符串</p>
</blockquote>
<p>eval() 可以把字符串转为JSON 但不推荐使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用数组拼接出如下字符串&quot;&gt;&lt;a href=&quot;#使用数组拼接出如下字符串&quot; class=&quot;headerlink&quot; title=&quot;使用数组拼接出如下字符串&quot;&gt;&lt;/a&gt;使用数组拼接出如下字符串&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;lt;dl class=&amp;quot;product&amp;quot;&amp;gt;&amp;lt;dt&amp;gt;女装&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;短款&amp;lt;/dd&amp;gt;&amp;lt;dd&amp;gt;冬季&amp;lt;/dd&amp;gt;&amp;lt;dd&amp;gt;春装&amp;lt;/dd&amp;gt;&amp;lt;/dl&amp;gt;&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prod = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;女装&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  styles: [&lt;span class=&quot;string&quot;&gt;&#39;短款&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;冬季&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;春装&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTplStr&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr.push(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;dl class=&quot;product&quot;&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr.push(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;dt&amp;gt;&#39;&lt;/span&gt; + data.name + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/dt&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data[&lt;span class=&quot;string&quot;&gt;&#39;styles&#39;&lt;/span&gt;]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr.push(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;dd&amp;gt;&#39;&lt;/span&gt; + data[&lt;span class=&quot;string&quot;&gt;&#39;styles&#39;&lt;/span&gt;][key] + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/dd&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr.push(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/dl&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = getTplStr(prod) &lt;span class=&quot;comment&quot;&gt;//result拼接后的字符串&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavsScript" scheme="https://www.kmac007.com/tags/JavsScript/"/>
    
      <category term="字符串" scheme="https://www.kmac007.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="JSON" scheme="https://www.kmac007.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>函数与函数作用域</title>
    <link href="https://www.kmac007.com/2017/%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F.html"/>
    <id>https://www.kmac007.com/2017/函数与作用域.html</id>
    <published>2017-03-15T11:56:07.000Z</published>
    <updated>2017-08-26T10:45:09.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h1><p>函数声明与函数表达式的区别在于:</p>
<ol>
<li>函数声明是function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。如：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  而函数表达式采用的是变量赋值的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  这种写法将一个匿名函数赋值给变量，这个匿名函数又称为函数表达式。</p>
<ol>
<li>由于函数声明前置，对于函数声明不必放到调用的前面，而函数表达式必须放到调用的前面。</li>
</ol>
<a id="more"></a>
<h1 id="变量声明前置与函数声明前置"><a href="#变量声明前置与函数声明前置" class="headerlink" title="变量声明前置与函数声明前置"></a>变量声明前置与函数声明前置</h1><p>在一个作用域下，var 声明的变量和function 声明的函数会前置。</p>
<p>变量声明前置：使用var声明变量，变量声明会被提前到函数体的顶部，初始值为undefined而变量赋值操作留在原来的位置。</p>
<p>函数声明前置：采用function命令声明函数时，整个函数会被提升到当前作用域顶部，因此在声明函数之前调用函数也是可行的。</p>
<h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><blockquote>
<p>由于JavaScript允许函数有不定数目的参数，所以我们需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。</p>
</blockquote>
<p>arguments为类数组对象，无法直接使用Aarry对象上的方法。arguments对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，arguments[1]就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p>
<blockquote>
<p>但在严格模式下：</p>
<ol>
<li><p>不允许对arguments赋值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">arguments</span>++; <span class="comment">// 语法错误</span></div></pre></td></tr></table></figure>
</li>
<li><p>arguments不再追踪参数的变化</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">　　　　a = <span class="number">2</span>;</div><div class="line">　　　　<span class="keyword">return</span> [a, <span class="built_in">arguments</span>[<span class="number">0</span>]];</div><div class="line">　　&#125;</div><div class="line">　　f(<span class="number">1</span>); <span class="comment">// 正常模式为[2,2]</span></div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</div><div class="line"><span class="meta">　　　　"use strict"</span>;</div><div class="line">　　　　a = <span class="number">2</span>;</div><div class="line">　　　　<span class="keyword">return</span> [a, <span class="built_in">arguments</span>[<span class="number">0</span>]];</div><div class="line">　　&#125;</div><div class="line">　　f(<span class="number">1</span>); <span class="comment">// 严格模式为[2,1]</span></div></pre></td></tr></table></figure>
</li>
<li><p>禁止使用arguments.callee</p>
</li>
</ol>
<p>这意味着，你无法在匿名函数内部调用自身了。</p>
</blockquote>
<h1 id="函数重载的模拟"><a href="#函数重载的模拟" class="headerlink" title="函数重载的模拟"></a>函数重载的模拟</h1><p>JS没有重载机制，但我们可以模仿重载。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="built_in">arguments</span>[<span class="number">2</span>];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="built_in">arguments</span>[<span class="number">2</span>] + <span class="built_in">arguments</span>[<span class="number">3</span>];</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//3</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//6</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//10</span></div></pre></td></tr></table></figure>
<h1 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h1><p>立即执行函数模式是一种语法，可以让你的函数在定义后立即被执行，<br>这种模式本质上就是函数表达式(命名的或者匿名的)，在创建后立即执行；<br>立即执行函数(immediate function)术语不是在ECMAScript标准中定义的，但它很短有助于描述和讨论模式；<br>这种模式有一些几部分组成：</p>
<ul>
<li>使用函数表达式定义一个函数(函数声明不能起作用)</li>
<li>在结尾加上一对括号，让函数立即被执行</li>
<li>将整个函数包裹在一对括号中(只有在你不将函数赋值给一个变量的时候才需要)</li>
</ul>
<p>主要的作用是：隔离作用域。</p>
<h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><h2 id="求n-，用递归来实现"><a href="#求n-，用递归来实现" class="headerlink" title="求n!，用递归来实现"></a>求n!，用递归来实现</h2> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数，返回参数的平方和"><a href="#写一个函数，返回参数的平方和" class="headerlink" title="写一个函数，返回参数的平方和"></a>写一个函数，返回参数的平方和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfSquares</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">    sum += <span class="built_in">Math</span>.pow(<span class="built_in">arguments</span>[i],<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = sumOfSquares(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="keyword">var</span> result2 = sumOfSquares(<span class="number">1</span>,<span class="number">3</span>)</div><div class="line"><span class="built_in">console</span>.log(result)  <span class="comment">//29</span></div><div class="line"><span class="built_in">console</span>.log(result2)  <span class="comment">//10</span></div></pre></td></tr></table></figure>
<h2 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  输出：</span></div><div class="line"><span class="comment">  undefined</span></div><div class="line"><span class="comment">  b is not defined</span></div><div class="line"><span class="comment">  原因是a声明前置，初始值为undefined，而b并没有声明</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h2 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> sayName(<span class="string">'world'</span>);</div><div class="line">sayAge(<span class="number">10</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'hello '</span>, name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sayAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(age);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  输出：</span></div><div class="line"><span class="comment">  hello world</span></div><div class="line"><span class="comment">  sayAge is not a function</span></div><div class="line"><span class="comment">  原因是sayName函数声明前置</span></div><div class="line"><span class="comment">  而sayAge采用的是函数表达式的形式，必须要声明后才能调用</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<h2 id="如下代码输出什么-写出作用域链查找过程伪代码"><a href="#如下代码输出什么-写出作用域链查找过程伪代码" class="headerlink" title="如下代码输出什么? 写出作用域链查找过程伪代码"></a>如下代码输出什么? 写出作用域链查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span></div><div class="line">bar()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">30</span></div><div class="line">  foo()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//作用域链过程伪代码：</span></div><div class="line"></div><div class="line">globalContext = &#123;</div><div class="line">    AO: &#123;</div><div class="line">        x: <span class="number">10</span></div><div class="line">        foo: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">        <span class="title">bar</span>: <span class="title">function</span></span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function">    <span class="title">Scope</span>:<span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//声明<span class="title">foo</span>时得到下面</span></div><div class="line">foo.[[scope]] = globalContext.AO</div><div class="line"><span class="comment">//声明</span></div><div class="line">bar.[[scope]] = globalConetxt.AO</div><div class="line"><span class="comment">//进入bar的执行上下文</span></div><div class="line">barContext = &#123;</div><div class="line">    AO: &#123;</div><div class="line">        x: <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">    scope: globalConetext.AO</div><div class="line">&#125;</div><div class="line"><span class="comment">//进入foo的执行上下文</span></div><div class="line">fooConetxt = &#123;</div><div class="line">    AO: &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    scope: globalConetext.AO</div><div class="line">&#125;</div><div class="line"></div><div class="line">故输出为： <span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="如下代码输出什么-写出作用域链查找过程伪代码-1"><a href="#如下代码输出什么-写出作用域链查找过程伪代码-1" class="headerlink" title="如下代码输出什么? 写出作用域链查找过程伪代码"></a>如下代码输出什么? 写出作用域链查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">bar()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">30</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x)</div><div class="line">  &#125;</div><div class="line">  foo();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//作用域链查找过程伪代码：</span></div><div class="line"></div><div class="line">globleContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">10</span></div><div class="line">    bar: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">bar</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">barContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">30</span>;</div><div class="line">    foo: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globleContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">foo</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">fooContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: barContext.AO</div><div class="line">&#125;</div><div class="line">结果输出为: <span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="以下代码输出什么-写出作用域链的查找过程伪代码"><a href="#以下代码输出什么-写出作用域链的查找过程伪代码" class="headerlink" title="以下代码输出什么? 写出作用域链的查找过程伪代码"></a>以下代码输出什么? 写出作用域链的查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">bar()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">30</span>;</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x)</div><div class="line">  &#125;)()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//作用域链的查找过程伪代码：</span></div><div class="line">globleContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">10</span></div><div class="line">    bar: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">bar</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">barContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    x: <span class="number">30</span></div><div class="line">    (anonymous): <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globleContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入匿名函数执行上下文</span></div><div class="line"><span class="function"><span class="title">anonymousContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: barContext.AO</div><div class="line">&#125;</div><div class="line">所以最后输出: <span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="以下代码输出什么？-写出作用域链查找过程伪代码"><a href="#以下代码输出什么？-写出作用域链查找过程伪代码" class="headerlink" title="以下代码输出什么？ 写出作用域链查找过程伪代码"></a>以下代码输出什么？ 写出作用域链查找过程伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  <span class="keyword">var</span> a = <span class="number">5</span></div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  a++</div><div class="line">  <span class="keyword">var</span> a</div><div class="line">  fn3()</div><div class="line">  fn2()</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a)</div><div class="line">    a = <span class="number">20</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  a = <span class="number">200</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">fn()</div><div class="line"><span class="built_in">console</span>.log(a)</div><div class="line"></div><div class="line"><span class="comment">//作用域链查找过程伪代码：</span></div><div class="line">globleContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="number">1</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">    <span class="title">fn3</span>: <span class="title">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">null</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//声明<span class="title">fn</span>时:</span></div><div class="line">fn.[[scope]]=globalContext.AO</div><div class="line"><span class="comment">//声明fn3时:</span></div><div class="line">fn3.[[scope]]=globalContext.AO</div><div class="line"><span class="comment">//开始进入fn的执行上下文</span></div><div class="line">fnContext = &#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="literal">undefined</span>  <span class="comment">//输出undefined,变量声明提前</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>:<span class="title">globalContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//声明<span class="title">a</span>后</span></div><div class="line"><span class="function"><span class="title">fnContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="number">5</span>          <span class="comment">//输出5</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globalContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//<span class="title">a</span>++</span></div><div class="line"><span class="function"><span class="title">fnContext</span> = </span>&#123;</div><div class="line">  AO: &#123;</div><div class="line">    a: <span class="number">6</span></div><div class="line">    fn: <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">  <span class="title">scope</span>: <span class="title">globalContext</span>.<span class="title">AO</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">//进入<span class="title">fn3</span>的执行上下文</span></div><div class="line"><span class="function"><span class="title">fn3Context</span> = </span>&#123;</div><div class="line">  Ao: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: globalContext.AO   <span class="comment">//输出1  此后全局作用域下a:200</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//进入fn2的执行上下文</span></div><div class="line">fn2Context = &#123;</div><div class="line">  AO: &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  scope: fnContext.AO   <span class="comment">//输出6 此后fnContext.AO作用域下a:20</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//输出20 此后全局作用域下a:200</span></div><div class="line"><span class="comment">//输出200</span></div><div class="line"></div><div class="line">即输出结果为：<span class="literal">undefined</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">20</span> <span class="number">200</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数声明与函数表达式的区别&quot;&gt;&lt;a href=&quot;#函数声明与函数表达式的区别&quot; class=&quot;headerlink&quot; title=&quot;函数声明与函数表达式的区别&quot;&gt;&lt;/a&gt;函数声明与函数表达式的区别&lt;/h1&gt;&lt;p&gt;函数声明与函数表达式的区别在于:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数声明是function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。如：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  而函数表达式采用的是变量赋值的写法：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sayHi = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  这种写法将一个匿名函数赋值给变量，这个匿名函数又称为函数表达式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于函数声明前置，对于函数声明不必放到调用的前面，而函数表达式必须放到调用的前面。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.kmac007.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kmac007.com/tags/JavaScript/"/>
    
      <category term="函数" scheme="https://www.kmac007.com/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="作用域" scheme="https://www.kmac007.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>几种方式实现元素的垂直居中</title>
    <link href="https://www.kmac007.com/2017/%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html"/>
    <id>https://www.kmac007.com/2017/几种方式实现元素的垂直居中.html</id>
    <published>2017-03-12T12:10:06.000Z</published>
    <updated>2017-08-26T05:53:10.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>HTML结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>垂直居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="flexbox布局"><a href="#flexbox布局" class="headerlink" title="flexbox布局"></a>flexbox布局</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="绝对定位负margin"><a href="#绝对定位负margin" class="headerlink" title="绝对定位负margin"></a>绝对定位负margin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  background-color: red;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.box &#123;</div><div class="line">  background-color: #000;</div><div class="line">  color: #fff;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  margin-left: -25px;</div><div class="line">  margin-top: -25px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与绝对定位负边距相似</p>
<h1 id="绝对定位和0"><a href="#绝对定位和0" class="headerlink" title="绝对定位和0"></a>绝对定位和0</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绝对定位，margin: auto; top, left, bottom, right均设为0, 子元素margin会撑开形成垂直居中</p>
<h1 id="伪元素与inline-block"><a href="#伪元素与inline-block" class="headerlink" title="伪元素与inline-block"></a>伪元素与inline-block</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  background-color: red;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line">.box &#123;</div><div class="line">  background-color: #000;</div><div class="line">  color: #fff;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div><div class="line">.container::after &#123;</div><div class="line">  content: &apos;&apos;;</div><div class="line">  display: inline-block;</div><div class="line">  width: 0;</div><div class="line">  height: 100%;</div><div class="line">  vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTML结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;垂直居中&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;flexbox布局&quot;&gt;&lt;a href=&quot;#flexbox布局&quot; class=&quot;headerlink&quot; title=&quot;flexbox布局&quot;&gt;&lt;/a&gt;flexbox布局&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;align-items&lt;/span&gt;: center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;table-cell&quot;&gt;&lt;a href=&quot;#table-cell&quot; class=&quot;headerlink&quot; title=&quot;table-cell&quot;&gt;&lt;/a&gt;table-cell&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>浏览器兼容</title>
    <link href="https://www.kmac007.com/2017/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9.html"/>
    <id>https://www.kmac007.com/2017/浏览器兼容.html</id>
    <published>2017-03-10T11:15:04.000Z</published>
    <updated>2017-08-26T05:52:18.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h1><p>CSS hack由于不同厂商的浏览器，比如IE, Safari, firefox, chorme，或同一厂商不同版本，如IE6和IE7，对CSS的解析认识不完全一样，因此能够导致生成页面效果不一样，得不到所需要的效果。这个时候我们需要针对不同浏览器写不同的CSS，让它能够同时兼容不同的浏览器，能在不同浏览器中也能得到我们想要的页面效果。</p>
<h1 id="浏览器兼容的思路"><a href="#浏览器兼容的思路" class="headerlink" title="浏览器兼容的思路"></a>浏览器兼容的思路</h1><h2 id="要不要做"><a href="#要不要做" class="headerlink" title="要不要做"></a>要不要做</h2><ul>
<li>产品的角度（产品的受众、受众的浏览器比例、效果优先还是基本功能优先）</li>
<li>成本角度（有无必要做某件事情）</li>
</ul>
<h2 id="做到什么程度"><a href="#做到什么程度" class="headerlink" title="做到什么程度"></a>做到什么程度</h2><ul>
<li>让哪些浏览器支持哪些效果</li>
</ul>
<h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><ul>
<li>根据兼容需求选择技术框架/库(jquery)</li>
<li>根据兼容需求选择兼容工具(html5shiv.js、repond.js、css reset、normalize.css、Modernizr)、postCSS</li>
<li>条件注释、CSS hack、js能力检测做一些修补</li>
</ul>
<a id="more"></a>
<h1 id="列举5种以上浏览器兼容的写法"><a href="#列举5种以上浏览器兼容的写法" class="headerlink" title="列举5种以上浏览器兼容的写法"></a>列举5种以上浏览器兼容的写法</h1><ol>
<li><p>条件注释<br>条件注释（Conditional comments）对IE的版本和IE非IE有优秀的区分能力，是WEB设计中常用的hack方法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE]&gt;用于 IE &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 6]&gt;用于 IE6 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 7]&gt;用于 IE7 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;用于 IE8 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 9]&gt;用于 IE9 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gt IE 6]&gt; 用于 IE6 以上版本&lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lte IE 7]&gt; 用于 IE7或更低版本 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gte IE 8]&gt;用于 IE8 或更高版本 &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;用于 IE9 以下版本&lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if !IE]&gt; --&gt;</span>用于非 IE <span class="comment">&lt;!-- &lt;![endif]--&gt;</span></div><div class="line">使用了条件注释的页面在 Windows Internet Explorer 9 中可正常工作，但在 Internet Explorer 10 中无法正常工作。 IE10不再支持条件注释</div></pre></td></tr></table></figure>
</li>
<li><p>CSS属性前缀法<br>属性前缀法(即类内部Hack)：例如 IE6能识别下划线””和星号” <em> “，IE7能识别星号” </em> “，但不能识别下划线””，IE6~IE10都认识”\9”，但firefox前述三个都不能认识</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  color: red;</div><div class="line">  _color: blue; /*ie6*/</div><div class="line">  *color: pink; /*ie67*/</div><div class="line">  color: yellow\9;  /*ie/edge 6-8*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>选择器前缀法（即选择器Hack）</p>
<p> 例如</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IE6能识别*html .class&#123;&#125;，</div><div class="line">IE7能识别*+html .class&#123;&#125;或者*:first-child+html .class&#123;&#125;。</div></pre></td></tr></table></figure>
</li>
<li><p>浏览器前缀</p>
</li>
</ol>
<ul>
<li>-webkit- ，针对safari，chrome浏览器的内核CSS写法</li>
<li>-moz-，针对firefox浏览器的内核CSS写法</li>
<li>-ms-，针对ie内核的CSS写法</li>
<li>-o-，针对Opera内核的CSS写法<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">-o-border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4-以下工具-名词是做什么的"><a href="#4-以下工具-名词是做什么的" class="headerlink" title="4. 以下工具/名词是做什么的"></a>4. 以下工具/名词是做什么的</h1><ul>
<li>条件注释<ul>
<li>条件注释 (conditional comment) 是于HTML源码中被IE有条件解释的语句。条件注释可被用来向IE提供及隐藏代码。使用了条件注释的页面在 Windows Internet Explorer 9 中可正常工作，但在 Internet Explorer 10 中无法正常工作。 IE10不再支持条件注释</li>
</ul>
</li>
<li>IE Hack<ul>
<li>针对IE浏览器编写不同的CSS以达到让IE正常解析CSS。</li>
</ul>
</li>
<li>js 能力检测<ul>
<li>识别浏览器的能力而不是识别特定的浏览器。只需根据浏览器支持的功能给出解决方案。</li>
</ul>
</li>
<li>html5shiv.js<ul>
<li>用于解决IE9以下版本浏览器对HTML5新增标签不识别，并导致CSS不起作用的问题。</li>
</ul>
</li>
<li>respond.js<ul>
<li>用于为 IE6-8 以及其它不支持 CSS3 -<br>媒体查询功能的浏览器提供媒体查询的 min-width 和 max-width 特性，实现响应式网页设计。</li>
</ul>
</li>
<li>css reset<ul>
<li>去除浏览器的默认样式。</li>
</ul>
</li>
<li>normalize.css<ul>
<li>Normalize.css 只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。</li>
</ul>
</li>
<li>Modernizr<ul>
<li>是一个用来检测浏览器功能支持情况的 JavaScript 库。通过这个库我们可以检测不同的浏览器对于HTML5特性的支持情况。</li>
</ul>
</li>
<li>postCSS<ul>
<li>它可以被理解为一个平台，可以让一些插件在上面跑，它提供了一个解析器，可以将CSS解析成抽象语法树，通过PostCSS这个平台，我们能够开发一些插件，来处理CSS。热门插件如autoprefixer，它可以帮我们处理兼容问题，只需正常写CSS，autoprefixer可以帮我的自动生成兼容性代码</li>
</ul>
</li>
</ul>
<h1 id="查询属性兼容性"><a href="#查询属性兼容性" class="headerlink" title="查询属性兼容性"></a>查询属性兼容性</h1><p><a href="http://caniuse.com/" target="_blank" rel="external">http://caniuse.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-hack&quot;&gt;&lt;a href=&quot;#CSS-hack&quot; class=&quot;headerlink&quot; title=&quot;CSS hack&quot;&gt;&lt;/a&gt;CSS hack&lt;/h1&gt;&lt;p&gt;CSS hack由于不同厂商的浏览器，比如IE, Safari, firefox, chorme，或同一厂商不同版本，如IE6和IE7，对CSS的解析认识不完全一样，因此能够导致生成页面效果不一样，得不到所需要的效果。这个时候我们需要针对不同浏览器写不同的CSS，让它能够同时兼容不同的浏览器，能在不同浏览器中也能得到我们想要的页面效果。&lt;/p&gt;
&lt;h1 id=&quot;浏览器兼容的思路&quot;&gt;&lt;a href=&quot;#浏览器兼容的思路&quot; class=&quot;headerlink&quot; title=&quot;浏览器兼容的思路&quot;&gt;&lt;/a&gt;浏览器兼容的思路&lt;/h1&gt;&lt;h2 id=&quot;要不要做&quot;&gt;&lt;a href=&quot;#要不要做&quot; class=&quot;headerlink&quot; title=&quot;要不要做&quot;&gt;&lt;/a&gt;要不要做&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;产品的角度（产品的受众、受众的浏览器比例、效果优先还是基本功能优先）&lt;/li&gt;
&lt;li&gt;成本角度（有无必要做某件事情）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;做到什么程度&quot;&gt;&lt;a href=&quot;#做到什么程度&quot; class=&quot;headerlink&quot; title=&quot;做到什么程度&quot;&gt;&lt;/a&gt;做到什么程度&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;让哪些浏览器支持哪些效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何做&quot;&gt;&lt;a href=&quot;#如何做&quot; class=&quot;headerlink&quot; title=&quot;如何做&quot;&gt;&lt;/a&gt;如何做&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据兼容需求选择技术框架/库(jquery)&lt;/li&gt;
&lt;li&gt;根据兼容需求选择兼容工具(html5shiv.js、repond.js、css reset、normalize.css、Modernizr)、postCSS&lt;/li&gt;
&lt;li&gt;条件注释、CSS hack、js能力检测做一些修补&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="兼容性" scheme="https://www.kmac007.com/categories/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    
      <category term="兼容性" scheme="https://www.kmac007.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>常见的CSS布局</title>
    <link href="https://www.kmac007.com/2017/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80.html"/>
    <id>https://www.kmac007.com/2017/CSS常见布局.html</id>
    <published>2017-03-07T09:20:34.000Z</published>
    <updated>2017-08-26T05:53:19.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五种方式实现三栏布局"><a href="#五种方式实现三栏布局" class="headerlink" title="五种方式实现三栏布局"></a>五种方式实现三栏布局</h1><p>采用五种方式实现横向左右定宽，中间自适应的三栏布局</p>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><script async src="//jsfiddle.net/kmac007/pgd5xo51/embed/css,result,html/dark/"></script>

<p>左右模块各自向左右浮动，并设置中间部分的左右margin值<br>缺点是要按照left,right,main这样的顺序写HTML。</p>
<a id="more"></a>
<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><script async src="//jsfiddle.net/kmac007/qrgnbc3u/2/embed/css,result,html/dark/"></script>

<p>实用。</p>
<h2 id="flexbox布局"><a href="#flexbox布局" class="headerlink" title="flexbox布局"></a>flexbox布局</h2><script async src="//jsfiddle.net/kmac007/smw3gh97/embed/css,result,html/dark/"></script>

<p>要考虑兼容性的问题，对于移动端我一般采用这种方式来进行三栏布局。</p>
<h2 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h2><script async src="//jsfiddle.net/kmac007/Lr4shy0y/embed/css,result,html/dark/"></script>

<p>缺点：无法设置main与两边的间隔</p>
<h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><script async src="//jsfiddle.net/kmac007/adsc5ufx/embed/css,html,result/dark/"></script>

<p>缺点：兼容性有点尴尬啊。。</p>
<h1 id="单栏布局"><a href="#单栏布局" class="headerlink" title="单栏布局"></a>单栏布局</h1><script async src="//jsfiddle.net/kmac007/4cxpeon6/embed/css,html,result/dark/"></script>


<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><script async src="//jsfiddle.net/kmac007/j4qsdtmn/embed/css,html,result/dark/"></script>

<p>main先加载，三个部分均左浮动，left和right设置负margin与main处在同一行，再通过相对定位调整位置。缺点是当页面缩小，页面结构会乱。</p>
<blockquote>
<p>对于这种方法。。有之前那么多种优秀的方法，迫不得已我是不会用的。</p>
</blockquote>
<h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><script async src="//jsfiddle.net/kmac007/5nbsL11h/embed/css,html,result/dark/"></script>

<p>给main一个包裹层，设置左右margin，三个部分均浮动，其中左右定宽，中间100%,左右通过负margin回到合适的位置。</p>
<blockquote>
<p>同样的，对于这种方法。。有之前那么多种优秀的方法，迫不得已我是不会用的。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;五种方式实现三栏布局&quot;&gt;&lt;a href=&quot;#五种方式实现三栏布局&quot; class=&quot;headerlink&quot; title=&quot;五种方式实现三栏布局&quot;&gt;&lt;/a&gt;五种方式实现三栏布局&lt;/h1&gt;&lt;p&gt;采用五种方式实现横向左右定宽，中间自适应的三栏布局&lt;/p&gt;
&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;script async src=&quot;//jsfiddle.net/kmac007/pgd5xo51/embed/css,result,html/dark/&quot;&gt;&lt;/script&gt;

&lt;p&gt;左右模块各自向左右浮动，并设置中间部分的左右margin值&lt;br&gt;缺点是要按照left,right,main这样的顺序写HTML。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.kmac007.com/tags/CSS/"/>
    
      <category term="布局" scheme="https://www.kmac007.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析浮动定位BFC边距合并</title>
    <link href="https://www.kmac007.com/2017/%E6%B5%85%E6%9E%90%E6%B5%AE%E5%8A%A8%E5%AE%9A%E4%BD%8DBFC%E8%BE%B9%E8%B7%9D%E5%90%88%E5%B9%B6.html"/>
    <id>https://www.kmac007.com/2017/浅析浮动定位BFC边距合并.html</id>
    <published>2017-03-05T07:00:55.000Z</published>
    <updated>2017-08-26T05:53:13.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响"><a href="#浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响" class="headerlink" title="浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?"></a>浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?</h1><p>浮动的特征是使元素脱离普通流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素才停下来；</p>
<p><strong>对父容器的影响:</strong> 父容器中的元素浮动后，脱离普通流会使得父容器失去高度；</p>
<p><strong>对其他浮动元素的影响：</strong> 如果是同一方向浮动，相邻的浮动元素会并列在同一行，空间不够，会换到下一行</p>
<p><strong>对普通元素的影响</strong>： 浮动元素会脱离普通流，普通元素会占据它原有的空间，从而会出现浮动元素覆盖普通元素</p>
<p><strong>对文字的影响：</strong> 文字可以感知的浮动元素的存在，文字会在浮动元素周围形成环绕效果</p>
<a id="more"></a>
<h1 id="清除浮动指什么-如何清除浮动-两种以上方法"><a href="#清除浮动指什么-如何清除浮动-两种以上方法" class="headerlink" title="清除浮动指什么? 如何清除浮动? 两种以上方法"></a>清除浮动指什么? 如何清除浮动? 两种以上方法</h1><ul>
<li>清除浮动指的是通过clear属性解决由元素浮动引起的父容器的塌陷问题。</li>
<li><p>清楚浮动的方法：</p>
<ol>
<li>方法一：父级元素定义：overflow: hidden;</li>
<li><p>方法二：使用伪元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>方法三：在父元素末尾添加一个空div,设置样式clear: both (与方法二类似)</p>
</li>
</ol>
</li>
</ul>
<h1 id="有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？"><a href="#有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？" class="headerlink" title="有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？"></a>有几种定位方式，分别是如何实现定位的，参考点是什么，使用场景是什么？</h1><ol>
<li>static: 默认值,没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）</li>
<li>relative: 生成相对定位元素，相对于元素本身正常位置进行定位。</li>
<li>absolute: 脱离普通流，生成绝对定位的元素，相对于static定位以外的第一个祖先元素（offset parent）进行定位,元素的位置通过 left, top, right 以及 bottom 属性进行规定</li>
<li>fixed: 绝对定位，脱离普通流，相对于浏览器窗口进行定位。元素的位置通过 left, top, right 以及 bottom 属性进行规定</li>
<li>sticky: CSS3新属性，表现类似position: relative和position: fixed的合体，在目标区域在屏幕中可见时，它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像position:fixed，它会固定在目标位置</li>
</ol>
<h1 id="z-index-有什么作用-如何使用"><a href="#z-index-有什么作用-如何使用" class="headerlink" title="z-index 有什么作用? 如何使用?"></a>z-index 有什么作用? 如何使用?</h1><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。元素可拥有负的 z-index 属性值。</p>
<ul>
<li>应用 ：元素脱离了普通流，覆盖了普通元素，要修改显示顺序，可以为两者添加z-index属性值，其中属性值越大，显示的越靠前。</li>
</ul>
<h1 id="position-relative和负margin都可以使元素位置发生偏移-二者有什么区别"><a href="#position-relative和负margin都可以使元素位置发生偏移-二者有什么区别" class="headerlink" title="position:relative和负margin都可以使元素位置发生偏移?二者有什么区别"></a>position:relative和负margin都可以使元素位置发生偏移?二者有什么区别</h1><ul>
<li>position: relative: 相对于自身偏移，不脱离普通流，仍占据原有空间，不影响其他元素</li>
<li>负margin: 除了让元素自身发生偏移还影响其它普通流中的元素。</li>
</ul>
<h1 id="BFC-是什么？如何生成-BFC？BFC-有什么作用？举例说明"><a href="#BFC-是什么？如何生成-BFC？BFC-有什么作用？举例说明" class="headerlink" title="BFC 是什么？如何生成 BFC？BFC 有什么作用？举例说明"></a>BFC 是什么？如何生成 BFC？BFC 有什么作用？举例说明</h1><ul>
<li>BFC(Block formatting context)直译为“块级格式化上下文 ”。BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。同时BFC任然属于文档中的普通流。</li>
<li>如何生成BFC：当一个HTML元素满足下面条件的任何一点，都可以产生Block Formatting Context<ul>
<li>float: 除了none以外的值</li>
<li>overflow除了visible意外的值（hidden, auto, scroll）</li>
<li>display(table-cell, table-caption, inline-block)</li>
<li>position(absolute, fixed)</li>
</ul>
</li>
<li>BFC的作用<ol>
<li><strong>阻止边距折叠：</strong><br> 我们知道在一般情况下，两个上下相邻的盒子会折叠它们垂直方向接触到的边距，这种情况只会发生在同一个Block Formatting Context中。换句话说，在同一个布局环境中（Block Formatting Context）是边距折叠的必要条件。这也就是为什么浮动的元素和绝对定位元素不会发生边距折叠的原因（当然还有很多种情况也不会折叠）。</li>
<li><strong>可以包含浮动元素如:</strong></li>
<li><strong>阻止元素被浮动覆盖，如:</strong></li>
</ol>
</li>
</ul>
<h1 id="在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例"><a href="#在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例" class="headerlink" title="在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例"></a>在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？给个父子外边距合并的范例</h1><ul>
<li>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。即：<strong>两个或多个毗邻的普通流中的块元素垂直方向上的 margin 会折叠</strong> 当然负margin的情况下也会出现margin合并的现象。</li>
<li>不让相邻元素外边距合并：<ol>
<li>浮动元素、inline-block元素、绝对定位元素不会和垂直方向上其他元素的margin折叠(这里指的是上下相邻的元素)</li>
<li>创建了格式化上下文的元素，不和它的子元素发生margin折叠（这里指的是BFC的元素和它的子元素不会发生折叠）</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响&quot;&gt;&lt;a href=&quot;#浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响&quot; class=&quot;headerlink&quot; title=&quot;浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?&quot;&gt;&lt;/a&gt;浮动元素有什么特征？对父容器、其他浮动元素、普通元素、文字分别有什么影响?&lt;/h1&gt;&lt;p&gt;浮动的特征是使元素脱离普通流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素才停下来；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对父容器的影响:&lt;/strong&gt; 父容器中的元素浮动后，脱离普通流会使得父容器失去高度；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对其他浮动元素的影响：&lt;/strong&gt; 如果是同一方向浮动，相邻的浮动元素会并列在同一行，空间不够，会换到下一行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对普通元素的影响&lt;/strong&gt;： 浮动元素会脱离普通流，普通元素会占据它原有的空间，从而会出现浮动元素覆盖普通元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对文字的影响：&lt;/strong&gt; 文字可以感知的浮动元素的存在，文字会在浮动元素周围形成环绕效果&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.kmac007.com/categories/CSS/"/>
    
    
      <category term="BFC" scheme="https://www.kmac007.com/tags/BFC/"/>
    
      <category term="浮动" scheme="https://www.kmac007.com/tags/%E6%B5%AE%E5%8A%A8/"/>
    
      <category term="定位" scheme="https://www.kmac007.com/tags/%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
</feed>
